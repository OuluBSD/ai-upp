#include "EonLib.h"



INITBLOCK {
	using namespace Upp;
	
	// Audio
	#define REGISTER_ATOM(x) VfsValueExtFactory::RegisterAtom<x>(#x);
	REGISTER_ATOM(MidiFileReader);
	REGISTER_ATOM(MidiFileReader16);
	REGISTER_ATOM(MidiFileReaderPipe);
	REGISTER_ATOM(MidiNullSink);
	#if defined flagFLUIDSYNTH || defined flagFLUIDLITE
	REGISTER_ATOM(FluidsynthPipe);
	#endif
	REGISTER_ATOM(SoftInstrumentPipe);
	REGISTER_ATOM(FmSynthPipe);
	REGISTER_ATOM(CoreSynthPipe);
	REGISTER_ATOM(CoreDrummerPipe);
	REGISTER_ATOM(CoreEffectPipe);
	REGISTER_ATOM(CoreEffectAtom);
	#ifdef flagLV2
	REGISTER_ATOM(LV2InstrumentPipe);
	REGISTER_ATOM(LV2EffectPipe);
	#endif
	#if (defined flagBUILTIN_PORTMIDI) || (defined flagPORTMIDI)
	REGISTER_ATOM(PortmidiPipe);
	REGISTER_ATOM(PortmidiSend);
	#endif
	REGISTER_ATOM(CoreAudioFileOut);
	
	// Handle
	
	#ifdef flagSCREEN
	REGISTER_ATOM(HandleProgVideo);
	#endif
	
	#if defined flagSCREEN
	REGISTER_ATOM(HandleProgEvents);
	#endif
	#if defined flagSCREEN
	REGISTER_ATOM(CenterProgPipe);
	#endif
	#if defined flagSCREEN
	REGISTER_ATOM(OglProgPipe);
	#endif
	#if defined flagSCREEN
	REGISTER_ATOM(HandleProgVideo);
	#endif
	
	// Minimal
	
	REGISTER_ATOM(CenterCustomer);
	REGISTER_ATOM(TestRealtimeSrc);
	REGISTER_ATOM(TestRealtimeSink);
	REGISTER_ATOM(TestPollerSink);
	#if (!defined flagSYS_PORTAUDIO) || (defined flagPORTAUDIO)
	REGISTER_ATOM(PortaudioSink);
	#endif
	#if defined flagFFMPEG
	REGISTER_ATOM(AudioDecoderSrc);
	#endif
	REGISTER_ATOM(AudioDbgSrc);
	REGISTER_ATOM(AudioSplitter);
	REGISTER_ATOM(AudioSplitterUser);
	REGISTER_ATOM(AudioJoiner);
	REGISTER_ATOM(AudioJoinerUser);
	REGISTER_ATOM(AudioJoiner2User);
	REGISTER_ATOM(AudioMixer16);
	#if defined flagSCREEN
	REGISTER_ATOM(VideoDbgSrc);
	#endif
	#if (defined flagOPENCV && defined flagLINUX)
	REGISTER_ATOM(WebcamPipe);
	#endif
	#if (defined flagOPENCV && defined flagLINUX)
	REGISTER_ATOM(WebcamAtom);
	#endif
	#if defined flagFFMPEG
	REGISTER_ATOM(AudioLoaderAtom);
	#endif
	#if defined flagFFMPEG
	REGISTER_ATOM(VideoLoaderAtom);
	#endif
	#if defined flagSCREEN
	REGISTER_ATOM(EventStatePipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwFboProg);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglFboProg);
	#endif
	#if defined flagSDL2
	REGISTER_ATOM(SdlSwFboProg);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglFboProg);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwShaderPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglShaderPipe);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglShaderPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwFboAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglFboAtomPipe);
	#endif
	#if defined flagSDL2
	REGISTER_ATOM(SdlSwFboAtomPipe);
	#endif
	#if (defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglFboAtomPipe);
	#endif
	#if (defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglProgAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11ContextAtom);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwContextAtom);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglContextAtom);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11EventAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwEventAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglEventAtomPipe);
	#endif
	#if (defined flagWIN32 && defined flagSCREEN && !defined flagUWP)
	REGISTER_ATOM(WinContextAtom);
	#endif
	#if (defined flagWIN32 && defined flagSCREEN && !defined flagUWP)
	REGISTER_ATOM(WinVideoAtomPipe);
	#endif
	REGISTER_ATOM(DxCustomer);
	#if (defined flagWIN32 && defined flagSCREEN && defined flagDX11)
	REGISTER_ATOM(WinD11ContextAtom);
	#endif
	#if (defined flagSCREEN && defined flagWIN32 && defined flagDX11)
	REGISTER_ATOM(WinD11FboProg);
	#endif
	#if (defined flagWIN32 && defined flagSCREEN && defined flagDX11)
	REGISTER_ATOM(WinD11FboAtomPipe);
	#endif
	#if (defined flagWIN32 && defined flagSCREEN && defined flagDX11)
	REGISTER_ATOM(WinD11FboAtomSA);
	#endif
	REGISTER_ATOM(OglCustomer);
	#if defined flagSDL2
	REGISTER_ATOM(SdlContextAtom);
	#endif
	#if defined flagSDL2
	REGISTER_ATOM(SdlEventAtomPipe);
	#endif
	REGISTER_ATOM(TestEventSrcPipe);
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglImageLoader);
	#endif
	REGISTER_ATOM(VolumeLoaderAtom);
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11VideoAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglVideoAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglFboAtomSA);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwVideoAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwFboAtomSA);
	#endif
	#if (defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglFboAtomSA);
	#endif
	#if defined flagSDL2 && defined flagOGL && defined flagGUI
	REGISTER_ATOM(SdlUppOglDeviceSA);
	#endif
	#if (defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglFboPipe);
	#endif
	#if (defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglFboAtom);
	#endif
	#if defined flagSDL2 && defined flagGUI
	REGISTER_ATOM(SdlUppEventsBasePipe);
	#endif
	#if defined flagSDL2
	REGISTER_ATOM(SdlVideoAtomPipe);
	#endif
	#if defined flagSDL2
	REGISTER_ATOM(SdlProgAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11ProgAtomPipe);
	#endif
	#if (defined flagX11 && defined flagSCREEN)
	REGISTER_ATOM(X11SwFboGuiProg);
	#endif
	#if (defined flagX11 && defined flagSCREEN && defined flagOGL)
	REGISTER_ATOM(X11OglFboGuiProg);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglFboGuiProg);
	#endif
	#if defined flagSDL2
	REGISTER_ATOM(SdlVideoAtom);
	#endif
	#if defined flagSDL2
	REGISTER_ATOM(SdlAudioAtom);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglShaderAtom);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglShaderAtomSA);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglTextureSource);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglVolumeSource);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglAudioSink);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglKeyboardSource);
	#endif
	#if (defined flagSCREEN && defined flagSDL2 && defined flagOGL)
	REGISTER_ATOM(SdlOglAudioSource);
	#endif
	
	// VR
	
	#if (defined flagFREEBSD && defined flagOPENHMD) || (defined flagLINUX && defined flagOPENHMD)
	REGISTER_ATOM(OpenHMDPipe);
	#endif
	#if defined flagLOCALHMD
	REGISTER_ATOM(LocalHMDPipe);
	#endif
	#if (defined flagFREEBSD) || (defined flagLINUX)
	REGISTER_ATOM(RemoteVRServerPipe);
	#endif
	#if (defined flagFREEBSD && defined flagHACK) || (defined flagLINUX && defined flagHACK)
	REGISTER_ATOM(BluetoothHoloPipe);
	#endif
	#if (defined flagUWP && defined flagDX12)
	REGISTER_ATOM(HoloContextAtom);
	#endif
	#if (defined flagUWP && defined flagDX12)
	REGISTER_ATOM(HoloEventAtomPipe);
	#endif
	#if (defined flagUWP && defined flagDX12 && defined flagDX12)
	REGISTER_ATOM(HoloD12FboAtomSA);
	#endif
	#undef REGISTER_ATOM
	
	
	// SerialMach
	#define REGISTER_LINK(x) VfsValueExtFactory::RegisterLink<x>(#x);
	REGISTER_LINK(CustomerLink);
	REGISTER_LINK(PipeLink);
	REGISTER_LINK(PipeOptSideLink);
	REGISTER_LINK(IntervalPipeLink);
	REGISTER_LINK(ExternalPipeLink);
	REGISTER_LINK(DriverLink);
	REGISTER_LINK(MergerLink);
	REGISTER_LINK(JoinerLink);
	REGISTER_LINK(SplitterLink);
	REGISTER_LINK(PollerLink);
	#undef REGISTER_LINK
	
}


