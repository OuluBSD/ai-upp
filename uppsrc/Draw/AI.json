{"source_files":[{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h","value":"dataÿ«\u0002\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0006DRAW_H\u0000\u0006DRAW_H\u0006DRAW_H\u0000\u0006DRAW_H\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\nSYSTEMDRAW\u0000\nSYSTEMDRAW\nSYSTEMDRAW\u0000\nSYSTEMDRAW\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\r\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\aDrawing\fUpp::Drawing\fUpp::Drawing\aDrawing\u0003Upp\aDRAWING\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0004Draw\tUpp::Draw\tUpp::Draw\u0004Draw\u0003Upp\u0004DRAW\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\bPainting\rUpp::Painting\rUpp::Painting\bPainting\u0003Upp\bPAINTING\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\nSystemDraw\u000FUpp::SystemDraw\u000FUpp::SystemDraw\nSystemDraw\u0003Upp\nSYSTEMDRAW\u000FUpp::SystemDraw\u000FUPP::SYSTEMDRAW\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\tImageDraw\u000EUpp::ImageDraw\u000EUpp::ImageDraw\tImageDraw\u0003Upp\tIMAGEDRAW\u000EUpp::ImageDraw\u000EUPP::IMAGEDRAW\u0000\u0000\t\u0000\u0000\u0000\n\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0006FONT_V\tconst int\vUpp::FONT_V\u0010const int FONT_V\u0003Upp\u0006FONT_V\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0011FontGlyphConsumer\u0016Upp::FontGlyphConsumer\u0016Upp::FontGlyphConsumer\u0011FontGlyphConsumer\u0003Upp\u0011FONTGLYPHCONSUMER\u0016Upp::FontGlyphConsumer\u0016UPP::FONTGLYPHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000 \u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0001\u0000\u0004Move\rvoid (Pointf)$Upp::FontGlyphConsumer::Move(Pointf)\u0013void Move(Pointf p)\u0003Upp\u0004MOVE\u0016Upp::FontGlyphConsumer\u0016UPP::FONTGLYPHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000 \u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0001\u0000\u0004Line\rvoid (Pointf)$Upp::FontGlyphConsumer::Line(Pointf)\u0013void Line(Pointf p)\u0003Upp\u0004LINE\u0016Upp::FontGlyphConsumer\u0016UPP::FONTGLYPHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u00001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0001\u0000\tQuadratic\u0015void (Pointf, Pointf)0Upp::FontGlyphConsumer::Quadratic(Pointf,Pointf)$void Quadratic(Pointf p1, Pointf p2)\u0003Upp\tQUADRATIC\u0016Upp::FontGlyphConsumer\u0016UPP::FONTGLYPHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u00008\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0001\u0000\u0005Cubic\u001Dvoid (Pointf, Pointf, Pointf)3Upp::FontGlyphConsumer::Cubic(Pointf,Pointf,Pointf)+void Cubic(Pointf p1, Pointf p2, Pointf p3)\u0003Upp\u0005CUBIC\u0016Upp::FontGlyphConsumer\u0016UPP::FONTGLYPHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0001\u0000\u0005Close\avoid ()\u001FUpp::FontGlyphConsumer::Close()\fvoid Close()\u0003Upp\u0005CLOSE\u0016Upp::FontGlyphConsumer\u0016UPP::FONTGLYPHCONSUMER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u000E\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\bFontInfo\rUpp::FontInfo\rUpp::FontInfo\bFontInfo\u0003Upp\bFONTINFO\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0010PreferColorEmoji\nbool (int)\u001AUpp::PreferColorEmoji(int)\u001Cbool PreferColorEmoji(int c)\u0003Upp\u0010PREFERCOLOREMOJI\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u0004Font\tUpp::Font\tUpp::Font5Font : public ValueType<Font, FONT_V, Moveable<Font>>\u0003Upp\u0004FONT\tUpp::Font\tUPP::FONT\u000EUpp::ValueType\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0002\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000A(anonymous union at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:44:2)LUpp::Font::(anonymous union at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:44:2)@Upp::Font::(anonymous at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0000\u0003UppA(ANONYMOUS UNION AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:44:2)A(anonymous union at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:44:2)A(ANONYMOUS UNION AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:44:2)\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000,\u0000\u0000\u0000\u0002\u0000\u0000\u0000,\u0000\u0000\u0000\f\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0004data\u0005int64\u000FUpp::Font::data\nint64 data\u0003Upp\u0004DATA\tUpp::Font\tUPP::FONT\u0000\u0000\u0002\u0000\u0000\u0000\u0002\u0000\u0000\u0000-\u0000\u0000\u0000\u0002\u0000\u0000\u0000-\u0000\u0000\u0000\u0003\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000@(unnamed struct at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:46:3)KUpp::Font::(unnamed struct at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:46:3)>Upp::Font::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0000\u0003Upp@(UNNAMED STRUCT AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:46:3)@(unnamed struct at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:46:3)@(UNNAMED STRUCT AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:46:3)\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000.\u0000\u0000\u0000\u0003\u0000\u0000\u0000.\u0000\u0000\u0000\r\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0004face\u0004word\u000FUpp::Font::face\tword face\u0003Upp\u0004FACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000/\u0000\u0000\u0000\u0003\u0000\u0000\u0000/\u0000\u0000\u0000\u000E\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0005flags\u0004word\u0010Upp::Font::flags\nword flags\u0003Upp\u0005FLAGS\tUpp::Font\tUPP::FONT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u00000\u0000\u0000\u0000\u0003\u0000\u0000\u00000\u0000\u0000\u0000\u000F\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0006height\u0005int16\u0011Upp::Font::height\fint16 height\u0003Upp\u0006HEIGHT\tUpp::Font\tUPP::FONT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u00001\u0000\u0000\u0000\u0003\u0000\u0000\u00001\u0000\u0000\u0000\u000E\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0005width\u0005int16\u0010Upp::Font::width\vint16 width\u0003Upp\u0005WIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0006\u0000\u0000\u0000\u0004\u0000\u0000\u00002\u0000\u0000\u0000\u0002\u0000\u0000\u0000-\u0000\u0000\u0000\u0005\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u0001vGstruct (unnamed struct at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:46:3)\fUpp::Font::v\u0001v\u0003Upp\u0001V\tUpp::Font\tUPP::FONT\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0002\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000>(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2)IUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2)>Upp::Font::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp>(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:54:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u00006\u0000\u0000\u0000\u0002\u0000\u0000\u00006\u0000\u0000\u0000\u0014\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\tFONT_BOLDIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2)\u0014Upp::Font::FONT_BOLD\tFONT_BOLD\u0003Upp\tFONT_BOLD\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u00007\u0000\u0000\u0000\u0002\u0000\u0000\u00007\u0000\u0000\u0000\u0016\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\vFONT_ITALICIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2)\u0016Upp::Font::FONT_ITALIC\vFONT_ITALIC\u0003Upp\vFONT_ITALIC\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u00008\u0000\u0000\u0000\u0002\u0000\u0000\u00008\u0000\u0000\u0000\u0019\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u000EFONT_UNDERLINEIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2)\u0019Upp::Font::FONT_UNDERLINE\u000EFONT_UNDERLINE\u0003Upp\u000EFONT_UNDERLINE\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u00009\u0000\u0000\u0000\u0002\u0000\u0000\u00009\u0000\u0000\u0000\u0019\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u000EFONT_STRIKEOUTIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2)\u0019Upp::Font::FONT_STRIKEOUT\u000EFONT_STRIKEOUT\u0003Upp\u000EFONT_STRIKEOUT\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000:\u0000\u0000\u0000\u0002\u0000\u0000\u0000:\u0000\u0000\u0000\u001F\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0015FONT_NON_ANTI_ALIASEDIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2) Upp::Font::FONT_NON_ANTI_ALIASED\u0015FONT_NON_ANTI_ALIASED\u0003Upp\u0015FONT_NON_ANTI_ALIASED\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000;\u0000\u0000\u0000\u0002\u0000\u0000\u0000;\u0000\u0000\u0000\u001D\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0013FONT_TRUE_TYPE_ONLYIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:54:2)\u001EUpp::Font::FONT_TRUE_TYPE_ONLY\u0013FONT_TRUE_TYPE_ONLY\u0003Upp\u0013FONT_TRUE_TYPE_ONLY\tUpp::Font\tUPP::FONT\u0000\u0000\t\u0000\u0000\u0000\r\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0015\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0001\bAStdFont\u0004Font\u0013Upp::Font::AStdFont\u0014static Font AStdFont\u0003Upp\bASTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\t\u0000\u0000\u0000\r\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000\u0018\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0001\vStdFontSize\u0004Size\u0016Upp::Font::StdFontSize\u0017static Size StdFontSize\u0003Upp\vSTDFONTSIZE\tUpp::Font\tUPP::FONT\u0000\u0000\t\u0000\u0000\u0000\r\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u001E\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0011std_font_override\u0004bool\u001CUpp::Font::std_font_override\u001Dstatic bool std_font_override\u0003Upp\u0011STD_FONT_OVERRIDE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000#\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0001\vSetStdFont0\vvoid (Font)\u001CUpp::Font::SetStdFont0(Font)\"static void SetStdFont0(Font font)\u0003Upp\vSETSTDFONT0\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000$\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0001\bFaceList\u0014Vector<FaceInfo> &()\u0015Upp::Font::FaceList()#static Vector<FaceInfo>& FaceList()\u0003Upp\bFACELIST\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u001A\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0001\vSyncStdFont\avoid ()\u0018Upp::Font::SyncStdFont()\u0019static void SyncStdFont()\u0003Upp\vSYNCSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u001A\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0001\vInitStdFont\avoid ()\u0018Upp::Font::InitStdFont()\u0019static void InitStdFont()\u0003Upp\vINITSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000!\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0002Fi\u001Econst CommonFontInfo &() const\u0014Upp::Font::Fi()const const CommonFontInfo& Fi() const\u0003Upp\u0002FI\tUpp::Font\tUPP::FONT\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u001B\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\nsInitFonts\avoid ()\u0011Upp::sInitFonts()\u0011void sInitFonts()\u0003Upp\nSINITFONTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000Q\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u000EGetFontDataSys%String (Font, const char *, int, int)-Upp::GetFontDataSys(Font,const char*,int,int)IString GetFontDataSys(Font font, const char *table, int offset, int size)\u0003Upp\u000EGETFONTDATASYS\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0002\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000>(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)IUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)>Upp::Font::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp>(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:78:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000N\u0000\u0000\u0000\u0002\u0000\u0000\u0000N\u0000\u0000\u0000\u0016\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\nFIXEDPITCHIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)\u0015Upp::Font::FIXEDPITCH\nFIXEDPITCH\u0003Upp\nFIXEDPITCH\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000O\u0000\u0000\u0000\u0002\u0000\u0000\u0000O\u0000\u0000\u0000\u0016\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\tSCALEABLEIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)\u0014Upp::Font::SCALEABLE\tSCALEABLE\u0003Upp\tSCALEABLE\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000P\u0000\u0000\u0000\u0002\u0000\u0000\u0000P\u0000\u0000\u0000\u0016\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0003TTFIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)\u000EUpp::Font::TTF\u0003TTF\u0003Upp\u0003TTF\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000Q\u0000\u0000\u0000\u0002\u0000\u0000\u0000Q\u0000\u0000\u0000\u0016\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\aSPECIALIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)\u0012Upp::Font::SPECIAL\aSPECIAL\u0003Upp\aSPECIAL\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000R\u0000\u0000\u0000\u0002\u0000\u0000\u0000R\u0000\u0000\u0000\u0016\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\nSERIFSTYLEIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)\u0015Upp::Font::SERIFSTYLE\nSERIFSTYLE\u0003Upp\nSERIFSTYLE\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000S\u0000\u0000\u0000\u0002\u0000\u0000\u0000S\u0000\u0000\u0000\u0016\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\vSCRIPTSTYLEIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)\u0016Upp::Font::SCRIPTSTYLE\vSCRIPTSTYLE\u0003Upp\vSCRIPTSTYLE\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000T\u0000\u0000\u0000\u0002\u0000\u0000\u0000T\u0000\u0000\u0000\u0016\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\bCOLORIMGIUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:78:2)\u0013Upp::Font::COLORIMG\bCOLORIMG\u0003Upp\bCOLORIMG\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000\u001D\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0001\fGetFaceCount\u0006int ()\u0019Upp::Font::GetFaceCount()\u0019static int GetFaceCount()\u0003Upp\fGETFACECOUNT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000%\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0001\vGetFaceName\fString (int)\u001BUpp::Font::GetFaceName(int)$static String GetFaceName(int index)\u0003Upp\vGETFACENAME\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u00004\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0000\u0001\u0011FindFaceNameIndex\u0014int (const String &)+Upp::Font::FindFaceNameIndex(const String&)0static int FindFaceNameIndex(const String& name)\u0003Upp\u0011FINDFACENAMEINDEX\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000%\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0001\vGetFaceInfo\vdword (int)\u001BUpp::Font::GetFaceInfo(int)#static dword GetFaceInfo(int index)\u0003Upp\vGETFACEINFO\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000A\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0001\aSetFace!void (int, const String &, dword)+Upp::Font::SetFace(int,const String&,dword)>static void SetFace(int index, const String& name, dword info)\u0003Upp\aSETFACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u00005\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0001\aSetFace\u001Avoid (int, const String &)%Upp::Font::SetFace(int,const String&)2static void SetFace(int index, const String& name)\u0003Upp\aSETFACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000(\u0000\u0000\u0000^\u0000\u0000\u0000\u0000\u0000\u0001\u000ESetDefaultFont\vvoid (Font)\u001FUpp::Font::SetDefaultFont(Font)%static void SetDefaultFont(Font font)\u0003Upp\u000ESETDEFAULTFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000$\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0001\nSetStdFont\vvoid (Font)\u001BUpp::Font::SetStdFont(Font)!static void SetStdFont(Font font)\u0003Upp\nSETSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000\u001B\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0001\nGetStdFont\aFont ()\u0017Upp::Font::GetStdFont()\u0018static Font GetStdFont()\u0003Upp\nGETSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000\u001F\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0000\u0001\u000EGetStdFontSize\aSize ()\u001BUpp::Font::GetStdFontSize()\u001Cstatic Size GetStdFontSize()\u0003Upp\u000EGETSTDFONTSIZE\tUpp::Font\tUPP::FONT\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0002\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000?(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)JUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)>Upp::Font::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp?(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:100:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000d\u0000\u0000\u0000\u0002\u0000\u0000\u0000d\u0000\u0000\u0000\t\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\aSTDFONTJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0012Upp::Font::STDFONT\aSTDFONT\u0003Upp\aSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000e\u0000\u0000\u0000\u0002\u0000\u0000\u0000e\u0000\u0000\u0000\a\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0005SERIFJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0010Upp::Font::SERIF\u0005SERIF\u0003Upp\u0005SERIF\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000f\u0000\u0000\u0000\u0002\u0000\u0000\u0000f\u0000\u0000\u0000\v\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\tSANSSERIFJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0014Upp::Font::SANSSERIF\tSANSSERIF\u0003Upp\tSANSSERIF\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000g\u0000\u0000\u0000\u0002\u0000\u0000\u0000g\u0000\u0000\u0000\v\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\tMONOSPACEJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0014Upp::Font::MONOSPACE\tMONOSPACE\u0003Upp\tMONOSPACE\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000i\u0000\u0000\u0000\u0002\u0000\u0000\u0000i\u0000\u0000\u0000\b\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0006SYMBOLJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0011Upp::Font::SYMBOL\u0006SYMBOL\u0003Upp\u0006SYMBOL\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000j\u0000\u0000\u0000\u0002\u0000\u0000\u0000j\u0000\u0000\u0000\v\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\tWINGDINGSJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0014Upp::Font::WINGDINGS\tWINGDINGS\u0003Upp\tWINGDINGS\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000k\u0000\u0000\u0000\u0002\u0000\u0000\u0000k\u0000\u0000\u0000\b\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0006TAHOMAJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0011Upp::Font::TAHOMA\u0006TAHOMA\u0003Upp\u0006TAHOMA\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000m\u0000\u0000\u0000\u0002\u0000\u0000\u0000m\u0000\u0000\u0000\a\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0005OTHERJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0010Upp::Font::OTHER\u0005OTHER\u0003Upp\u0005OTHER\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000p\u0000\u0000\u0000\u0002\u0000\u0000\u0000p\u0000\u0000\u0000\u000F\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0005ROMANJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0010Upp::Font::ROMAN\u0005ROMAN\u0003Upp\u0005ROMAN\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000q\u0000\u0000\u0000\u0013\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0005ARIALJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0010Upp::Font::ARIAL\u0005ARIAL\u0003Upp\u0005ARIAL\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000r\u0000\u0000\u0000\u0002\u0000\u0000\u0000r\u0000\u0000\u0000\u0015\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\aCOURIERJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0012Upp::Font::COURIER\aCOURIER\u0003Upp\aCOURIER\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000s\u0000\u0000\u0000\u0002\u0000\u0000\u0000s\u0000\u0000\u0000\u0016\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\fSCREEN_SERIFJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0017Upp::Font::SCREEN_SERIF\fSCREEN_SERIF\u0003Upp\fSCREEN_SERIF\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000t\u0000\u0000\u0000\u0002\u0000\u0000\u0000t\u0000\u0000\u0000\u0019\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\vSCREEN_SANSJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0016Upp::Font::SCREEN_SANS\vSCREEN_SANS\u0003Upp\vSCREEN_SANS\tUpp::Font\tUPP::FONT\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000u\u0000\u0000\u0000\u0002\u0000\u0000\u0000u\u0000\u0000\u0000\u001A\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\fSCREEN_FIXEDJUpp::Font::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:100:2)\u0017Upp::Font::SCREEN_FIXED\fSCREEN_FIXED\u0003Upp\fSCREEN_FIXED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0000\u0000\u00003\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\aGetFace\fint () const\u0019Upp::Font::GetFace()const\u0013int GetFace() const\u0003Upp\aGETFACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000\u0019\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\tGetHeight\fint () const\u001BUpp::Font::GetHeight()const\u0015int GetHeight() const\u0003Upp\tGETHEIGHT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u00004\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\bGetWidth\fint () const\u001AUpp::Font::GetWidth()const\u0014int GetWidth() const\u0003Upp\bGETWIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000@\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0006IsBold\rbool () const\u0018Upp::Font::IsBold()const\u0013bool IsBold() const\u0003Upp\u0006ISBOLD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u0000B\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\bIsItalic\rbool () const\u001AUpp::Font::IsItalic()const\u0015bool IsItalic() const\u0003Upp\bISITALIC\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000}\u0000\u0000\u0000E\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\vIsUnderline\rbool () const\u001DUpp::Font::IsUnderline()const\u0018bool IsUnderline() const\u0003Upp\vISUNDERLINE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000E\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\vIsStrikeout\rbool () const\u001DUpp::Font::IsStrikeout()const\u0018bool IsStrikeout() const\u0003Upp\vISSTRIKEOUT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000L\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0010IsNonAntiAliased\rbool () const\"Upp::Font::IsNonAntiAliased()const\u001Dbool IsNonAntiAliased() const\u0003Upp\u0010ISNONANTIALIASED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000EIsTrueTypeOnly\rbool () const Upp::Font::IsTrueTypeOnly()const\u001Bbool IsTrueTypeOnly() const\u0003Upp\u000EISTRUETYPEONLY\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vGetFaceName\u000FString () const\u001DUpp::Font::GetFaceName()const\u001AString GetFaceName() const\u0003Upp\vGETFACENAME\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000EGetFaceNameStd\u000FString () const Upp::Font::GetFaceNameStd()const\u001DString GetFaceNameStd() const\u0003Upp\u000EGETFACENAMESTD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vGetFaceInfo\u000Edword () const\u001DUpp::Font::GetFaceInfo()const\u0019dword GetFaceInfo() const\u0003Upp\vGETFACEINFO\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aAsInt64\u000Eint64 () const\u0019Upp::Font::AsInt64()const\u0015int64 AsInt64() const\u0003Upp\aASINT64\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nRealizeStd\avoid ()\u0017Upp::Font::RealizeStd()\u0011void RealizeStd()\u0003Upp\nREALIZESTD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Face\vFont &(int)\u0014Upp::Font::Face(int)\u0011Font& Face(int n)\u0003Upp\u0004FACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Height\vFont &(int)\u0016Upp::Font::Height(int)\u0013Font& Height(int n)\u0003Upp\u0006HEIGHT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005Width\vFont &(int)\u0015Upp::Font::Width(int)\u0012Font& Width(int n)\u0003Upp\u0005WIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Bold\bFont &()\u0011Upp::Font::Bold()\fFont& Bold()\u0003Upp\u0004BOLD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006NoBold\bFont &()\u0013Upp::Font::NoBold()\u000EFont& NoBold()\u0003Upp\u0006NOBOLD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Bold\fFont &(bool)\u0015Upp::Font::Bold(bool)\u0012Font& Bold(bool b)\u0003Upp\u0004BOLD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Italic\bFont &()\u0013Upp::Font::Italic()\u000EFont& Italic()\u0003Upp\u0006ITALIC\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bNoItalic\bFont &()\u0015Upp::Font::NoItalic()\u0010Font& NoItalic()\u0003Upp\bNOITALIC\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Italic\fFont &(bool)\u0017Upp::Font::Italic(bool)\u0014Font& Italic(bool b)\u0003Upp\u0006ITALIC\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tUnderline\bFont &()\u0016Upp::Font::Underline()\u0011Font& Underline()\u0003Upp\tUNDERLINE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vNoUnderline\bFont &()\u0018Upp::Font::NoUnderline()\u0013Font& NoUnderline()\u0003Upp\vNOUNDERLINE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tUnderline\fFont &(bool)\u001AUpp::Font::Underline(bool)\u0017Font& Underline(bool b)\u0003Upp\tUNDERLINE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tStrikeout\bFont &()\u0016Upp::Font::Strikeout()\u0011Font& Strikeout()\u0003Upp\tSTRIKEOUT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vNoStrikeout\bFont &()\u0018Upp::Font::NoStrikeout()\u0013Font& NoStrikeout()\u0003Upp\vNOSTRIKEOUT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tStrikeout\fFont &(bool)\u001AUpp::Font::Strikeout(bool)\u0017Font& Strikeout(bool b)\u0003Upp\tSTRIKEOUT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000ENonAntiAliased\bFont &()\u001BUpp::Font::NonAntiAliased()\u0016Font& NonAntiAliased()\u0003Upp\u000ENONANTIALIASED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010NoNonAntiAliased\bFont &()\u001DUpp::Font::NoNonAntiAliased()\u0018Font& NoNonAntiAliased()\u0003Upp\u0010NONONANTIALIASED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000ENonAntiAliased\fFont &(bool)\u001FUpp::Font::NonAntiAliased(bool)\u001CFont& NonAntiAliased(bool b)\u0003Upp\u000ENONANTIALIASED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fTrueTypeOnly\bFont &()\u0019Upp::Font::TrueTypeOnly()\u0014Font& TrueTypeOnly()\u0003Upp\fTRUETYPEONLY\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000ENoTrueTypeOnly\bFont &()\u001BUpp::Font::NoTrueTypeOnly()\u0016Font& NoTrueTypeOnly()\u0003Upp\u000ENOTRUETYPEONLY\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fTrueTypeOnly\fFont &(bool)\u001DUpp::Font::TrueTypeOnly(bool)\u001AFont& TrueTypeOnly(bool b)\u0003Upp\fTRUETYPEONLY\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bFaceName\u0016Font &(const String &)\"Upp::Font::FaceName(const String&)\"Font& FaceName(const String& name)\u0003Upp\bFACENAME\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u00002\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\noperator()\rFont () const\u001CUpp::Font::operator()()const\u0017Font operator()() const\u0003Upp\nOPERATOR()\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¡\u0000\u0000\u0000B\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\noperator()\u0010Font (int) const\u001FUpp::Font::operator()(int)const\u001CFont operator()(int n) const\u0003Upp\nOPERATOR()\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0000£\u0000\u0000\u0000A\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\tGetAscent\fint () const\u001BUpp::Font::GetAscent()const\u0015int GetAscent() const\u0003Upp\tGETASCENT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000B\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\nGetDescent\fint () const\u001CUpp::Font::GetDescent()const\u0016int GetDescent() const\u0003Upp\nGETDESCENT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\u0000¥\u0000\u0000\u0000P\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\u0005GetCy\fint () const\u0017Upp::Font::GetCy()const\u0011int GetCy() const\u0003Upp\u0005GETCY\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000¦\u0000\u0000\u0000C\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\vGetExternal\fint () const\u001DUpp::Font::GetExternal()const\u0017int GetExternal() const\u0003Upp\vGETEXTERNAL\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0000§\u0000\u0000\u0000C\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\vGetInternal\fint () const\u001DUpp::Font::GetInternal()const\u0017int GetInternal() const\u0003Upp\vGETINTERNAL\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\u0000¨\u0000\u0000\u0000M\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\rGetLineHeight\fint () const\u001FUpp::Font::GetLineHeight()const\u0019int GetLineHeight() const\u0003Upp\rGETLINEHEIGHT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\u0000©\u0000\u0000\u0000C\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\vGetOverhang\fint () const\u001DUpp::Font::GetOverhang()const\u0017int GetOverhang() const\u0003Upp\vGETOVERHANG\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000C\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\vGetAveWidth\fint () const\u001DUpp::Font::GetAveWidth()const\u0017int GetAveWidth() const\u0003Upp\vGETAVEWIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\u0000«\u0000\u0000\u0000C\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\vGetMaxWidth\fint () const\u001DUpp::Font::GetMaxWidth()const\u0017int GetMaxWidth() const\u0003Upp\vGETMAXWIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\u0000¬\u0000\u0000\u0000W\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\fGetMonoWidth\fint () const\u001EUpp::Font::GetMonoWidth()const\u0018int GetMonoWidth() const\u0003Upp\fGETMONOWIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\u0000­\u0000\u0000\u0000\u001D\u0000\u0000\u0000­\u0000\u0000\u0000\u0000\u0000\u0000\bIsNormal\u0010bool (int) const\u001DUpp::Font::IsNormal(int)const\u001Bbool IsNormal(int ch) const\u0003Upp\bISNORMAL\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000®\u0000\u0000\u0000\u0001\u0000\u0000\u0000®\u0000\u0000\u0000\u001F\u0000\u0000\u0000®\u0000\u0000\u0000\u0000\u0000\u0000\nIsComposed\u0010bool (int) const\u001FUpp::Font::IsComposed(int)const\u001Dbool IsComposed(int ch) const\u0003Upp\nISCOMPOSED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\u001F\u0000\u0000\u0000¯\u0000\u0000\u0000\u0000\u0000\u0000\nIsReplaced\u0010bool (int) const\u001FUpp::Font::IsReplaced(int)const\u001Dbool IsReplaced(int ch) const\u0003Upp\nISREPLACED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\u0000°\u0000\u0000\u0000\u001E\u0000\u0000\u0000°\u0000\u0000\u0000\u0000\u0000\u0000\tIsMissing\u0010bool (int) const\u001EUpp::Font::IsMissing(int)const\u001Cbool IsMissing(int ch) const\u0003Upp\tISMISSING\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000±\u0000\u0000\u0000\u001C\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\aHasChar\u000Fint (int) const\u001CUpp::Font::HasChar(int)const\u0019int HasChar(int ch) const\u0003Upp\aHASCHAR\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0000²\u0000\u0000\u0000\u001C\u0000\u0000\u0000²\u0000\u0000\u0000\u0000\u0000\u0000\bGetWidth\u000Fint (int) const\u001DUpp::Font::GetWidth(int)const\u0019int GetWidth(int c) const\u0003Upp\bGETWIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000A\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\noperator[]\u000Fint (int) const\u001FUpp::Font::operator[](int)const\u001Bint operator[](int c) const\u0003Upp\nOPERATOR[]\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\u0000´\u0000\u0000\u0000 \u0000\u0000\u0000´\u0000\u0000\u0000\u0000\u0000\u0000\fGetLeftSpace\u000Fint (int) const!Upp::Font::GetLeftSpace(int)const\u001Dint GetLeftSpace(int c) const\u0003Upp\fGETLEFTSPACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000!\u0000\u0000\u0000µ\u0000\u0000\u0000\u0000\u0000\u0000\rGetRightSpace\u000Fint (int) const\"Upp::Font::GetRightSpace(int)const\u001Eint GetRightSpace(int c) const\u0003Upp\rGETRIGHTSPACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\u0000¶\u0000\u0000\u0000E\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\fIsFixedPitch\rbool () const\u001EUpp::Font::IsFixedPitch()const\u0019bool IsFixedPitch() const\u0003Upp\fISFIXEDPITCH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\u0000·\u0000\u0000\u0000D\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\vIsScaleable\rbool () const\u001DUpp::Font::IsScaleable()const\u0018bool IsScaleable() const\u0003Upp\vISSCALEABLE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\u0000¸\u0000\u0000\u0000M\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\tIsSpecial\rbool () const\u001BUpp::Font::IsSpecial()const\u0016bool IsSpecial() const\u0003Upp\tISSPECIAL\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000>\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\nIsTrueType\rbool () const\u001CUpp::Font::IsTrueType()const\u0017bool IsTrueType() const\u0003Upp\nISTRUETYPE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000P\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\aIsSerif\rbool () const\u0019Upp::Font::IsSerif()const\u0014bool IsSerif() const\u0003Upp\aISSERIF\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000»\u0000\u0000\u0000Q\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\bIsScript\rbool () const\u001AUpp::Font::IsScript()const\u0015bool IsScript() const\u0003Upp\bISSCRIPT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0000\u0000\u0000½\u0000\u0000\u0000\u001C\u0000\u0000\u0000½\u0000\u0000\u0000\u0000\u0000\u0000\fGetTextFlags\u000FString () const\u001EUpp::Font::GetTextFlags()const\u001BString GetTextFlags() const\u0003Upp\fGETTEXTFLAGS\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0000\u0000\u0000%\u0000\u0000\u0000¾\u0000\u0000\u0000\u0000\u0000\u0000\u000EParseTextFlags\u0013void (const char *)&Upp::Font::ParseTextFlags(const char*)\"void ParseTextFlags(const char *s)\u0003Upp\u000EPARSETEXTFLAGS\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u0000S\u0000\u0000\u0000À\u0000\u0000\u0000\u0000\u0000\u0000\aGetData%String (const char *, int, int) const,Upp::Font::GetData(const char*,int,int)constRString GetData(const char *table = 0, int offset = 0, int size = 2147483647) const\u0003Upp\aGETDATA\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000G\u0000\u0000\u0000Â\u0000\u0000\u0000\u0000\u0000\u0000\u0006Render5void (FontGlyphConsumer &, double, double, int) const<Upp::Font::Render(FontGlyphConsumer&,double,double,int)constDvoid Render(FontGlyphConsumer& sw, double x, double y, int ch) const\u0003Upp\u0006RENDER\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u001B\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0000\u0000\u0000\tSerialize\u000Fvoid (Stream &)\u001DUpp::Font::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000\u001B\u0000\u0000\u0000Å\u0000\u0000\u0000\u0000\u0000\u0000\aJsonize\u000Fvoid (JsonIO &)\u001BUpp::Font::Jsonize(JsonIO&)\u0019void Jsonize(JsonIO& jio)\u0003Upp\aJSONIZE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0019\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0000\u0000\u0000\u0006Xmlize\u000Evoid (XmlIO &)\u0019Upp::Font::Xmlize(XmlIO&)\u0017void Xmlize(XmlIO& xio)\u0003Upp\u0006XMLIZE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000Z\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\noperator==\u0011bool (Font) const Upp::Font::operator==(Font)const\rbool operator\u0003Upp\nOPERATOR==\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0000\u0000\u0000;\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\noperator!=\u0011bool (Font) const Upp::Font::operator!=(Font)const\u000Ebool operator!\u0003Upp\nOPERATOR!=\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ì\u0000\u0000\u0000\\\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\fGetHashValue\u000Fhash_t () const\u001EUpp::Font::GetHashValue()const\u001Bhash_t GetHashValue() const\u0003Upp\fGETHASHVALUE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000=\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u000EIsNullInstance\rbool () const Upp::Font::IsNullInstance()const\u001Bbool IsNullInstance() const\u0003Upp\u000EISNULLINSTANCE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\u0000Î\u0000\u0000\u0000Z\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\aSetNull\avoid ()\u0014Upp::Font::SetNull()\u000Evoid SetNull()\u0003Upp\aSETNULL\tUpp::Font\tUPP::FONT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000R\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0004Font\avoid ()\u0011Upp::Font::Font()\u0006Font()\u0003Upp\u0004FONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0000\u0000\u0000`\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0004Font\u000Fvoid (int, int)\u0018Upp::Font::Font(int,int)\u001AFont(int face, int height)\u0003Upp\u0004FONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ñ\u0000\u0000\u0000/\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0004Font\u0015void (const Nuller &)\u001EUpp::Font::Font(const Nuller&)\u0013Font(const Nuller&)\u0003Upp\u0004FONT\tUpp::Font\tUPP::FONT\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000?\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u000Eoperator Value\u000EValue () const Upp::Font::operator Value()const\u0016operator Value() const\u0003Upp\u000EOPERATOR VALUE\tUpp::Font\tUPP::FONT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ô\u0000\u0000\u0000;\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0001\u0000\u0000\u0004Font\u0014void (const Value &)\u001DUpp::Font::Font(const Value&)\u0014Font(const Value& q)\u0003Upp\u0004FONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ö\u0000\u0000\u0000H\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0001\tFromInt64\fFont (int64)\u001BUpp::Font::FromInt64(int64)\u001Estatic Font FromInt64(int64 q)\u0003Upp\tFROMINT64\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0016\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0000\u0000\u0000\u0004Info\u0011FontInfo () const\u0016Upp::Font::Info()const\u0015FontInfo Info() const\u0003Upp\u0004INFO\tUpp::Font\tUPP::FONT\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ô\u0000\u0000\u0000\u0001\u0000\u0000\bFontInfo\rUpp::FontInfo\rUpp::FontInfo\bFontInfo\u0003Upp\bFONTINFO\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000\n\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0013Upp::FontInfo::font\tFont font\u0003Upp\u0004FONT\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\u0000â\u0000\u0000\u0000G\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\tGetAscent\fint () const\u001FUpp::FontInfo::GetAscent()const\u0015int GetAscent() const\u0003Upp\tGETASCENT\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u0000H\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\nGetDescent\fint () const Upp::FontInfo::GetDescent()const\u0016int GetDescent() const\u0003Upp\nGETDESCENT\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000ä\u0000\u0000\u0000I\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\vGetExternal\fint () const!Upp::FontInfo::GetExternal()const\u0017int GetExternal() const\u0003Upp\vGETEXTERNAL\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000I\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\vGetInternal\fint () const!Upp::FontInfo::GetInternal()const\u0017int GetInternal() const\u0003Upp\vGETINTERNAL\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000æ\u0000\u0000\u0000C\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\tGetHeight\fint () const\u001FUpp::FontInfo::GetHeight()const\u0015int GetHeight() const\u0003Upp\tGETHEIGHT\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ç\u0000\u0000\u0000K\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\rGetLineHeight\fint () const#Upp::FontInfo::GetLineHeight()const\u0019int GetLineHeight() const\u0003Upp\rGETLINEHEIGHT\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0000\u0000\u0000I\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\vGetOverhang\fint () const!Upp::FontInfo::GetOverhang()const\u0017int GetOverhang() const\u0003Upp\vGETOVERHANG\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0000\u0000\u0000I\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\vGetAveWidth\fint () const!Upp::FontInfo::GetAveWidth()const\u0017int GetAveWidth() const\u0003Upp\vGETAVEWIDTH\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000ê\u0000\u0000\u0000I\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\vGetMaxWidth\fint () const!Upp::FontInfo::GetMaxWidth()const\u0017int GetMaxWidth() const\u0003Upp\vGETMAXWIDTH\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ë\u0000\u0000\u0000F\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\aHasChar\u000Fint (int) const Upp::FontInfo::HasChar(int)const\u0018int HasChar(int c) const\u0003Upp\aHASCHAR\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000ì\u0000\u0000\u0000G\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\bGetWidth\u000Fint (int) const!Upp::FontInfo::GetWidth(int)const\u0019int GetWidth(int c) const\u0003Upp\bGETWIDTH\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\u0000í\u0000\u0000\u0000B\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\noperator[]\u000Fint (int) const#Upp::FontInfo::operator[](int)const\u001Bint operator[](int c) const\u0003Upp\nOPERATOR[]\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\u0000î\u0000\u0000\u0000K\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\fGetLeftSpace\u000Fint (int) const%Upp::FontInfo::GetLeftSpace(int)const\u001Dint GetLeftSpace(int c) const\u0003Upp\fGETLEFTSPACE\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000ï\u0000\u0000\u0000L\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0000\u0000\rGetRightSpace\u000Fint (int) const&Upp::FontInfo::GetRightSpace(int)const\u001Eint GetRightSpace(int c) const\u0003Upp\rGETRIGHTSPACE\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000J\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\fIsFixedPitch\rbool () const\"Upp::FontInfo::IsFixedPitch()const\u0019bool IsFixedPitch() const\u0003Upp\fISFIXEDPITCH\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ñ\u0000\u0000\u0000I\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\vIsScaleable\rbool () const!Upp::FontInfo::IsScaleable()const\u0018bool IsScaleable() const\u0003Upp\vISSCALEABLE\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000ò\u0000\u0000\u0000G\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\rGetFontHeight\fint () const#Upp::FontInfo::GetFontHeight()const\u0019int GetFontHeight() const\u0003Upp\rGETFONTHEIGHT\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000ó\u0000\u0000\u0000;\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\aGetFont\rFont () const\u001DUpp::FontInfo::GetFont()const\u0014Font GetFont() const\u0003Upp\aGETFONT\rUpp::FontInfo\rUPP::FONTINFO\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000ö\u0000\u0000\u0000\u0000\u0000\u0000\u0000ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\rComposedGlyph\u0012Upp::ComposedGlyph\u0012Upp::ComposedGlyph\rComposedGlyph\u0003Upp\rCOMPOSEDGLYPH\u0012Upp::ComposedGlyph\u0012UPP::COMPOSEDGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\u0000÷\u0000\u0000\u0000\u0012\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\nbasic_char\u0005wchar\u001EUpp::ComposedGlyph::basic_char\u0010wchar basic_char\u0003Upp\nBASIC_CHAR\u0012Upp::ComposedGlyph\u0012UPP::COMPOSEDGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000ø\u0000\u0000\u0000\u0010\u0000\u0000\u0000ø\u0000\u0000\u0000\u0001\u0000\u0000\bmark_pos\u0005Point\u001CUpp::ComposedGlyph::mark_pos\u000EPoint mark_pos\u0003Upp\bMARK_POS\u0012Upp::ComposedGlyph\u0012UPP::COMPOSEDGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000ù\u0000\u0000\u0000\u0011\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\tmark_char\u0005wchar\u001DUpp::ComposedGlyph::mark_char\u000Fwchar mark_char\u0003Upp\tMARK_CHAR\u0012Upp::ComposedGlyph\u0012UPP::COMPOSEDGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0000\u0000\u0000ú\u0000\u0000\u0000\u0011\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0000\u0000\tmark_font\u0004Font\u001DUpp::ComposedGlyph::mark_font\u000EFont mark_font\u0003Upp\tMARK_FONT\u0012Upp::ComposedGlyph\u0012UPP::COMPOSEDGLYPH\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000ý\u0000\u0000\u00002\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\aCompose!bool (Font, int, ComposedGlyph &)%Upp::Compose(Font,int,ComposedGlyph&)2bool Compose(Font fnt, int chr, ComposedGlyph& cs)\u0003Upp\aCOMPOSE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\bAsString\u0015String (const Font &)\u001AUpp::AsString(const Font&)5template<> String AsString<class Font>(const Font& f)\u0003Upp\bASSTRING\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0001\u0000\u0000O\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\nSetStdFont\vvoid (Font)\u0015Upp::SetStdFont(Font)\u001Avoid SetStdFont(Font font)\u0003Upp\nSETSTDFONT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000R\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\nGetStdFont\aFont ()\u0011Upp::GetStdFont()\u0011Font GetStdFont()\u0003Upp\nGETSTDFONT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0001\u0000\u0000V\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u000EGetStdFontSize\aSize ()\u0015Upp::GetStdFontSize()\u0015Size GetStdFontSize()\u0003Upp\u000EGETSTDFONTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000S\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\fGetStdFontCy\u0006int ()\u0013Upp::GetStdFontCy()\u0012int GetStdFontCy()\u0003Upp\fGETSTDFONTCY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\a\u0001\u0000\u0000\u0000\u0000\u0000\u0000\a\u0001\u0000\u0000\u000E\u0000\u0000\u0000\a\u0001\u0000\u0000\u0000\u0000\u0000\aStdFont\aFont ()\u000EUpp::StdFont()\u000EFont StdFont()\u0003Upp\aSTDFONT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000S\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\aStdFont\nFont (int)\u0011Upp::StdFont(int)\u0013Font StdFont(int h)\u0003Upp\aSTDFONT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\v\u0001\u0000\u0000\u0000\u0000\u0000\u0000\v\u0001\u0000\u0000I\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0005Serif\nFont (int)\u000FUpp::Serif(int)\u001AFont Serif(int n = -32000)\u0003Upp\u0005SERIF\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0001\u0000\u0000\u0000\u0000\u0000\u0000\f\u0001\u0000\u0000L\u0000\u0000\u0000\f\u0001\u0000\u0000\u0001\u0000\u0000\tSansSerif\nFont (int)\u0013Upp::SansSerif(int)\u001EFont SansSerif(int n = -32000)\u0003Upp\tSANSSERIF\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000M\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\tMonospace\nFont (int)\u0013Upp::Monospace(int)\u001EFont Monospace(int n = -32000)\u0003Upp\tMONOSPACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0001\u0000\u0000I\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0005Roman\nFont (int)\u000FUpp::Roman(int)\u001AFont Roman(int n = -32000)\u0003Upp\u0005ROMAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0001\u0000\u0000H\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\u0005Arial\nFont (int)\u000FUpp::Arial(int)\u001AFont Arial(int n = -32000)\u0003Upp\u0005ARIAL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000K\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0001\u0000\u0000\aCourier\nFont (int)\u0011Upp::Courier(int)\u001CFont Courier(int n = -32000)\u0003Upp\aCOURIER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000O\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0001\u0000\u0000\vScreenSerif\nFont (int)\u0015Upp::ScreenSerif(int) Font ScreenSerif(int n = -32000)\u0003Upp\vSCREENSERIF\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0001\u0000\u0000M\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0000\u0000\nScreenSans\nFont (int)\u0014Upp::ScreenSans(int)\u001FFont ScreenSans(int n = -32000)\u0003Upp\nSCREENSANS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000O\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\vScreenFixed\nFont (int)\u0015Upp::ScreenFixed(int) Font ScreenFixed(int n = -32000)\u0003Upp\vSCREENFIXED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0001\u0000\u0000D\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0001\u0000\u0000\u0006Tahoma\nFont (int)\u0010Upp::Tahoma(int)\u001BFont Tahoma(int n = -32000)\u0003Upp\u0006TAHOMA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0001\u0000\u0000:\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0000\u0000\u0000\vGetTextSize\u001FSize (const wchar *, Font, int)'Upp::GetTextSize(const wchar*,Font,int):Size GetTextSize(const wchar *text, Font font, int n = -1)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0001\u0000\u00000\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0000\u0000\u0000\vGetTextSize\u001CSize (const WString &, Font)%Upp::GetTextSize(const WString&,Font)0Size GetTextSize(const WString& text, Font font)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0001\u0000\u0000G\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0000\u0000\u0000\vGetTextSize$Size (const char *, byte, Font, int)+Upp::GetTextSize(const char*,byte,Font,int)GSize GetTextSize(const char *text, byte charset, Font font, int n = -1)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0001\u0000\u00009\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0000\u0000\u0000\vGetTextSize\u001ESize (const char *, Font, int)&Upp::GetTextSize(const char*,Font,int)9Size GetTextSize(const char *text, Font font, int n = -1)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0001\u0000\u0000/\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0000\u0000\u0000\vGetTextSize\u001BSize (const String &, Font)$Upp::GetTextSize(const String&,Font)/Size GetTextSize(const String& text, Font font)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000?(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)8Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp?(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:290:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000\"\u0001\u0000\u0000\u000E\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\bPEN_NULLDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)\rUpp::PEN_NULL\bPEN_NULL\u0003Upp\bPEN_NULL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0000#\u0001\u0000\u0000\u000F\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\tPEN_SOLIDDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)\u000EUpp::PEN_SOLID\tPEN_SOLID\u0003Upp\tPEN_SOLID\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\u0000$\u0001\u0000\u0000\u000E\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\bPEN_DASHDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)\rUpp::PEN_DASH\bPEN_DASH\u0003Upp\bPEN_DASH\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000\r\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\aPEN_DOTDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)\fUpp::PEN_DOT\aPEN_DOT\u0003Upp\aPEN_DOT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000\u0011\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\vPEN_DASHDOTDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)\u0010Upp::PEN_DASHDOT\vPEN_DASHDOT\u0003Upp\vPEN_DASHDOT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u0000\u0014\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u000EPEN_DASHDOTDOTDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:290:1)\u0013Upp::PEN_DASHDOTDOT\u000EPEN_DASHDOTDOT\u0003Upp\u000EPEN_DASHDOTDOT\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0001\u0000\u0000\v\u0000\u0000\u0000,\u0001\u0000\u0000\u0000\u0000\u0000\u0005Image\nUpp::Image\nUpp::Image\u0005Image\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000.\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0001\u0000\u0000\u000E\u0000\u0000\u0000.\u0001\u0000\u0000\u0000\u0000\u0000\u0006SBlack\bColor ()\rUpp::SBlack()\u000EColor SBlack()\u0003Upp\u0006SBLACK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\r\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0005SGray\bColor ()\fUpp::SGray()\rColor SGray()\u0003Upp\u0005SGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00000\u0001\u0000\u0000\u0000\u0000\u0000\u00000\u0001\u0000\u0000\u000F\u0000\u0000\u00000\u0001\u0000\u0000\u0000\u0000\u0000\aSLtGray\bColor ()\u000EUpp::SLtGray()\u000FColor SLtGray()\u0003Upp\aSLTGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0012\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000\u0000\nSWhiteGray\bColor ()\u0011Upp::SWhiteGray()\u0012Color SWhiteGray()\u0003Upp\nSWHITEGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0001\u0000\u0000\u000E\u0000\u0000\u00002\u0001\u0000\u0000\u0000\u0000\u0000\u0006SWhite\bColor ()\rUpp::SWhite()\u000EColor SWhite()\u0003Upp\u0006SWHITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u0000\u0000\u00003\u0001\u0000\u0000\f\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u0000\u0000\u0004SRed\bColor ()\vUpp::SRed()\fColor SRed()\u0003Upp\u0004SRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u000E\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u0006SGreen\bColor ()\rUpp::SGreen()\u000EColor SGreen()\u0003Upp\u0006SGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u000E\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000\u0000\u0006SBrown\bColor ()\rUpp::SBrown()\u000EColor SBrown()\u0003Upp\u0006SBROWN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00006\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0001\u0000\u0000\r\u0000\u0000\u00006\u0001\u0000\u0000\u0000\u0000\u0000\u0005SBlue\bColor ()\fUpp::SBlue()\rColor SBlue()\u0003Upp\u0005SBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00007\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0010\u0000\u0000\u00007\u0001\u0000\u0000\u0000\u0000\u0000\bSMagenta\bColor ()\u000FUpp::SMagenta()\u0010Color SMagenta()\u0003Upp\bSMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00008\u0001\u0000\u0000\u0000\u0000\u0000\u00008\u0001\u0000\u0000\r\u0000\u0000\u00008\u0001\u0000\u0000\u0000\u0000\u0000\u0005SCyan\bColor ()\fUpp::SCyan()\rColor SCyan()\u0003Upp\u0005SCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0001\u0000\u0000\u000F\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000\u0000\aSYellow\bColor ()\u000EUpp::SYellow()\u000FColor SYellow()\u0003Upp\aSYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000:\u0001\u0000\u0000\u0000\u0000\u0000\u0000:\u0001\u0000\u0000\u000E\u0000\u0000\u0000:\u0001\u0000\u0000\u0000\u0000\u0000\u0006SLtRed\bColor ()\rUpp::SLtRed()\u000EColor SLtRed()\u0003Upp\u0006SLTRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0010\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000\u0000\bSLtGreen\bColor ()\u000FUpp::SLtGreen()\u0010Color SLtGreen()\u0003Upp\bSLTGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000<\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0001\u0000\u0000\u0011\u0000\u0000\u0000<\u0001\u0000\u0000\u0000\u0000\u0000\tSLtYellow\bColor ()\u0010Upp::SLtYellow()\u0011Color SLtYellow()\u0003Upp\tSLTYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000\u0000\u0000=\u0001\u0000\u0000\u000F\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000\u0000\aSLtBlue\bColor ()\u000EUpp::SLtBlue()\u000FColor SLtBlue()\u0003Upp\aSLTBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000>\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0001\u0000\u0000\u0012\u0000\u0000\u0000>\u0001\u0000\u0000\u0000\u0000\u0000\nSLtMagenta\bColor ()\u0011Upp::SLtMagenta()\u0012Color SLtMagenta()\u0003Upp\nSLTMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u000F\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000\u0000\aSLtCyan\bColor ()\u000EUpp::SLtCyan()\u000FColor SLtCyan()\u0003Upp\aSLTCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0000\u0000\u0000A\u0001\u0000\u0000\u0013\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0000\u0000\vSColorPaper\bColor ()\u0012Upp::SColorPaper()\u0013Color SColorPaper()\u0003Upp\vSCOLORPAPER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000B\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0001\u0000\u0000\u0012\u0000\u0000\u0000B\u0001\u0000\u0000\u0000\u0000\u0000\nSColorText\bColor ()\u0011Upp::SColorText()\u0012Color SColorText()\u0003Upp\nSCOLORTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000\u0000\u0000C\u0001\u0000\u0000\u0012\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000\u0000\nSColorFace\bColor ()\u0011Upp::SColorFace()\u0012Color SColorFace()\u0003Upp\nSCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000D\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0001\u0000\u0000\u0017\u0000\u0000\u0000D\u0001\u0000\u0000\u0000\u0000\u0000\u000FSColorHighlight\bColor ()\u0016Upp::SColorHighlight()\u0017Color SColorHighlight()\u0003Upp\u000FSCOLORHIGHLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0001\u0000\u0000\u001B\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\u0013SColorHighlightText\bColor ()\u001AUpp::SColorHighlightText()\u001BColor SColorHighlightText()\u0003Upp\u0013SCOLORHIGHLIGHTTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000\u0012\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\nSColorMenu\bColor ()\u0011Upp::SColorMenu()\u0012Color SColorMenu()\u0003Upp\nSCOLORMENU\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0016\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000\u0000\u000ESColorMenuText\bColor ()\u0015Upp::SColorMenuText()\u0016Color SColorMenuText()\u0003Upp\u000ESCOLORMENUTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000H\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0001\u0000\u0000\u0012\u0000\u0000\u0000H\u0001\u0000\u0000\u0000\u0000\u0000\nSColorInfo\bColor ()\u0011Upp::SColorInfo()\u0012Color SColorInfo()\u0003Upp\nSCOLORINFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000I\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0001\u0000\u0000\u0016\u0000\u0000\u0000I\u0001\u0000\u0000\u0000\u0000\u0000\u000ESColorInfoText\bColor ()\u0015Upp::SColorInfoText()\u0016Color SColorInfoText()\u0003Upp\u000ESCOLORINFOTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0001\u0000\u0000\u0012\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\nSColorMark\bColor ()\u0011Upp::SColorMark()\u0012Color SColorMark()\u0003Upp\nSCOLORMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0001\u0000\u0000\u0016\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000\u0000\u000ESColorMenuMark\bColor ()\u0015Upp::SColorMenuMark()\u0016Color SColorMenuMark()\u0003Upp\u000ESCOLORMENUMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000L\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0001\u0000\u0000\u0016\u0000\u0000\u0000L\u0001\u0000\u0000\u0000\u0000\u0000\u000ESColorDisabled\bColor ()\u0015Upp::SColorDisabled()\u0016Color SColorDisabled()\u0003Upp\u000ESCOLORDISABLED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0013\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000\u0000\vSColorLight\bColor ()\u0012Upp::SColorLight()\u0013Color SColorLight()\u0003Upp\vSCOLORLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0001\u0000\u0000\u0013\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000\vSColorLabel\bColor ()\u0012Upp::SColorLabel()\u0013Color SColorLabel()\u0003Upp\vSCOLORLABEL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000O\u0001\u0000\u0000\u0000\u0000\u0000\u0000O\u0001\u0000\u0000\u0014\u0000\u0000\u0000O\u0001\u0000\u0000\u0000\u0000\u0000\fSColorShadow\bColor ()\u0013Upp::SColorShadow()\u0014Color SColorShadow()\u0003Upp\fSCOLORSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0014\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\fSColorLtFace\bColor ()\u0013Upp::SColorLtFace()\u0014Color SColorLtFace()\u0003Upp\fSCOLORLTFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000R\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0001\u0000\u0000\u0016\u0000\u0000\u0000R\u0001\u0000\u0000\u0000\u0000\u0000\u000ESColorDkShadow\bColor ()\u0015Upp::SColorDkShadow()\u0016Color SColorDkShadow()\u0003Upp\u000ESCOLORDKSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\u0000T\u0001\u0000\u0000\u001A\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\fSBlack_Write\fvoid (Color)\u0018Upp::SBlack_Write(Color)\u001Avoid SBlack_Write(Color c)\u0003Upp\fSBLACK_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0001\u0000\u0000\u0019\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000\u0000\vSGray_Write\fvoid (Color)\u0017Upp::SGray_Write(Color)\u0019void SGray_Write(Color c)\u0003Upp\vSGRAY_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000V\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0001\u0000\u0000\u001B\u0000\u0000\u0000V\u0001\u0000\u0000\u0000\u0000\u0000\rSLtGray_Write\fvoid (Color)\u0019Upp::SLtGray_Write(Color)\u001Bvoid SLtGray_Write(Color c)\u0003Upp\rSLTGRAY_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000\u0000\u0000W\u0001\u0000\u0000\u001E\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000\u0000\u0010SWhiteGray_Write\fvoid (Color)\u001CUpp::SWhiteGray_Write(Color)\u001Evoid SWhiteGray_Write(Color c)\u0003Upp\u0010SWHITEGRAY_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\u0000X\u0001\u0000\u0000\u001A\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\fSWhite_Write\fvoid (Color)\u0018Upp::SWhite_Write(Color)\u001Avoid SWhite_Write(Color c)\u0003Upp\fSWHITE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000\u0000\u0000\u0000Y\u0001\u0000\u0000\u0018\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000\u0000\u0000\nSRed_Write\fvoid (Color)\u0016Upp::SRed_Write(Color)\u0018void SRed_Write(Color c)\u0003Upp\nSRED_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Z\u0001\u0000\u0000\u0000\u0000\u0000\u0000Z\u0001\u0000\u0000\u001A\u0000\u0000\u0000Z\u0001\u0000\u0000\u0000\u0000\u0000\fSGreen_Write\fvoid (Color)\u0018Upp::SGreen_Write(Color)\u001Avoid SGreen_Write(Color c)\u0003Upp\fSGREEN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000[\u0001\u0000\u0000\u0000\u0000\u0000\u0000[\u0001\u0000\u0000\u001A\u0000\u0000\u0000[\u0001\u0000\u0000\u0000\u0000\u0000\fSBrown_Write\fvoid (Color)\u0018Upp::SBrown_Write(Color)\u001Avoid SBrown_Write(Color c)\u0003Upp\fSBROWN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000\u0019\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\vSBlue_Write\fvoid (Color)\u0017Upp::SBlue_Write(Color)\u0019void SBlue_Write(Color c)\u0003Upp\vSBLUE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000\u0000\u0000]\u0001\u0000\u0000\u001C\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000\u0000\u000ESMagenta_Write\fvoid (Color)\u001AUpp::SMagenta_Write(Color)\u001Cvoid SMagenta_Write(Color c)\u0003Upp\u000ESMAGENTA_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000^\u0001\u0000\u0000\u0000\u0000\u0000\u0000^\u0001\u0000\u0000\u0019\u0000\u0000\u0000^\u0001\u0000\u0000\u0000\u0000\u0000\vSCyan_Write\fvoid (Color)\u0017Upp::SCyan_Write(Color)\u0019void SCyan_Write(Color c)\u0003Upp\vSCYAN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000_\u0001\u0000\u0000\u0000\u0000\u0000\u0000_\u0001\u0000\u0000\u001B\u0000\u0000\u0000_\u0001\u0000\u0000\u0000\u0000\u0000\rSYellow_Write\fvoid (Color)\u0019Upp::SYellow_Write(Color)\u001Bvoid SYellow_Write(Color c)\u0003Upp\rSYELLOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000`\u0001\u0000\u0000\u0000\u0000\u0000\u0000`\u0001\u0000\u0000\u001A\u0000\u0000\u0000`\u0001\u0000\u0000\u0000\u0000\u0000\fSLtRed_Write\fvoid (Color)\u0018Upp::SLtRed_Write(Color)\u001Avoid SLtRed_Write(Color c)\u0003Upp\fSLTRED_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000a\u0001\u0000\u0000\u0000\u0000\u0000\u0000a\u0001\u0000\u0000\u001C\u0000\u0000\u0000a\u0001\u0000\u0000\u0000\u0000\u0000\u000ESLtGreen_Write\fvoid (Color)\u001AUpp::SLtGreen_Write(Color)\u001Cvoid SLtGreen_Write(Color c)\u0003Upp\u000ESLTGREEN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000b\u0001\u0000\u0000\u0000\u0000\u0000\u0000b\u0001\u0000\u0000\u001D\u0000\u0000\u0000b\u0001\u0000\u0000\u0000\u0000\u0000\u000FSLtYellow_Write\fvoid (Color)\u001BUpp::SLtYellow_Write(Color)\u001Dvoid SLtYellow_Write(Color c)\u0003Upp\u000FSLTYELLOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u001B\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\rSLtBlue_Write\fvoid (Color)\u0019Upp::SLtBlue_Write(Color)\u001Bvoid SLtBlue_Write(Color c)\u0003Upp\rSLTBLUE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000d\u0001\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0000\u0000\u001E\u0000\u0000\u0000d\u0001\u0000\u0000\u0000\u0000\u0000\u0010SLtMagenta_Write\fvoid (Color)\u001CUpp::SLtMagenta_Write(Color)\u001Evoid SLtMagenta_Write(Color c)\u0003Upp\u0010SLTMAGENTA_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000e\u0001\u0000\u0000\u0000\u0000\u0000\u0000e\u0001\u0000\u0000\u001B\u0000\u0000\u0000e\u0001\u0000\u0000\u0000\u0000\u0000\rSLtCyan_Write\fvoid (Color)\u0019Upp::SLtCyan_Write(Color)\u001Bvoid SLtCyan_Write(Color c)\u0003Upp\rSLTCYAN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000g\u0001\u0000\u0000\u0000\u0000\u0000\u0000g\u0001\u0000\u0000\u001F\u0000\u0000\u0000g\u0001\u0000\u0000\u0000\u0000\u0000\u0011SColorPaper_Write\fvoid (Color)\u001DUpp::SColorPaper_Write(Color)\u001Fvoid SColorPaper_Write(Color c)\u0003Upp\u0011SCOLORPAPER_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000h\u0001\u0000\u0000\u0000\u0000\u0000\u0000h\u0001\u0000\u0000\u001E\u0000\u0000\u0000h\u0001\u0000\u0000\u0000\u0000\u0000\u0010SColorText_Write\fvoid (Color)\u001CUpp::SColorText_Write(Color)\u001Evoid SColorText_Write(Color c)\u0003Upp\u0010SCOLORTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000i\u0001\u0000\u0000\u0000\u0000\u0000\u0000i\u0001\u0000\u0000#\u0000\u0000\u0000i\u0001\u0000\u0000\u0000\u0000\u0000\u0015SColorHighlight_Write\fvoid (Color)!Upp::SColorHighlight_Write(Color)#void SColorHighlight_Write(Color c)\u0003Upp\u0015SCOLORHIGHLIGHT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000'\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0019SColorHighlightText_Write\fvoid (Color)%Upp::SColorHighlightText_Write(Color)'void SColorHighlightText_Write(Color c)\u0003Upp\u0019SCOLORHIGHLIGHTTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000k\u0001\u0000\u0000\u0000\u0000\u0000\u0000k\u0001\u0000\u0000\u001E\u0000\u0000\u0000k\u0001\u0000\u0000\u0000\u0000\u0000\u0010SColorMenu_Write\fvoid (Color)\u001CUpp::SColorMenu_Write(Color)\u001Evoid SColorMenu_Write(Color c)\u0003Upp\u0010SCOLORMENU_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000l\u0001\u0000\u0000\u0000\u0000\u0000\u0000l\u0001\u0000\u0000\"\u0000\u0000\u0000l\u0001\u0000\u0000\u0000\u0000\u0000\u0014SColorMenuText_Write\fvoid (Color) Upp::SColorMenuText_Write(Color)\"void SColorMenuText_Write(Color c)\u0003Upp\u0014SCOLORMENUTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000\u0000\u0000m\u0001\u0000\u0000\u001E\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000\u0000\u0010SColorInfo_Write\fvoid (Color)\u001CUpp::SColorInfo_Write(Color)\u001Evoid SColorInfo_Write(Color c)\u0003Upp\u0010SCOLORINFO_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000n\u0001\u0000\u0000\u0000\u0000\u0000\u0000n\u0001\u0000\u0000\"\u0000\u0000\u0000n\u0001\u0000\u0000\u0000\u0000\u0000\u0014SColorInfoText_Write\fvoid (Color) Upp::SColorInfoText_Write(Color)\"void SColorInfoText_Write(Color c)\u0003Upp\u0014SCOLORINFOTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000o\u0001\u0000\u0000\u0000\u0000\u0000\u0000o\u0001\u0000\u0000\u001E\u0000\u0000\u0000o\u0001\u0000\u0000\u0000\u0000\u0000\u0010SColorMark_Write\fvoid (Color)\u001CUpp::SColorMark_Write(Color)\u001Evoid SColorMark_Write(Color c)\u0003Upp\u0010SCOLORMARK_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000p\u0001\u0000\u0000\u0000\u0000\u0000\u0000p\u0001\u0000\u0000\"\u0000\u0000\u0000p\u0001\u0000\u0000\u0000\u0000\u0000\u0014SColorMenuMark_Write\fvoid (Color) Upp::SColorMenuMark_Write(Color)\"void SColorMenuMark_Write(Color c)\u0003Upp\u0014SCOLORMENUMARK_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000q\u0001\u0000\u0000\u0000\u0000\u0000\u0000q\u0001\u0000\u0000\"\u0000\u0000\u0000q\u0001\u0000\u0000\u0000\u0000\u0000\u0014SColorDisabled_Write\fvoid (Color) Upp::SColorDisabled_Write(Color)\"void SColorDisabled_Write(Color c)\u0003Upp\u0014SCOLORDISABLED_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000r\u0001\u0000\u0000\u0000\u0000\u0000\u0000r\u0001\u0000\u0000\u001F\u0000\u0000\u0000r\u0001\u0000\u0000\u0000\u0000\u0000\u0011SColorLight_Write\fvoid (Color)\u001DUpp::SColorLight_Write(Color)\u001Fvoid SColorLight_Write(Color c)\u0003Upp\u0011SCOLORLIGHT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000s\u0001\u0000\u0000\u0000\u0000\u0000\u0000s\u0001\u0000\u0000\u001E\u0000\u0000\u0000s\u0001\u0000\u0000\u0000\u0000\u0000\u0010SColorFace_Write\fvoid (Color)\u001CUpp::SColorFace_Write(Color)\u001Evoid SColorFace_Write(Color c)\u0003Upp\u0010SCOLORFACE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u001F\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0011SColorLabel_Write\fvoid (Color)\u001DUpp::SColorLabel_Write(Color)\u001Fvoid SColorLabel_Write(Color c)\u0003Upp\u0011SCOLORLABEL_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000u\u0001\u0000\u0000\u0000\u0000\u0000\u0000u\u0001\u0000\u0000 \u0000\u0000\u0000u\u0001\u0000\u0000\u0000\u0000\u0000\u0012SColorShadow_Write\fvoid (Color)\u001EUpp::SColorShadow_Write(Color) void SColorShadow_Write(Color c)\u0003Upp\u0012SCOLORSHADOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000w\u0001\u0000\u0000\u0000\u0000\u0000\u0000w\u0001\u0000\u0000 \u0000\u0000\u0000w\u0001\u0000\u0000\u0000\u0000\u0000\u0012SColorLtFace_Write\fvoid (Color)\u001EUpp::SColorLtFace_Write(Color) void SColorLtFace_Write(Color c)\u0003Upp\u0012SCOLORLTFACE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000x\u0001\u0000\u0000\u0000\u0000\u0000\u0000x\u0001\u0000\u0000\"\u0000\u0000\u0000x\u0001\u0000\u0000\u0000\u0000\u0000\u0014SColorDkShadow_Write\fvoid (Color) Upp::SColorDkShadow_Write(Color)\"void SColorDkShadow_Write(Color c)\u0003Upp\u0014SCOLORDKSHADOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000z\u0001\u0000\u0000\u0000\u0000\u0000\u0000z\u0001\u0000\u0000:\u0000\u0000\u0000z\u0001\u0000\u0000\u0001\u0000\u0000\vInvertColor\bColor ()\u0012Upp::InvertColor()\u0013Color InvertColor()\u0003Upp\vINVERTCOLOR\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000{\u0001\u0000\u0000\u0000\u0000\u0000\u0000{\u0001\u0000\u00009\u0000\u0000\u0000{\u0001\u0000\u0000\u0001\u0000\u0000\nDefaultInk\bColor ()\u0011Upp::DefaultInk()\u0012Color DefaultInk()\u0003Upp\nDEFAULTINK\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000\u0000}\u0001\u0000\u0000\u0018\u0000\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000\fdark_theme__\u0004bool\u0011Upp::dark_theme__\u0011bool dark_theme__\u0003Upp\fDARK_THEME__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u007F\u0001\u0000\u0000=\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0001\u0000\u0000\vIsDarkTheme\abool ()\u0012Upp::IsDarkTheme()\u0012bool IsDarkTheme()\u0003Upp\vISDARKTHEME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\fAdjustIfDark\rColor (Color)\u0018Upp::AdjustIfDark(Color)\u001BColor AdjustIfDark(Color c)\u0003Upp\fADJUSTIFDARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\tAsDrawing\u001ADrawing (const Painting &)\u001FUpp::AsDrawing(const Painting&)%Drawing AsDrawing(const Painting& pw)\u0003Upp\tASDRAWING\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\bPainting\rUpp::Painting\rUpp::Painting=Painting : public ValueType<Painting, 48, Moveable<Painting>>\u0003Upp\bPAINTING\rUpp::Painting\rUPP::PAINTING\u000EUpp::ValueType\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0003cmd\u0006String\u0012Upp::Painting::cmd\nString cmd\u0003Upp\u0003CMD\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004data\nValueArray\u0013Upp::Painting::data\u000FValueArray data\u0003Upp\u0004DATA\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004size\u0005Sizef\u0013Upp::Painting::size\nSizef size\u0003Upp\u0004SIZE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aGetSize\u000ESizef () const\u001DUpp::Painting::GetSize()const\u0015Sizef GetSize() const\u0003Upp\aGETSIZE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u0016Upp::Painting::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tSerialize\u000Fvoid (Stream &)!Upp::Painting::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0006Xmlize\u000Evoid (XmlIO &)\u001DUpp::Painting::Xmlize(XmlIO&)\u0017void Xmlize(XmlIO& xio)\u0003Upp\u0006XMLIZE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aJsonize\u000Fvoid (JsonIO &)\u001FUpp::Painting::Jsonize(JsonIO&)\u0019void Jsonize(JsonIO& jio)\u0003Upp\aJSONIZE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000EIsNullInstance\rbool () const$Upp::Painting::IsNullInstance()const\u001Bbool IsNullInstance() const\u0003Upp\u000EISNULLINSTANCE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aSetNull\avoid ()\u0018Upp::Painting::SetNull()\u000Evoid SetNull()\u0003Upp\aSETNULL\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\noperator==\u001Dbool (const Painting &) const/Upp::Painting::operator==(const Painting&)const\rbool operator\u0003Upp\nOPERATOR==\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\fGetHashValue\u000Fhash_t () const\"Upp::Painting::GetHashValue()const\u001Bhash_t GetHashValue() const\u0003Upp\fGETHASHVALUE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\bToString\u000FString () const\u001EUpp::Painting::ToString()const\u0017String ToString() const\u0003Upp\bTOSTRING\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000Eoperator Value\u000EValue () const$Upp::Painting::operator Value()const\u0016operator Value() const\u0003Upp\u000EOPERATOR VALUE\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\bPainting\u0014void (const Value &)%Upp::Painting::Painting(const Value&)\u0018Painting(const Value& q)\u0003Upp\bPAINTING\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\bPainting\avoid ()\u0019Upp::Painting::Painting()\nPainting()\u0003Upp\bPAINTING\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\bPainting\u0015void (const Nuller &)&Upp::Painting::Painting(const Nuller&)\u0017Painting(const Nuller&)\u0003Upp\bPAINTING\rUpp::Painting\rUPP::PAINTING\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000¡\u0001\u0000\u0000\u0000\u0000\u0000\u0000¡\u0001\u0000\u0000\u0001\u0000\u0000\u0000¥\u0001\u0000\u0000\u0001\u0000\u0000?(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:418:1)DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:418:1)8Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp?(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:418:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000¢\u0001\u0000\u0000\u0001\u0000\u0000\u0000¢\u0001\u0000\u0000\u0015\u0000\u0000\u0000¢\u0001\u0000\u0000\u0001\u0000\u0000\u0010MODE_ANTIALIASEDDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:418:1)\u0015Upp::MODE_ANTIALIASED\u0010MODE_ANTIALIASED\u0003Upp\u0010MODE_ANTIALIASED\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000£\u0001\u0000\u0000\u0001\u0000\u0000\u0000£\u0001\u0000\u0000\u0015\u0000\u0000\u0000£\u0001\u0000\u0000\u0001\u0000\u0000\tMODE_NOAADUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:418:1)\u000EUpp::MODE_NOAA\tMODE_NOAA\u0003Upp\tMODE_NOAA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0001\u0000\u0000\u0001\u0000\u0000\u0000¤\u0001\u0000\u0000\u0015\u0000\u0000\u0000¤\u0001\u0000\u0000\u0001\u0000\u0000\rMODE_SUBPIXELDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:418:1)\u0012Upp::MODE_SUBPIXEL\rMODE_SUBPIXEL\u0003Upp\rMODE_SUBPIXEL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000§\u0001\u0000\u0000\u0000\u0000\u0000\u0000§\u0001\u0000\u0000\u0011\u0000\u0000\u0000§\u0001\u0000\u0000\u0000\u0000\u0000\nHasPainter\abool ()\u0011Upp::HasPainter()\u0011bool HasPainter()\u0003Upp\nHASPAINTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¨\u0001\u0000\u0000\u0000\u0000\u0000\u0000¨\u0001\u0000\u0000j\u0000\u0000\u0000¨\u0001\u0000\u0000\u0000\u0000\u0000\u0010PaintImageBuffer8void (ImageBuffer &, const Painting &, Size, Point, int)BUpp::PaintImageBuffer(ImageBuffer&,const Painting&,Size,Point,int)jvoid PaintImageBuffer(ImageBuffer& ib, const Painting& p, Size sz, Point pos, int mode = MODE_ANTIALIASED)\u0003Upp\u0010PAINTIMAGEBUFFER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000©\u0001\u0000\u0000\u0000\u0000\u0000\u0000©\u0001\u0000\u0000V\u0000\u0000\u0000©\u0001\u0000\u0000\u0000\u0000\u0000\u0010PaintImageBuffer+void (ImageBuffer &, const Painting &, int)7Upp::PaintImageBuffer(ImageBuffer&,const Painting&,int)Vvoid PaintImageBuffer(ImageBuffer& ib, const Painting& p, int mode = MODE_ANTIALIASED)\u0003Upp\u0010PAINTIMAGEBUFFER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0000\u0000\u0000ª\u0001\u0000\u0000U\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0000\u0000\u0010PaintImageBuffer*void (ImageBuffer &, const Drawing &, int)6Upp::PaintImageBuffer(ImageBuffer&,const Drawing&,int)Uvoid PaintImageBuffer(ImageBuffer& ib, const Drawing& p, int mode = MODE_ANTIALIASED)\u0003Upp\u0010PAINTIMAGEBUFFER\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000¬\u0001\u0000\u0000\u0000\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0000w\u0002\u0000\u0000\u0001\u0000\u0000\u0004Draw\tUpp::Draw\tUpp::Draw\rDraw : NoCopy\u0003Upp\u0004DRAW\tUpp::Draw\tUPP::DRAW\vUpp::NoCopy\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000­\u0001\u0000\u0000\u0001\u0000\u0000\u0000­\u0001\u0000\u0000\u0012\u0000\u0000\u0000­\u0001\u0000\u0000\u0000\u0000\u0000\nDrawingPos\u0015Upp::Draw::DrawingPos\u0015Upp::Draw::DrawingPos\nDrawingPos\u0003Upp\nDRAWINGPOS\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000°\u0001\u0000\u0000\u0001\u0000\u0000\u0000°\u0001\u0000\u0000\u0002\u0000\u0000\u0000·\u0001\u0000\u0000\u0001\u0000\u0000?(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)JUpp::Draw::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)>Upp::Draw::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp?(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:433:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000±\u0001\u0000\u0000\u0002\u0000\u0000\u0000±\u0001\u0000\u0000\u000E\u0000\u0000\u0000±\u0001\u0000\u0000\u0001\u0000\u0000\u0004DOTSJUpp::Draw::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)\u000FUpp::Draw::DOTS\u0004DOTS\u0003Upp\u0004DOTS\tUpp::Draw\tUPP::DRAW\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000²\u0001\u0000\u0000\u0002\u0000\u0000\u0000²\u0001\u0000\u0000\u0011\u0000\u0000\u0000²\u0001\u0000\u0000\u0001\u0000\u0000\aPRINTERJUpp::Draw::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)\u0012Upp::Draw::PRINTER\aPRINTER\u0003Upp\aPRINTER\tUpp::Draw\tUPP::DRAW\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000³\u0001\u0000\u0000\u0002\u0000\u0000\u0000³\u0001\u0000\u0000\u0010\u0000\u0000\u0000³\u0001\u0000\u0000\u0001\u0000\u0000\u0006NATIVEJUpp::Draw::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)\u0011Upp::Draw::NATIVE\u0006NATIVE\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000´\u0001\u0000\u0000\u0002\u0000\u0000\u0000´\u0001\u0000\u0000\u0013\u0000\u0000\u0000´\u0001\u0000\u0000\u0001\u0000\u0000\tDATABANDSJUpp::Draw::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)\u0014Upp::Draw::DATABANDS\tDATABANDS\u0003Upp\tDATABANDS\tUpp::Draw\tUPP::DRAW\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000µ\u0001\u0000\u0000\u0002\u0000\u0000\u0000µ\u0001\u0000\u0000\u0017\u0000\u0000\u0000µ\u0001\u0000\u0000\u0001\u0000\u0000\rDRAWTEXTLINESJUpp::Draw::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)\u0018Upp::Draw::DRAWTEXTLINES\rDRAWTEXTLINES\u0003Upp\rDRAWTEXTLINES\tUpp::Draw\tUPP::DRAW\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000¶\u0001\u0000\u0000\u0002\u0000\u0000\u0000¶\u0001\u0000\u0000\u0011\u0000\u0000\u0000¶\u0001\u0000\u0000\u0001\u0000\u0000\aDRAWINGJUpp::Draw::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:433:2)\u0012Upp::Draw::DRAWING\aDRAWING\u0003Upp\aDRAWING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000¹\u0001\u0000\u0000\u0001\u0000\u0000\u0000¹\u0001\u0000\u0000\"\u0000\u0000\u0000¹\u0001\u0000\u0000\u0000\u0001\u0000\aGetInfo\u000Edword () const\u0019Upp::Draw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000»\u0001\u0000\u0000\u0001\u0000\u0000\u0000»\u0001\u0000\u0000!\u0000\u0000\u0000»\u0001\u0000\u0000\u0000\u0001\u0000\vGetPageSize\rSize () const\u001DUpp::Draw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¼\u0001\u0000\u0000\u0001\u0000\u0000\u0000¼\u0001\u0000\u0000\u0019\u0000\u0000\u0000¼\u0001\u0000\u0000\u0000\u0001\u0000\tStartPage\avoid ()\u0016Upp::Draw::StartPage()\u0010void StartPage()\u0003Upp\tSTARTPAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000½\u0001\u0000\u0000\u0001\u0000\u0000\u0000½\u0001\u0000\u0000\u0017\u0000\u0000\u0000½\u0001\u0000\u0000\u0000\u0001\u0000\aEndPage\avoid ()\u0014Upp::Draw::EndPage()\u000Evoid EndPage()\u0003Upp\aENDPAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¿\u0001\u0000\u0000\u0001\u0000\u0000\u0000¿\u0001\u0000\u0000\u001B\u0000\u0000\u0000¿\u0001\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u0014Upp::Draw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000À\u0001\u0000\u0000\u0001\u0000\u0000\u0000À\u0001\u0000\u0000\u0019\u0000\u0000\u0000À\u0001\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u0012Upp::Draw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Á\u0001\u0000\u0000\u0001\u0000\u0000\u0000Á\u0001\u0000\u0000#\u0000\u0000\u0000Á\u0001\u0000\u0000\u0000\u0001\u0000\bOffsetOp\fvoid (Point)\u001AUpp::Draw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Â\u0001\u0000\u0000\u0001\u0000\u0000\u0000Â\u0001\u0000\u0000'\u0000\u0000\u0000Â\u0001\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)\u001EUpp::Draw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ã\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0001\u0000\u0000*\u0000\u0000\u0000Ã\u0001\u0000\u0000\u0000\u0001\u0000\tClipoffOp\u0013bool (const Rect &)!Upp::Draw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ä\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0001\u0000\u0000.\u0000\u0000\u0000Ä\u0001\u0000\u0000\u0000\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)%Upp::Draw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Å\u0001\u0000\u0000\u0001\u0000\u0000\u0000Å\u0001\u0000\u00000\u0000\u0000\u0000Å\u0001\u0000\u0000\u0000\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)'Upp::Draw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Æ\u0001\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0001\u0000\u00003\u0000\u0000\u0000Æ\u0001\u0000\u0000\u0000\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const)Upp::Draw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0001\u0000\u0000\"\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0000\u0001\u0000\fGetPaintRect\rRect () const\u001EUpp::Draw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000É\u0001\u0000\u0000\u0001\u0000\u0000\u0000É\u0001\u0000\u0000G\u0000\u0000\u0000É\u0001\u0000\u0000\u0000\u0001\u0000\nDrawRectOp void (int, int, int, int, Color),Upp::Draw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0001\u0000\u0000I\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0000\u0001\u0000\u000ESysDrawImageOp%void (int, int, const Image &, Color)5Upp::Draw::SysDrawImageOp(int,int,const Image&,Color)@void SysDrawImageOp(int x, int y, const Image& img, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ë\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0001\u0000\u0000Z\u0000\u0000\u0000Ë\u0001\u0000\u0000\u0000\u0001\u0000\u000ESysDrawImageOp3void (int, int, const Image &, const Rect &, Color)AUpp::Draw::SysDrawImageOp(int,int,const Image&,const Rect&,Color)Qvoid SysDrawImageOp(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ì\u0001\u0000\u0000g\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0000\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)FUpp::Draw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Í\u0001\u0000\u0000\u0001\u0000\u0000\u0000Í\u0001\u0000\u0000Z\u0000\u0000\u0000Í\u0001\u0000\u0000\u0000\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)@Upp::Draw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Î\u0001\u0000\u0000\u0001\u0000\u0000\u0000Î\u0001\u0000\u0000T\u0000\u0000\u0000Î\u0001\u0000\u0000\u0000\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)0Upp::Draw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ð\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0001\u0000\u0000I\u0000\u0000\u0000Ò\u0001\u0000\u0000\u0000\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)NUpp::Draw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ó\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0001\u0000\u0000D\u0000\u0000\u0000×\u0001\u0000\u0000\u0000\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)mUpp::Draw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ø\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0001\u0000\u0000[\u0000\u0000\u0000Ø\u0001\u0000\u0000\u0000\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)7Upp::Draw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0001\u0000\u0000T\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0000\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)5Upp::Draw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Û\u0001\u0000\u0000\u0001\u0000\u0000\u0000Û\u0001\u0000\u0000:\u0000\u0000\u0000Ü\u0001\u0000\u0000\u0000\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)IUpp::Draw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ý\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0001\u0000\u0000A\u0000\u0000\u0000Ý\u0001\u0000\u0000\u0000\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)4Upp::Draw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Þ\u0001\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0001\u0000\u0000C\u0000\u0000\u0000Þ\u0001\u0000\u0000\u0000\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)6Upp::Draw::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000à\u0001\u0000\u0000\u0001\u0000\u0000\u0000à\u0001\u0000\u0000\"\u0000\u0000\u0000à\u0001\u0000\u0000\u0000\u0001\u0000\fGetNativeDpi\rSize () const\u001EUpp::Draw::GetNativeDpi()const\u0019Size GetNativeDpi() const\u0003Upp\fGETNATIVEDPI\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000á\u0001\u0000\u0000\u0001\u0000\u0000\u0000á\u0001\u0000\u0000\u001B\u0000\u0000\u0000á\u0001\u0000\u0000\u0000\u0001\u0000\vBeginNative\avoid ()\u0018Upp::Draw::BeginNative()\u0012void BeginNative()\u0003Upp\vBEGINNATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000â\u0001\u0000\u0000\u0001\u0000\u0000\u0000â\u0001\u0000\u0000\u0019\u0000\u0000\u0000â\u0001\u0000\u0000\u0000\u0001\u0000\tEndNative\avoid ()\u0016Upp::Draw::EndNative()\u0010void EndNative()\u0003Upp\tENDNATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ä\u0001\u0000\u0000\u0001\u0000\u0000\u0000ä\u0001\u0000\u0000#\u0000\u0000\u0000ä\u0001\u0000\u0000\u0000\u0001\u0000\rGetCloffLevel\fint () const\u001FUpp::Draw::GetCloffLevel()const\u0019int GetCloffLevel() const\u0003Upp\rGETCLOFFLEVEL\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000æ\u0001\u0000\u0000\u0001\u0000\u0000\u0000æ\u0001\u0000\u0000(\u0000\u0000\u0000æ\u0001\u0000\u0000\u0000\u0001\u0000\u0006Escape\u0015void (const String &) Upp::Draw::Escape(const String&)\u001Fvoid Escape(const String& data)\u0003Upp\u0006ESCAPE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000è\u0001\u0000\u0000\u0001\u0000\u0000\u0000è\u0001\u0000\u0000\u0010\u0000\u0000\u0000è\u0001\u0000\u0000\u0000\u0000\u0000\u0005~Draw\u0010void () noexcept\u000EUpp::Draw::~()\a~Draw()\u0003Upp\u0005~DRAW\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ë\u0001\u0000\u0000\u0001\u0000\u0000\u0000ë\u0001\u0000\u0000\u001F\u0000\u0000\u0000ë\u0001\u0000\u0000\u0000\u0000\u0000\u0010GetPixelsPerInch\rSize () const\"Upp::Draw::GetPixelsPerInch()const\u001DSize GetPixelsPerInch() const\u0003Upp\u0010GETPIXELSPERINCH\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ì\u0001\u0000\u0000\u0001\u0000\u0000\u0000ì\u0001\u0000\u0000\u0019\u0000\u0000\u0000ì\u0001\u0000\u0000\u0000\u0000\u0000\nGetPageMMs\rSize () const\u001CUpp::Draw::GetPageMMs()const\u0017Size GetPageMMs() const\u0003Upp\nGETPAGEMMS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000î\u0001\u0000\u0000\u0001\u0000\u0000\u0000î\u0001\u0000\u0000Q\u0000\u0000\u0000î\u0001\u0000\u0000\u0001\u0000\u0000\u0004Dots\rbool () const\u0016Upp::Draw::Dots()const\u0011bool Dots() const\u0003Upp\u0004DOTS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ï\u0001\u0000\u0000\u0001\u0000\u0000\u0000ï\u0001\u0000\u0000H\u0000\u0000\u0000ï\u0001\u0000\u0000\u0001\u0000\u0000\u0006Pixels\rbool () const\u0018Upp::Draw::Pixels()const\u0013bool Pixels() const\u0003Upp\u0006PIXELS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ð\u0001\u0000\u0000\u0001\u0000\u0000\u0000ð\u0001\u0000\u0000T\u0000\u0000\u0000ð\u0001\u0000\u0000\u0001\u0000\u0000\tIsPrinter\rbool () const\u001BUpp::Draw::IsPrinter()const\u0016bool IsPrinter() const\u0003Upp\tISPRINTER\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ñ\u0001\u0000\u0000\u0001\u0000\u0000\u0000ñ\u0001\u0000\u0000S\u0000\u0000\u0000ñ\u0001\u0000\u0000\u0001\u0000\u0000\bIsNative\rbool () const\u001AUpp::Draw::IsNative()const\u0015bool IsNative() const\u0003Upp\bISNATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000ó\u0001\u0000\u0000\u0001\u0000\u0000\u0000ó\u0001\u0000\u0000\u001D\u0000\u0000\u0000ó\u0001\u0000\u0000\u0000\u0000\u0000\nGetNativeX\u000Fint (int) const\u001FUpp::Draw::GetNativeX(int)const\u001Bint GetNativeX(int x) const\u0003Upp\nGETNATIVEX\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000ô\u0001\u0000\u0000\u0001\u0000\u0000\u0000ô\u0001\u0000\u0000\u001D\u0000\u0000\u0000ô\u0001\u0000\u0000\u0000\u0000\u0000\nGetNativeY\u000Fint (int) const\u001FUpp::Draw::GetNativeY(int)const\u001Bint GetNativeY(int y) const\u0003Upp\nGETNATIVEY\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000õ\u0001\u0000\u0000\u0001\u0000\u0000\u0000õ\u0001\u0000\u0000\"\u0000\u0000\u0000õ\u0001\u0000\u0000\u0000\u0000\u0000\u0006Native\u0019void (int &, int &) const!Upp::Draw::Native(int&,int&)const!void Native(int& x, int& y) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000ö\u0001\u0000\u0000\u0001\u0000\u0000\u0000ö\u0001\u0000\u0000\u001C\u0000\u0000\u0000ö\u0001\u0000\u0000\u0000\u0000\u0000\u0006Native\u0014void (Point &) const\u001EUpp::Draw::Native(Point&)const\u001Bvoid Native(Point& p) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000÷\u0001\u0000\u0000\u0001\u0000\u0000\u0000÷\u0001\u0000\u0000\u001C\u0000\u0000\u0000÷\u0001\u0000\u0000\u0000\u0000\u0000\u0006Native\u0013void (Size &) const\u001DUpp::Draw::Native(Size&)const\u001Bvoid Native(Size& sz) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000ø\u0001\u0000\u0000\u0001\u0000\u0000\u0000ø\u0001\u0000\u0000\u001B\u0000\u0000\u0000ø\u0001\u0000\u0000\u0000\u0000\u0000\u0006Native\u0013void (Rect &) const\u001DUpp::Draw::Native(Rect&)const\u001Avoid Native(Rect& r) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ú\u0001\u0000\u0000\u0001\u0000\u0000\u0000ú\u0001\u0000\u0000C\u0000\u0000\u0000ú\u0001\u0000\u0000\u0001\u0000\u0000\u0005Begin\avoid ()\u0012Upp::Draw::Begin()\fvoid Begin()\u0003Upp\u0005BEGIN\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000û\u0001\u0000\u0000\u0001\u0000\u0000\u0000û\u0001\u0000\u0000A\u0000\u0000\u0000û\u0001\u0000\u0000\u0001\u0000\u0000\u0003End\avoid ()\u0010Upp::Draw::End()\nvoid End()\u0003Upp\u0003END\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ü\u0001\u0000\u0000\u0001\u0000\u0000\u0000ü\u0001\u0000\u0000E\u0000\u0000\u0000ü\u0001\u0000\u0000\u0001\u0000\u0000\u0006Offset\fvoid (Point)\u0018Upp::Draw::Offset(Point)\u0014void Offset(Point p)\u0003Upp\u0006OFFSET\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ý\u0001\u0000\u0000\u0001\u0000\u0000\u0000ý\u0001\u0000\u0000\u001B\u0000\u0000\u0000ý\u0001\u0000\u0000\u0000\u0000\u0000\u0006Offset\u000Fvoid (int, int)\u001AUpp::Draw::Offset(int,int)\u0019void Offset(int x, int y)\u0003Upp\u0006OFFSET\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000þ\u0001\u0000\u0000\u0001\u0000\u0000\u0000þ\u0001\u0000\u0000J\u0000\u0000\u0000þ\u0001\u0000\u0000\u0001\u0000\u0000\u0004Clip\u0013bool (const Rect &)\u001CUpp::Draw::Clip(const Rect&)\u0018bool Clip(const Rect& r)\u0003Upp\u0004CLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000ÿ\u0001\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0001\u0000\u0000)\u0000\u0000\u0000ÿ\u0001\u0000\u0000\u0000\u0000\u0000\u0004Clip\u0019bool (int, int, int, int) Upp::Draw::Clip(int,int,int,int)'bool Clip(int x, int y, int cx, int cy)\u0003Upp\u0004CLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0002\u0000\u0000M\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\aClipoff\u0013bool (const Rect &)\u001FUpp::Draw::Clipoff(const Rect&)\u001Bbool Clipoff(const Rect& r)\u0003Upp\aCLIPOFF\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0002\u0000\u0000,\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\aClipoff\u0019bool (int, int, int, int)#Upp::Draw::Clipoff(int,int,int,int)*bool Clipoff(int x, int y, int cx, int cy)\u0003Upp\aCLIPOFF\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0002\u0000\u0000Q\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0001\u0000\u0000\vExcludeClip\u0013bool (const Rect &)#Upp::Draw::ExcludeClip(const Rect&)\u001Fbool ExcludeClip(const Rect& r)\u0003Upp\vEXCLUDECLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0003\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0002\u0000\u00000\u0000\u0000\u0000\u0003\u0002\u0000\u0000\u0000\u0000\u0000\vExcludeClip\u0019bool (int, int, int, int)'Upp::Draw::ExcludeClip(int,int,int,int).bool ExcludeClip(int x, int y, int cx, int cy)\u0003Upp\vEXCLUDECLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0004\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0002\u0000\u0000S\u0000\u0000\u0000\u0004\u0002\u0000\u0000\u0001\u0000\u0000\rIntersectClip\u0013bool (const Rect &)%Upp::Draw::IntersectClip(const Rect&)!bool IntersectClip(const Rect& r)\u0003Upp\rINTERSECTCLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0005\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0002\u0000\u00002\u0000\u0000\u0000\u0005\u0002\u0000\u0000\u0000\u0000\u0000\rIntersectClip\u0019bool (int, int, int, int))Upp::Draw::IntersectClip(int,int,int,int)0bool IntersectClip(int x, int y, int cx, int cy)\u0003Upp\rINTERSECTCLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0006\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0002\u0000\u0000P\u0000\u0000\u0000\u0006\u0002\u0000\u0000\u0001\u0000\u0000\nIsPainting\u0019bool (const Rect &) const'Upp::Draw::IsPainting(const Rect&)const$bool IsPainting(const Rect& r) const\u0003Upp\nISPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\a\u0002\u0000\u0000\u0001\u0000\u0000\u0000\a\u0002\u0000\u00005\u0000\u0000\u0000\a\u0002\u0000\u0000\u0000\u0000\u0000\nIsPainting\u001Fbool (int, int, int, int) const+Upp::Draw::IsPainting(int,int,int,int)const3bool IsPainting(int x, int y, int cx, int cy) const\u0003Upp\nISPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\t\u0002\u0000\u0000\u0001\u0000\u0000\u0000\t\u0002\u0000\u00009\u0000\u0000\u0000\t\u0002\u0000\u0000\u0000\u0000\u0000\bDrawRect void (int, int, int, int, Color)*Upp::Draw::DrawRect(int,int,int,int,Color)8void DrawRect(int x, int y, int cx, int cy, Color color)\u0003Upp\bDRAWRECT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\n\u0002\u0000\u0000\u0001\u0000\u0000\u0000\n\u0002\u0000\u0000-\u0000\u0000\u0000\n\u0002\u0000\u0000\u0000\u0000\u0000\bDrawRect\u001Avoid (const Rect &, Color)&Upp::Draw::DrawRect(const Rect&,Color),void DrawRect(const Rect& rect, Color color)\u0003Upp\bDRAWRECT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0002\u0000\u0000\u0001\u0000\u0000\u0000\f\u0002\u0000\u0000P\u0000\u0000\u0000\f\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage6void (int, int, int, int, const Image &, const Rect &)>Upp::Draw::DrawImage(int,int,int,int,const Image&,const Rect&)Ovoid DrawImage(int x, int y, int cx, int cy, const Image& img, const Rect& src)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\r\u0002\u0000\u0000\u0001\u0000\u0000\u0000\r\u0002\u0000\u0000?\u0000\u0000\u0000\r\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage(void (int, int, int, int, const Image &)2Upp::Draw::DrawImage(int,int,int,int,const Image&)>void DrawImage(int x, int y, int cx, int cy, const Image& img)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0002\u0000\u0000]\u0000\u0000\u0000\u000E\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage=void (int, int, int, int, const Image &, const Rect &, Color)DUpp::Draw::DrawImage(int,int,int,int,const Image&,const Rect&,Color)\\void DrawImage(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0002\u0000\u0000L\u0000\u0000\u0000\u000F\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage/void (int, int, int, int, const Image &, Color)8Upp::Draw::DrawImage(int,int,int,int,const Image&,Color)Kvoid DrawImage(int x, int y, int cx, int cy, const Image& img, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0002\u0000\u0000A\u0000\u0000\u0000\u0011\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage0void (const Rect &, const Image &, const Rect &):Upp::Draw::DrawImage(const Rect&,const Image&,const Rect&)@void DrawImage(const Rect& r, const Image& img, const Rect& src)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0002\u0000\u00000\u0000\u0000\u0000\u0012\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage\"void (const Rect &, const Image &).Upp::Draw::DrawImage(const Rect&,const Image&)/void DrawImage(const Rect& r, const Image& img)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0002\u0000\u0000N\u0000\u0000\u0000\u0013\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage7void (const Rect &, const Image &, const Rect &, Color)@Upp::Draw::DrawImage(const Rect&,const Image&,const Rect&,Color)Mvoid DrawImage(const Rect& r, const Image& img, const Rect& src, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0002\u0000\u0000=\u0000\u0000\u0000\u0014\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage)void (const Rect &, const Image &, Color)4Upp::Draw::DrawImage(const Rect&,const Image&,Color)<void DrawImage(const Rect& r, const Image& img, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0002\u0000\u0000@\u0000\u0000\u0000\u0016\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage,void (int, int, const Image &, const Rect &)6Upp::Draw::DrawImage(int,int,const Image&,const Rect&)?void DrawImage(int x, int y, const Image& img, const Rect& src)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0002\u0000\u0000/\u0000\u0000\u0000\u0017\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage\u001Evoid (int, int, const Image &)*Upp::Draw::DrawImage(int,int,const Image&).void DrawImage(int x, int y, const Image& img)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0002\u0000\u0000M\u0000\u0000\u0000\u0018\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage3void (int, int, const Image &, const Rect &, Color)<Upp::Draw::DrawImage(int,int,const Image&,const Rect&,Color)Lvoid DrawImage(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0002\u0000\u0000<\u0000\u0000\u0000\u0019\u0002\u0000\u0000\u0000\u0000\u0000\tDrawImage%void (int, int, const Image &, Color)0Upp::Draw::DrawImage(int,int,const Image&,Color);void DrawImage(int x, int y, const Image& img, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001B\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0002\u0000\u0000R\u0000\u0000\u0000\u001B\u0002\u0000\u0000\u0000\u0000\u0000\bDrawData7void (int, int, int, int, const String &, const char *)>Upp::Draw::DrawData(int,int,int,int,const String&,const char*)Qvoid DrawData(int x, int y, int cx, int cy, const String& data, const char *type)\u0003Upp\bDRAWDATA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0002\u0000\u0000C\u0000\u0000\u0000\u001C\u0002\u0000\u0000\u0000\u0000\u0000\bDrawData1void (const Rect &, const String &, const char *):Upp::Draw::DrawData(const Rect&,const String&,const char*)Bvoid DrawData(const Rect& r, const String& data, const char *type)\u0003Upp\bDRAWDATA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0002\u0000\u0000Y\u0000\u0000\u0000\u001E\u0002\u0000\u0000\u0000\u0000\u0000\bDrawLine%void (int, int, int, int, int, Color).Upp::Draw::DrawLine(int,int,int,int,int,Color)Xvoid DrawLine(int x1, int y1, int x2, int y2, int width = 0, Color color = DefaultInk())\u0003Upp\bDRAWLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001F\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0002\u0000\u0000M\u0000\u0000\u0000\u001F\u0002\u0000\u0000\u0000\u0000\u0000\bDrawLine\u001Fvoid (Point, Point, int, Color)*Upp::Draw::DrawLine(Point,Point,int,Color)Lvoid DrawLine(Point p1, Point p2, int width = 0, Color color = DefaultInk())\u0003Upp\bDRAWLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000!\u0002\u0000\u0000\u0001\u0000\u0000\u0000!\u0002\u0000\u0000@\u0000\u0000\u0000\"\u0002\u0000\u0000\u0000\u0000\u0000\vDrawEllipse&void (const Rect &, Color, int, Color)3Upp::Draw::DrawEllipse(const Rect&,Color,int,Color)jvoid DrawEllipse(const Rect& r, Color color = DefaultInk(), int pen = Null, Color pencolor = DefaultInk())\u0003Upp\vDRAWELLIPSE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000#\u0002\u0000\u0000\u0001\u0000\u0000\u0000#\u0002\u0000\u0000=\u0000\u0000\u0000$\u0002\u0000\u0000\u0000\u0000\u0000\vDrawEllipse,void (int, int, int, int, Color, int, Color)7Upp::Draw::DrawEllipse(int,int,int,int,Color,int,Color)yvoid DrawEllipse(int x, int y, int cx, int cy, Color color = DefaultInk(), int pen = Null, Color pencolor = DefaultInk())\u0003Upp\vDRAWELLIPSE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000&\u0002\u0000\u0000\u0001\u0000\u0000\u0000&\u0002\u0000\u0000`\u0000\u0000\u0000&\u0002\u0000\u0000\u0000\u0000\u0000\aDrawArc-void (const Rect &, Point, Point, int, Color)5Upp::Draw::DrawArc(const Rect&,Point,Point,int,Color)_void DrawArc(const Rect& rc, Point start, Point end, int width = 0, Color color = DefaultInk())\u0003Upp\aDRAWARC\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000(\u0002\u0000\u0000\u0001\u0000\u0000\u0000(\u0002\u0000\u0000U\u0000\u0000\u0000*\u0002\u0000\u0000\u0000\u0000\u0000\u0010DrawPolyPolyline>void (const Point *, int, const int *, int, int, Color, Color)LUpp::Draw::DrawPolyPolyline(const Point*,int,const int*,int,int,Color,Color)ÿ¡\u0000\u0000\u0000void DrawPolyPolyline(const Point *vertices, int vertex_count, const int *counts, int count_count, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\u0010DRAWPOLYPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0000+\u0002\u0000\u0000R\u0000\u0000\u0000,\u0002\u0000\u0000\u0000\u0000\u0000\u0010DrawPolyPolylineDvoid (const Vector<Point> &, const Vector<int> &, int, Color, Color)HUpp::Draw::DrawPolyPolyline(const Vector&,const Vector&,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolyline(const Vector<Point>& vertices, const Vector<int>& counts, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\u0010DRAWPOLYPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000-\u0002\u0000\u0000\u0001\u0000\u0000\u0000-\u0002\u0000\u0000N\u0000\u0000\u0000.\u0002\u0000\u0000\u0000\u0000\u0000\fDrawPolyline,void (const Point *, int, int, Color, Color)9Upp::Draw::DrawPolyline(const Point*,int,int,Color,Color)rvoid DrawPolyline(const Point *vertices, int count, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\fDRAWPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000/\u0002\u0000\u0000\u0001\u0000\u0000\u0000/\u0002\u0000\u0000N\u0000\u0000\u00000\u0002\u0000\u0000\u0000\u0000\u0000\fDrawPolyline/void (const Vector<Point> &, int, Color, Color)6Upp::Draw::DrawPolyline(const Vector&,int,Color,Color)ovoid DrawPolyline(const Vector<Point>& vertices, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\fDRAWPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u00002\u0002\u0000\u0000\u0001\u0000\u0000\u00002\u0002\u0000\u0000@\u0000\u0000\u00006\u0002\u0000\u0000\u0000\u0000\u0000\u0013DrawPolyPolyPolygon_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)kUpp::Draw::DrawPolyPolyPolygon(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿ*\u0001\u0000\u0000void DrawPolyPolyPolygon(const Point *vertices, int vertex_count, const int *subpolygon_counts, int subpolygon_count_count, const int *disjunct_polygon_counts, int disjunct_polygon_count_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u0013DRAWPOLYPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u00007\u0002\u0000\u0000\u0001\u0000\u0000\u00007\u0002\u0000\u0000\u0000\u0000\u0000:\u0002\u0000\u0000\u0000\u0000\u0000\u0013DrawPolyPolyPolygonhvoid (const Vector<Point> &, const Vector<int> &, const Vector<int> &, Color, int, Color, uint64, Color)fUpp::Draw::DrawPolyPolyPolygon(const Vector&,const Vector&,const Vector&,Color,int,Color,uint64,Color)ÿò\u0000\u0000\u0000void DrawPolyPolyPolygon(const Vector<Point>& vertices, const Vector<int>& subpolygon_counts, const Vector<int>& disjunct_polygon_counts, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u0013DRAWPOLYPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000;\u0002\u0000\u0000\u0001\u0000\u0000\u0000;\u0002\u0000\u0000\u0000\u0000\u0000=\u0002\u0000\u0000\u0000\u0000\u0000\u000FDrawPolyPolygonMvoid (const Point *, int, const int *, int, Color, int, Color, uint64, Color)XUpp::Draw::DrawPolyPolygon(const Point*,int,const int*,int,Color,int,Color,uint64,Color)ÿà\u0000\u0000\u0000void DrawPolyPolygon(const Point *vertices, int vertex_count, const int *subpolygon_counts, int subpolygon_count_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u000FDRAWPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000>\u0002\u0000\u0000\u0001\u0000\u0000\u0000>\u0002\u0000\u0000\u0000\u0000\u0000?\u0002\u0000\u0000\u0000\u0000\u0000\u000FDrawPolyPolygonSvoid (const Vector<Point> &, const Vector<int> &, Color, int, Color, uint64, Color)TUpp::Draw::DrawPolyPolygon(const Vector&,const Vector&,Color,int,Color,uint64,Color)ÿÂ\u0000\u0000\u0000void DrawPolyPolygon(const Vector<Point>& vertices, const Vector<int>& subpolygon_counts, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u000FDRAWPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000@\u0002\u0000\u0000\u0001\u0000\u0000\u0000@\u0002\u0000\u0000}\u0000\u0000\u0000B\u0002\u0000\u0000\u0000\u0000\u0000\fDrawPolygonsMvoid (const Point *, int, const int *, int, Color, int, Color, uint64, Color)UUpp::Draw::DrawPolygons(const Point*,int,const int*,int,Color,int,Color,uint64,Color)ÿ×\u0000\u0000\u0000void DrawPolygons(const Point *vertices, int vertex_count, const int *polygon_counts, int polygon_count_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\fDRAWPOLYGONS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000C\u0002\u0000\u0000\u0001\u0000\u0000\u0000C\u0002\u0000\u0000}\u0000\u0000\u0000D\u0002\u0000\u0000\u0000\u0000\u0000\fDrawPolygonsSvoid (const Vector<Point> &, const Vector<int> &, Color, int, Color, uint64, Color)QUpp::Draw::DrawPolygons(const Vector&,const Vector&,Color,int,Color,uint64,Color)ÿ¼\u0000\u0000\u0000void DrawPolygons(const Vector<Point>& vertices, const Vector<int>& polygon_counts, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\fDRAWPOLYGONS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000E\u0002\u0000\u0000\u0001\u0000\u0000\u0000E\u0002\u0000\u0000|\u0000\u0000\u0000F\u0002\u0000\u0000\u0000\u0000\u0000\vDrawPolygon;void (const Point *, int, Color, int, Color, uint64, Color)EUpp::Draw::DrawPolygon(const Point*,int,Color,int,Color,uint64,Color)ÿ¢\u0000\u0000\u0000void DrawPolygon(const Point *vertices, int vertex_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\vDRAWPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000G\u0002\u0000\u0000\u0001\u0000\u0000\u0000G\u0002\u0000\u0000|\u0000\u0000\u0000H\u0002\u0000\u0000\u0000\u0000\u0000\vDrawPolygon>void (const Vector<Point> &, Color, int, Color, uint64, Color)BUpp::Draw::DrawPolygon(const Vector&,Color,int,Color,uint64,Color)ÿ\u0000\u0000\u0000void DrawPolygon(const Vector<Point>& vertices, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\vDRAWPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000J\u0002\u0000\u0000\u0001\u0000\u0000\u0000J\u0002\u0000\u0000M\u0000\u0000\u0000J\u0002\u0000\u0000\u0001\u0000\u0000\vDrawDrawing$void (const Rect &, const Drawing &)2Upp::Draw::DrawDrawing(const Rect&,const Drawing&)2void DrawDrawing(const Rect& r, const Drawing& iw)\u0003Upp\vDRAWDRAWING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000K\u0002\u0000\u0000\u0001\u0000\u0000\u0000K\u0002\u0000\u0000B\u0000\u0000\u0000K\u0002\u0000\u0000\u0000\u0000\u0000\vDrawDrawing*void (int, int, int, int, const Drawing &)6Upp::Draw::DrawDrawing(int,int,int,int,const Drawing&)Avoid DrawDrawing(int x, int y, int cx, int cy, const Drawing& iw)\u0003Upp\vDRAWDRAWING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000L\u0002\u0000\u0000\u0001\u0000\u0000\u0000L\u0002\u0000\u00002\u0000\u0000\u0000L\u0002\u0000\u0000\u0000\u0000\u0000\vDrawDrawing void (int, int, const Drawing &).Upp::Draw::DrawDrawing(int,int,const Drawing&)1void DrawDrawing(int x, int y, const Drawing& iw)\u0003Upp\vDRAWDRAWING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000N\u0002\u0000\u0000\u0001\u0000\u0000\u0000N\u0002\u0000\u0000P\u0000\u0000\u0000N\u0002\u0000\u0000\u0001\u0000\u0000\fDrawPainting%void (const Rect &, const Painting &)4Upp::Draw::DrawPainting(const Rect&,const Painting&)4void DrawPainting(const Rect& r, const Painting& iw)\u0003Upp\fDRAWPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000O\u0002\u0000\u0000\u0001\u0000\u0000\u0000O\u0002\u0000\u0000D\u0000\u0000\u0000O\u0002\u0000\u0000\u0000\u0000\u0000\fDrawPainting+void (int, int, int, int, const Painting &)8Upp::Draw::DrawPainting(int,int,int,int,const Painting&)Cvoid DrawPainting(int x, int y, int cx, int cy, const Painting& iw)\u0003Upp\fDRAWPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000P\u0002\u0000\u0000\u0001\u0000\u0000\u0000P\u0002\u0000\u00004\u0000\u0000\u0000P\u0002\u0000\u0000\u0000\u0000\u0000\fDrawPainting!void (int, int, const Painting &)0Upp::Draw::DrawPainting(int,int,const Painting&)3void DrawPainting(int x, int y, const Painting& iw)\u0003Upp\fDRAWPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000R\u0002\u0000\u0000\u0001\u0000\u0000\u0000R\u0002\u0000\u0000G\u0000\u0000\u0000S\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextABvoid (int, int, int, const wchar *, Font, Color, int, const int *)HUpp::Draw::DrawTextA(int,int,int,const wchar*,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const wchar *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000T\u0002\u0000\u0000\u0001\u0000\u0000\u0000T\u0002\u0000\u0000G\u0000\u0000\u0000U\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextA=void (int, int, const wchar *, Font, Color, int, const int *)DUpp::Draw::DrawTextA(int,int,const wchar*,Font,Color,int,const int*)ÿ\u007F\u0000\u0000\u0000void DrawTextA(int x, int y, const wchar *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000W\u0002\u0000\u0000\u0001\u0000\u0000\u0000W\u0002\u0000\u0000;\u0000\u0000\u0000X\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextA:void (int, int, const WString &, Font, Color, const int *)BUpp::Draw::DrawTextA(int,int,const WString&,Font,Color,const int*)uvoid DrawTextA(int x, int y, const WString& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Y\u0002\u0000\u0000\u0001\u0000\u0000\u0000Y\u0002\u0000\u0000;\u0000\u0000\u0000Z\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextA?void (int, int, int, const WString &, Font, Color, const int *)FUpp::Draw::DrawTextA(int,int,int,const WString&,Font,Color,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const WString& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\\\u0002\u0000\u0000\u0001\u0000\u0000\u0000\\\u0002\u0000\u0000a\u0000\u0000\u0000]\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextAGvoid (int, int, int, const char *, byte, Font, Color, int, const int *)LUpp::Draw::DrawTextA(int,int,int,const char*,byte,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const char *text, byte charset, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000^\u0002\u0000\u0000\u0001\u0000\u0000\u0000^\u0002\u0000\u0000G\u0000\u0000\u0000_\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextABvoid (int, int, const char *, byte, Font, Color, int, const int *)HUpp::Draw::DrawTextA(int,int,const char*,byte,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, const char *text, byte charset, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000a\u0002\u0000\u0000\u0001\u0000\u0000\u0000a\u0002\u0000\u0000a\u0000\u0000\u0000b\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextAAvoid (int, int, int, const char *, Font, Color, int, const int *)GUpp::Draw::DrawTextA(int,int,int,const char*,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const char *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000c\u0002\u0000\u0000\u0001\u0000\u0000\u0000c\u0002\u0000\u0000G\u0000\u0000\u0000d\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextA<void (int, int, const char *, Font, Color, int, const int *)CUpp::Draw::DrawTextA(int,int,const char*,Font,Color,int,const int*)~void DrawTextA(int x, int y, const char *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000f\u0002\u0000\u0000\u0001\u0000\u0000\u0000f\u0002\u0000\u0000;\u0000\u0000\u0000g\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextA9void (int, int, const String &, Font, Color, const int *)AUpp::Draw::DrawTextA(int,int,const String&,Font,Color,const int*)tvoid DrawTextA(int x, int y, const String& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000h\u0002\u0000\u0000\u0001\u0000\u0000\u0000h\u0002\u0000\u0000;\u0000\u0000\u0000i\u0002\u0000\u0000\u0000\u0000\u0000\tDrawTextA>void (int, int, int, const String &, Font, Color, const int *)EUpp::Draw::DrawTextA(int,int,int,const String&,Font,Color,const int*)ÿ\u007F\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const String& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000k\u0002\u0000\u0000\u0001\u0000\u0000\u0000k\u0002\u0000\u0000:\u0000\u0000\u0000k\u0002\u0000\u0000\u0000\u0000\u0001\u0006SinCos\u001Evoid (int, double &, double &)&Upp::Draw::SinCos(int,double&,double&)9static void SinCos(int angle, double& sina, double& cosa)\u0003Upp\u0006SINCOS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000n\u0002\u0000\u0000\u0001\u0000\u0000\u0000n\u0002\u0000\u0000O\u0000\u0000\u0000n\u0002\u0000\u0000\u0001\u0000\u0001\nSetStdFont\vvoid (Font)\u001BUpp::Draw::SetStdFont(Font)!static void SetStdFont(Font font)\u0003Upp\nSETSTDFONT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000o\u0002\u0000\u0000\u0001\u0000\u0000\u0000o\u0002\u0000\u0000R\u0000\u0000\u0000o\u0002\u0000\u0000\u0001\u0000\u0001\nGetStdFont\aFont ()\u0017Upp::Draw::GetStdFont()\u0018static Font GetStdFont()\u0003Upp\nGETSTDFONT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000p\u0002\u0000\u0000\u0001\u0000\u0000\u0000p\u0002\u0000\u0000V\u0000\u0000\u0000p\u0002\u0000\u0000\u0001\u0000\u0001\u000EGetStdFontSize\aSize ()\u001BUpp::Draw::GetStdFontSize()\u001Cstatic Size GetStdFontSize()\u0003Upp\u000EGETSTDFONTSIZE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000q\u0002\u0000\u0000\u0001\u0000\u0000\u0000q\u0002\u0000\u0000T\u0000\u0000\u0000q\u0002\u0000\u0000\u0001\u0000\u0001\fGetStdFontCy\u0006int ()\u0019Upp::Draw::GetStdFontCy()\u0019static int GetStdFontCy()\u0003Upp\fGETSTDFONTCY\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000r\u0002\u0000\u0000\u0001\u0000\u0000\u0000r\u0002\u0000\u0000N\u0000\u0000\u0000r\u0002\u0000\u0000\u0001\u0000\u0000\rGetPagePixels\rSize () const\u001FUpp::Draw::GetPagePixels()const\u001ASize GetPagePixels() const\u0003Upp\rGETPAGEPIXELS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000u\u0002\u0000\u0000\u0001\u0000\u0000\u0000u\u0002\u0000\u0000h\u0000\u0000\u0000u\u0002\u0000\u0000\u0001\u0000\u0000\nResolveInk\u0013Color (Color) const!Upp::Draw::ResolveInk(Color)const\u001FColor ResolveInk(Color c) const\u0003Upp\nRESOLVEINK\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000v\u0002\u0000\u0000\u0001\u0000\u0000\u0000v\u0002\u0000\u0000$\u0000\u0000\u0000v\u0002\u0000\u0000\u0000\u0001\u0000\rGetDefaultInk\u000EColor () const\u001FUpp::Draw::GetDefaultInk()const\u001BColor GetDefaultInk() const\u0003Upp\rGETDEFAULTINK\tUpp::Draw\tUPP::DRAW\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000y\u0002\u0000\u0000\u0000\u0000\u0000\u0000y\u0002\u0000\u0000F\u0000\u0000\u0000y\u0002\u0000\u0000\u0000\u0000\u0000\u0010DrawImageBandRLE+void (Draw &, int, int, const Image &, int)5Upp::DrawImageBandRLE(Draw&,int,int,const Image&,int)Fvoid DrawImageBandRLE(Draw& w, int x, int y, const Image& m, int minp)\u0003Upp\u0010DRAWIMAGEBANDRLE\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000{\u0002\u0000\u0000\u0000\u0000\u0000\u0000{\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\nDataDrawer\u000FUpp::DataDrawer\u000FUpp::DataDrawer\nDataDrawer\u0003Upp\nDATADRAWER\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0014\u0000\u0000\u0000\u0017\u0000\u0000\u0000|\u0002\u0000\u0000\u0001\u0000\u0000\u0000|\u0002\u0000\u0000!\u0000\u0000\u0000|\u0002\u0000\u0000\u0001\u0000\u0000\aFactory\u0018Upp::DataDrawer::Factory\u0018Upp::DataDrawer::Factory typedef DataDrawer *(*Factory)()\u0003Upp\aFACTORY\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u001E\u0000\u0000\u0000'\u0000\u0000\u0000}\u0002\u0000\u0000\u0001\u0000\u0000\u0000}\u0002\u0000\u00002\u0000\u0000\u0000}\u0002\u0000\u0000\u0000\u0000\u0000\tFactoryFn\u000EDataDrawer *()\u001CUpp::DataDrawer::FactoryFn()1template <class T> static DataDrawer *FactoryFn()\u0003Upp\tFACTORYFN\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000~\u0002\u0000\u0000\u0001\u0000\u0000\u0000~\u0002\u0000\u00001\u0000\u0000\u0000~\u0002\u0000\u0000\u0000\u0000\u0001\tAddFormat\u001Cvoid (const char *, Factory)/Upp::DataDrawer::AddFormat(const char*,Factory)0static void AddFormat(const char *id, Factory f)\u0003Upp\tADDFORMAT\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0015\u0000\u0000\u0000#\u0000\u0000\u0000\u007F\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0002\u0000\u0000(\u0000\u0000\u0000\u007F\u0002\u0000\u0000\u0000\u0000\u0001\u0003Map\u001DVectorMap<String, void *> &()\u0016Upp::DataDrawer::Map()'static VectorMap<String, void *>& Map()\u0003Upp\u0003MAP\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000;\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0004Open\u001Fvoid (const String &, int, int),Upp::DataDrawer::Open(const String&,int,int)-void Open(const String& data, int cx, int cy)\u0003Upp\u0004OPEN\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000*\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0006Render\u0014void (ImageBuffer &)%Upp::DataDrawer::Render(ImageBuffer&)\u001Cvoid Render(ImageBuffer& ib)\u0003Upp\u0006RENDER\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0016\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\v~DataDrawer\avoid ()\u0014Upp::DataDrawer::~()\r~DataDrawer()\u0003Upp\v~DATADRAWER\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u00001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0006Create One<DataDrawer> (const String &)&Upp::DataDrawer::Create(const String&)/static One<DataDrawer> Create(const String& id)\u0003Upp\u0006CREATE\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u001E\u0000\u0000\u0000 \u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u00008\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\bRegister\u0013void (const char *)&Upp::DataDrawer::Register(const char*)7template <class T> static void Register(const char *id)\u0003Upp\bREGISTER\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000°\u0002\u0000\u0000\u0001\u0000\u0000\aDrawing\fUpp::Drawing\fUpp::Drawing:Drawing : public ValueType<Drawing, 49, Moveable<Drawing>>\u0003Upp\aDRAWING\fUpp::Drawing\fUPP::DRAWING\u000EUpp::ValueType\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0004size\u0004Size\u0012Upp::Drawing::size\tSize size\u0003Upp\u0004SIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0004data\u0006String\u0012Upp::Drawing::data\vString data\u0003Upp\u0004DATA\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0003val\nValueArray\u0011Upp::Drawing::val\u000EValueArray val\u0003Upp\u0003VAL\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000;\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\roperator bool\rbool () const\"Upp::Drawing::operator bool()const\u0015operator bool() const\u0003Upp\rOPERATOR BOOL\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u00000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\aGetSize\rSize () const\u001CUpp::Drawing::GetSize()const\u0014Size GetSize() const\u0003Upp\aGETSIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000.\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\aSetSize\vvoid (Size)\u001BUpp::Drawing::SetSize(Size)\u0015void SetSize(Size sz)\u0003Upp\aSETSIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u00008\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\aSetSize\u000Fvoid (int, int)\u001EUpp::Drawing::SetSize(int,int)\u001Cvoid SetSize(int cx, int cy)\u0003Upp\aSETSIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000%\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\tRatioSize\u0015Size (int, int) const%Upp::Drawing::RatioSize(int,int)const$Size RatioSize(int cx, int cy) const\u0003Upp\tRATIOSIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000C\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\tRatioSize\u0011Size (Size) const\"Upp::Drawing::RatioSize(Size)const\u001DSize RatioSize(Size sz) const\u0003Upp\tRATIOSIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000>\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u0015Upp::Drawing::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0019\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0006Append\u0010void (Drawing &)\u001EUpp::Drawing::Append(Drawing&)\u0018void Append(Drawing& dw)\u0003Upp\u0006APPEND\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000 \u0002\u0000\u0000\u0001\u0000\u0000\u0000 \u0002\u0000\u0000\u001A\u0000\u0000\u0000 \u0002\u0000\u0000\u0000\u0000\u0000\tSerialize\u000Fvoid (Stream &) Upp::Drawing::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000¡\u0002\u0000\u0000\u0001\u0000\u0000\u0000¡\u0002\u0000\u0000B\u0000\u0000\u0000¡\u0002\u0000\u0000\u0001\u0000\u0000\u0006Xmlize\u000Evoid (XmlIO &)\u001CUpp::Drawing::Xmlize(XmlIO&)\u0017void Xmlize(XmlIO& xio)\u0003Upp\u0006XMLIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000¢\u0002\u0000\u0000\u0001\u0000\u0000\u0000¢\u0002\u0000\u0000C\u0000\u0000\u0000¢\u0002\u0000\u0000\u0001\u0000\u0000\aJsonize\u000Fvoid (JsonIO &)\u001EUpp::Drawing::Jsonize(JsonIO&)\u0019void Jsonize(JsonIO& jio)\u0003Upp\aJSONIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000¤\u0002\u0000\u0000\u0001\u0000\u0000\u0000¤\u0002\u0000\u0000F\u0000\u0000\u0000¤\u0002\u0000\u0000\u0001\u0000\u0000\u000EIsNullInstance\rbool () const#Upp::Drawing::IsNullInstance()const\u001Bbool IsNullInstance() const\u0003Upp\u000EISNULLINSTANCE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000¥\u0002\u0000\u0000\u0001\u0000\u0000\u0000¥\u0002\u0000\u0000J\u0000\u0000\u0000¥\u0002\u0000\u0000\u0001\u0000\u0000\aSetNull\avoid ()\u0017Upp::Drawing::SetNull()\u000Evoid SetNull()\u0003Upp\aSETNULL\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000§\u0002\u0000\u0000\u0001\u0000\u0000\u0000§\u0002\u0000\u0000h\u0000\u0000\u0000§\u0002\u0000\u0000\u0001\u0000\u0000\noperator==\u001Cbool (const Drawing &) const-Upp::Drawing::operator==(const Drawing&)const\rbool operator\u0003Upp\nOPERATOR==\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000¨\u0002\u0000\u0000\u0001\u0000\u0000\u0000¨\u0002\u0000\u0000S\u0000\u0000\u0000¨\u0002\u0000\u0000\u0001\u0000\u0000\bToString\u000FString () const\u001DUpp::Drawing::ToString()const\u0017String ToString() const\u0003Upp\bTOSTRING\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000©\u0002\u0000\u0000\u0001\u0000\u0000\u0000©\u0002\u0000\u0000N\u0000\u0000\u0000©\u0002\u0000\u0000\u0001\u0000\u0000\fGetHashValue\u000Fhash_t () const!Upp::Drawing::GetHashValue()const\u001Bhash_t GetHashValue() const\u0003Upp\fGETHASHVALUE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000«\u0002\u0000\u0000\u0001\u0000\u0000\u0000«\u0002\u0000\u0000J\u0000\u0000\u0000«\u0002\u0000\u0000\u0001\u0000\u0000\u000Eoperator Value\u000EValue () const#Upp::Drawing::operator Value()const\u0016operator Value() const\u0003Upp\u000EOPERATOR VALUE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000¬\u0002\u0000\u0000\u0001\u0000\u0000\u0000¬\u0002\u0000\u0000K\u0000\u0000\u0000¬\u0002\u0000\u0000\u0001\u0000\u0000\aDrawing\u0014void (const Value &)#Upp::Drawing::Drawing(const Value&)\u0019Drawing(const Value& src)\u0003Upp\aDRAWING\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000®\u0002\u0000\u0000\u0001\u0000\u0000\u0000®\u0002\u0000\u0000:\u0000\u0000\u0000®\u0002\u0000\u0000\u0001\u0000\u0000\aDrawing\avoid ()\u0017Upp::Drawing::Drawing()\tDrawing()\u0003Upp\aDRAWING\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0002\u0000\u0000\u0001\u0000\u0000\u0000¯\u0002\u0000\u0000:\u0000\u0000\u0000¯\u0002\u0000\u0000\u0001\u0000\u0000\aDrawing\u0015void (const Nuller &)$Upp::Drawing::Drawing(const Nuller&)\u0016Drawing(const Nuller&)\u0003Upp\aDRAWING\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000²\u0002\u0000\u0000\u0000\u0000\u0000\u0000²\u0002\u0000\u0000\u0001\u0000\u0000\u0000ë\u0002\u0000\u0000\u0001\u0000\u0000\vDrawingDraw\u0010Upp::DrawingDraw\u0010Upp::DrawingDraw\u0019DrawingDraw : public Draw\u0003Upp\vDRAWINGDRAW\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\tUpp::Draw\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000´\u0002\u0000\u0000\u0001\u0000\u0000\u0000´\u0002\u0000\u0000\u001E\u0000\u0000\u0000´\u0002\u0000\u0000\u0000\u0001\u0000\aGetInfo\u000Edword () const Upp::DrawingDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000µ\u0002\u0000\u0000\u0001\u0000\u0000\u0000µ\u0002\u0000\u0000\"\u0000\u0000\u0000µ\u0002\u0000\u0000\u0000\u0001\u0000\vGetPageSize\rSize () const$Upp::DrawingDraw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000¶\u0002\u0000\u0000\u0001\u0000\u0000\u0000¶\u0002\u0000\u0000#\u0000\u0000\u0000¶\u0002\u0000\u0000\u0000\u0001\u0000\fGetPaintRect\rRect () const%Upp::DrawingDraw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¸\u0002\u0000\u0000\u0001\u0000\u0000\u0000¸\u0002\u0000\u0000\u0017\u0000\u0000\u0000¸\u0002\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u001BUpp::DrawingDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¹\u0002\u0000\u0000\u0001\u0000\u0000\u0000¹\u0002\u0000\u0000\u0015\u0000\u0000\u0000¹\u0002\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u0019Upp::DrawingDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000º\u0002\u0000\u0000\u0001\u0000\u0000\u0000º\u0002\u0000\u0000\u001F\u0000\u0000\u0000º\u0002\u0000\u0000\u0000\u0001\u0000\bOffsetOp\fvoid (Point)!Upp::DrawingDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000»\u0002\u0000\u0000\u0001\u0000\u0000\u0000»\u0002\u0000\u0000#\u0000\u0000\u0000»\u0002\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)%Upp::DrawingDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¼\u0002\u0000\u0000\u0001\u0000\u0000\u0000¼\u0002\u0000\u0000&\u0000\u0000\u0000¼\u0002\u0000\u0000\u0000\u0001\u0000\tClipoffOp\u0013bool (const Rect &)(Upp::DrawingDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000½\u0002\u0000\u0000\u0001\u0000\u0000\u0000½\u0002\u0000\u0000*\u0000\u0000\u0000½\u0002\u0000\u0000\u0000\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &),Upp::DrawingDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¾\u0002\u0000\u0000\u0001\u0000\u0000\u0000¾\u0002\u0000\u0000,\u0000\u0000\u0000¾\u0002\u0000\u0000\u0000\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &).Upp::DrawingDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¿\u0002\u0000\u0000\u0001\u0000\u0000\u0000¿\u0002\u0000\u0000/\u0000\u0000\u0000¿\u0002\u0000\u0000\u0000\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const0Upp::DrawingDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Á\u0002\u0000\u0000\u0001\u0000\u0000\u0000Á\u0002\u0000\u0000C\u0000\u0000\u0000Á\u0002\u0000\u0000\u0000\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)3Upp::DrawingDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Â\u0002\u0000\u0000\u0001\u0000\u0000\u0000Â\u0002\u0000\u0000g\u0000\u0000\u0000Â\u0002\u0000\u0000\u0000\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)MUpp::DrawingDraw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ã\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0002\u0000\u0000Z\u0000\u0000\u0000Ã\u0002\u0000\u0000\u0000\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)GUpp::DrawingDraw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ä\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0002\u0000\u0000P\u0000\u0000\u0000Ä\u0002\u0000\u0000\u0000\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)7Upp::DrawingDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Å\u0002\u0000\u0000\u0001\u0000\u0000\u0000Å\u0002\u0000\u0000E\u0000\u0000\u0000Ç\u0002\u0000\u0000\u0000\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)UUpp::DrawingDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000È\u0002\u0000\u0000\u0001\u0000\u0000\u0000È\u0002\u0000\u0000@\u0000\u0000\u0000Ì\u0002\u0000\u0000\u0000\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)tUpp::DrawingDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Í\u0002\u0000\u0000\u0001\u0000\u0000\u0000Í\u0002\u0000\u0000P\u0000\u0000\u0000Í\u0002\u0000\u0000\u0000\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)<Upp::DrawingDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Î\u0002\u0000\u0000\u0001\u0000\u0000\u0000Î\u0002\u0000\u0000X\u0000\u0000\u0000Î\u0002\u0000\u0000\u0000\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)>Upp::DrawingDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Ovoid DrawArcOp(const Rect& rc, Point start, Point end, int pen, Color pencolor)\u0003Upp\tDRAWARCOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ï\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0002\u0000\u00006\u0000\u0000\u0000Ð\u0002\u0000\u0000\u0000\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)PUpp::DrawingDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ò\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0002\u0000\u0000A\u0000\u0000\u0000Ò\u0002\u0000\u0000\u0000\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &);Upp::DrawingDraw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ó\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0002\u0000\u0000C\u0000\u0000\u0000Ó\u0002\u0000\u0000\u0000\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)=Upp::DrawingDraw::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Õ\u0002\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0002\u0000\u0000(\u0000\u0000\u0000Õ\u0002\u0000\u0000\u0000\u0001\u0000\u0006Escape\u0015void (const String &)'Upp::DrawingDraw::Escape(const String&)\u001Fvoid Escape(const String& data)\u0003Upp\u0006ESCAPE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ø\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0002\u0000\u0000\u0012\u0000\u0000\u0000Ø\u0002\u0000\u0000\u0001\u0000\u0000\u0004size\u0004Size\u0016Upp::DrawingDraw::size\tSize size\u0003Upp\u0004SIZE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ù\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0002\u0000\u0000\u0012\u0000\u0000\u0000Ù\u0002\u0000\u0000\u0001\u0000\u0000\u0004dots\u0004bool\u0016Upp::DrawingDraw::dots\tbool dots\u0003Upp\u0004DOTS\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ú\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0002\u0000\u0000\u0015\u0000\u0000\u0000Ú\u0002\u0000\u0000\u0001\u0000\u0000\adrawing\fStringStream\u0019Upp::DrawingDraw::drawing\u0014StringStream drawing\u0003Upp\aDRAWING\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000Û\u0002\u0000\u0000\u0001\u0000\u0000\u0000Û\u0002\u0000\u0000\u0011\u0000\u0000\u0000Û\u0002\u0000\u0000\u0001\u0000\u0000\u0003val\nValueArray\u0015Upp::DrawingDraw::val\u000EValueArray val\u0003Upp\u0003VAL\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ý\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0002\u0000\u0000!\u0000\u0000\u0000Ý\u0002\u0000\u0000\u0000\u0000\u0000\tDrawingOp\rStream &(int) Upp::DrawingDraw::DrawingOp(int)\u001BStream& DrawingOp(int code)\u0003Upp\tDRAWINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000à\u0002\u0000\u0000\u0001\u0000\u0000\u0000à\u0002\u0000\u00002\u0000\u0000\u0000à\u0002\u0000\u0000\u0000\u0000\u0000\u0006Create\u0015void (int, int, bool)&Upp::DrawingDraw::Create(int,int,bool)-void Create(int cx, int cy, bool dots = true)\u0003Upp\u0006CREATE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000á\u0002\u0000\u0000\u0001\u0000\u0000\u0000á\u0002\u0000\u0000+\u0000\u0000\u0000á\u0002\u0000\u0000\u0000\u0000\u0000\u0006Create\u0011void (Size, bool)#Upp::DrawingDraw::Create(Size,bool)&void Create(Size sz, bool dots = true)\u0003Upp\u0006CREATE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ã\u0002\u0000\u0000\u0001\u0000\u0000\u0000ã\u0002\u0000\u0000;\u0000\u0000\u0000ã\u0002\u0000\u0000\u0001\u0000\u0000\aGetSize\rSize () const Upp::DrawingDraw::GetSize()const\u0014Size GetSize() const\u0003Upp\aGETSIZE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000å\u0002\u0000\u0000\u0001\u0000\u0000\u0000å\u0002\u0000\u0000\u0015\u0000\u0000\u0000å\u0002\u0000\u0000\u0000\u0000\u0000\tGetResult\nDrawing ()\u001DUpp::DrawingDraw::GetResult()\u0013Drawing GetResult()\u0003Upp\tGETRESULT\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000æ\u0002\u0000\u0000\u0001\u0000\u0000\u0000æ\u0002\u0000\u0000B\u0000\u0000\u0000æ\u0002\u0000\u0000\u0001\u0000\u0000\u0010operator Drawing\nDrawing ()$Upp::DrawingDraw::operator Drawing()\u0012operator Drawing()\u0003Upp\u0010OPERATOR DRAWING\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0002\u0000\u0000\u0001\u0000\u0000\u0000è\u0002\u0000\u0000\u000E\u0000\u0000\u0000è\u0002\u0000\u0000\u0000\u0000\u0000\vDrawingDraw\avoid ()\u001FUpp::DrawingDraw::DrawingDraw()\rDrawingDraw()\u0003Upp\vDRAWINGDRAW\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0002\u0000\u0000\u0001\u0000\u0000\u0000é\u0002\u0000\u0000.\u0000\u0000\u0000é\u0002\u0000\u0000\u0000\u0000\u0000\vDrawingDraw\u0015void (int, int, bool)+Upp::DrawingDraw::DrawingDraw(int,int,bool)-DrawingDraw(int cx, int cy, bool dots = true)\u0003Upp\vDRAWINGDRAW\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000ê\u0002\u0000\u0000\u0001\u0000\u0000\u0000ê\u0002\u0000\u0000'\u0000\u0000\u0000ê\u0002\u0000\u0000\u0000\u0000\u0000\vDrawingDraw\u0011void (Size, bool)(Upp::DrawingDraw::DrawingDraw(Size,bool)&DrawingDraw(Size sz, bool dots = true)\u0003Upp\vDRAWINGDRAW\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000í\u0002\u0000\u0000\u0000\u0000\u0000\u0000í\u0002\u0000\u0000\u0001\u0000\u0000\u0000\r\u0003\u0000\u0000\u0001\u0000\u0000\aNilDraw\fUpp::NilDraw\fUpp::NilDraw\u0015NilDraw : public Draw\u0003Upp\aNILDRAW\fUpp::NilDraw\fUPP::NILDRAW\tUpp::Draw\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000ï\u0002\u0000\u0000\u0001\u0000\u0000\u0000ï\u0002\u0000\u0000\u001E\u0000\u0000\u0000ï\u0002\u0000\u0000\u0000\u0001\u0000\aGetInfo\u000Edword () const\u001CUpp::NilDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000ð\u0002\u0000\u0000\u0001\u0000\u0000\u0000ð\u0002\u0000\u0000\"\u0000\u0000\u0000ð\u0002\u0000\u0000\u0000\u0001\u0000\vGetPageSize\rSize () const Upp::NilDraw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ñ\u0002\u0000\u0000\u0001\u0000\u0000\u0000ñ\u0002\u0000\u0000\u0017\u0000\u0000\u0000ñ\u0002\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u0017Upp::NilDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ò\u0002\u0000\u0000\u0001\u0000\u0000\u0000ò\u0002\u0000\u0000\u0015\u0000\u0000\u0000ò\u0002\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u0015Upp::NilDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ó\u0002\u0000\u0000\u0001\u0000\u0000\u0000ó\u0002\u0000\u0000\u001F\u0000\u0000\u0000ó\u0002\u0000\u0000\u0000\u0001\u0000\bOffsetOp\fvoid (Point)\u001DUpp::NilDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ô\u0002\u0000\u0000\u0001\u0000\u0000\u0000ô\u0002\u0000\u0000#\u0000\u0000\u0000ô\u0002\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)!Upp::NilDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000õ\u0002\u0000\u0000\u0001\u0000\u0000\u0000õ\u0002\u0000\u0000&\u0000\u0000\u0000õ\u0002\u0000\u0000\u0000\u0001\u0000\tClipoffOp\u0013bool (const Rect &)$Upp::NilDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ö\u0002\u0000\u0000\u0001\u0000\u0000\u0000ö\u0002\u0000\u0000*\u0000\u0000\u0000ö\u0002\u0000\u0000\u0000\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)(Upp::NilDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000÷\u0002\u0000\u0000\u0001\u0000\u0000\u0000÷\u0002\u0000\u0000,\u0000\u0000\u0000÷\u0002\u0000\u0000\u0000\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)*Upp::NilDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ø\u0002\u0000\u0000\u0001\u0000\u0000\u0000ø\u0002\u0000\u0000/\u0000\u0000\u0000ø\u0002\u0000\u0000\u0000\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const,Upp::NilDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ù\u0002\u0000\u0000\u0001\u0000\u0000\u0000ù\u0002\u0000\u0000\"\u0000\u0000\u0000ù\u0002\u0000\u0000\u0000\u0001\u0000\fGetPaintRect\rRect () const!Upp::NilDraw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000û\u0002\u0000\u0000\u0001\u0000\u0000\u0000û\u0002\u0000\u0000C\u0000\u0000\u0000û\u0002\u0000\u0000\u0000\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)/Upp::NilDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ü\u0002\u0000\u0000\u0001\u0000\u0000\u0000ü\u0002\u0000\u0000g\u0000\u0000\u0000ü\u0002\u0000\u0000\u0000\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)IUpp::NilDraw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ý\u0002\u0000\u0000\u0001\u0000\u0000\u0000ý\u0002\u0000\u0000Z\u0000\u0000\u0000ý\u0002\u0000\u0000\u0000\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)CUpp::NilDraw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000þ\u0002\u0000\u0000\u0001\u0000\u0000\u0000þ\u0002\u0000\u0000P\u0000\u0000\u0000þ\u0002\u0000\u0000\u0000\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)3Upp::NilDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ÿ\u0002\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0002\u0000\u0000E\u0000\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)QUpp::NilDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0002\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0003\u0000\u0000@\u0000\u0000\u0000\u0006\u0003\u0000\u0000\u0000\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)pUpp::NilDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\a\u0003\u0000\u0000\u0001\u0000\u0000\u0000\a\u0003\u0000\u0000W\u0000\u0000\u0000\a\u0003\u0000\u0000\u0000\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color):Upp::NilDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\b\u0003\u0000\u0000\u0001\u0000\u0000\u0000\b\u0003\u0000\u0000P\u0000\u0000\u0000\b\u0003\u0000\u0000\u0000\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)8Upp::NilDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\t\u0003\u0000\u0000\u0001\u0000\u0000\u0000\t\u0003\u0000\u00006\u0000\u0000\u0000\n\u0003\u0000\u0000\u0000\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)LUpp::NilDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\v\u0003\u0000\u0000\u0001\u0000\u0000\u0000\v\u0003\u0000\u0000A\u0000\u0000\u0000\v\u0003\u0000\u0000\u0000\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)7Upp::NilDraw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\f\u0003\u0000\u0000\u0001\u0000\u0000\u0000\f\u0003\u0000\u0000C\u0000\u0000\u0000\f\u0003\u0000\u0000\u0000\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)9Upp::NilDraw::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u000F\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0003\u0000\u0000\u0001\u0000\u0000\u0000B\u0003\u0000\u0000\u0001\u0000\u0000\tDrawProxy\u000EUpp::DrawProxy\u000EUpp::DrawProxy\u0010DrawProxy : Draw\u0003Upp\tDRAWPROXY\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\tUpp::Draw\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0010\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0003\u0000\u0000\n\u0000\u0000\u0000\u0010\u0003\u0000\u0000\u0001\u0000\u0000\u0003ptr\u0006Draw *\u0013Upp::DrawProxy::ptr\tDraw *ptr\u0003Upp\u0003PTR\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0003\u0000\u0000%\u0000\u0000\u0000\u0012\u0003\u0000\u0000\u0001\u0000\u0000\tSetTarget\rvoid (Draw *) Upp::DrawProxy::SetTarget(Draw*)\u0017void SetTarget(Draw *w)\u0003Upp\tSETTARGET\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0014\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0003\u0000\u0000\u001E\u0000\u0000\u0000\u0014\u0003\u0000\u0000\u0000\u0001\u0000\aGetInfo\u000Edword () const\u001EUpp::DrawProxy::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0016\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0003\u0000\u0000!\u0000\u0000\u0000\u0016\u0003\u0000\u0000\u0000\u0001\u0000\vGetPageSize\rSize () const\"Upp::DrawProxy::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0017\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0003\u0000\u0000\u0019\u0000\u0000\u0000\u0017\u0003\u0000\u0000\u0000\u0001\u0000\tStartPage\avoid ()\u001BUpp::DrawProxy::StartPage()\u0010void StartPage()\u0003Upp\tSTARTPAGE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0018\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0003\u0000\u0000\u0017\u0000\u0000\u0000\u0018\u0003\u0000\u0000\u0000\u0001\u0000\aEndPage\avoid ()\u0019Upp::DrawProxy::EndPage()\u000Evoid EndPage()\u0003Upp\aENDPAGE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001A\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0003\u0000\u0000\u0017\u0000\u0000\u0000\u001A\u0003\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u0019Upp::DrawProxy::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001B\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0003\u0000\u0000\u0015\u0000\u0000\u0000\u001B\u0003\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u0017Upp::DrawProxy::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001C\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0003\u0000\u0000\u001F\u0000\u0000\u0000\u001C\u0003\u0000\u0000\u0000\u0001\u0000\bOffsetOp\fvoid (Point)\u001FUpp::DrawProxy::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001D\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0003\u0000\u0000#\u0000\u0000\u0000\u001D\u0003\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)#Upp::DrawProxy::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001E\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0003\u0000\u0000&\u0000\u0000\u0000\u001E\u0003\u0000\u0000\u0000\u0001\u0000\tClipoffOp\u0013bool (const Rect &)&Upp::DrawProxy::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001F\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0003\u0000\u0000*\u0000\u0000\u0000\u001F\u0003\u0000\u0000\u0000\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)*Upp::DrawProxy::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000 \u0003\u0000\u0000\u0001\u0000\u0000\u0000 \u0003\u0000\u0000,\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &),Upp::DrawProxy::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000!\u0003\u0000\u0000\u0001\u0000\u0000\u0000!\u0003\u0000\u0000/\u0000\u0000\u0000!\u0003\u0000\u0000\u0000\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const.Upp::DrawProxy::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\"\u0003\u0000\u0000\u0001\u0000\u0000\u0000\"\u0003\u0000\u0000\"\u0000\u0000\u0000\"\u0003\u0000\u0000\u0000\u0001\u0000\fGetPaintRect\rRect () const#Upp::DrawProxy::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000$\u0003\u0000\u0000\u0001\u0000\u0000\u0000$\u0003\u0000\u0000C\u0000\u0000\u0000$\u0003\u0000\u0000\u0000\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)1Upp::DrawProxy::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000%\u0003\u0000\u0000\u0001\u0000\u0000\u0000%\u0003\u0000\u0000I\u0000\u0000\u0000%\u0003\u0000\u0000\u0000\u0001\u0000\u000ESysDrawImageOp%void (int, int, const Image &, Color):Upp::DrawProxy::SysDrawImageOp(int,int,const Image&,Color)@void SysDrawImageOp(int x, int y, const Image& img, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000&\u0003\u0000\u0000\u0001\u0000\u0000\u0000&\u0003\u0000\u0000Z\u0000\u0000\u0000&\u0003\u0000\u0000\u0000\u0001\u0000\u000ESysDrawImageOp3void (int, int, const Image &, const Rect &, Color)FUpp::DrawProxy::SysDrawImageOp(int,int,const Image&,const Rect&,Color)Qvoid SysDrawImageOp(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000'\u0003\u0000\u0000\u0001\u0000\u0000\u0000'\u0003\u0000\u0000g\u0000\u0000\u0000'\u0003\u0000\u0000\u0000\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)KUpp::DrawProxy::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000(\u0003\u0000\u0000\u0001\u0000\u0000\u0000(\u0003\u0000\u0000Z\u0000\u0000\u0000(\u0003\u0000\u0000\u0000\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)EUpp::DrawProxy::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000)\u0003\u0000\u0000\u0001\u0000\u0000\u0000)\u0003\u0000\u0000P\u0000\u0000\u0000)\u0003\u0000\u0000\u0000\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)5Upp::DrawProxy::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000+\u0003\u0000\u0000\u0001\u0000\u0000\u0000+\u0003\u0000\u0000E\u0000\u0000\u0000-\u0003\u0000\u0000\u0000\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)SUpp::DrawProxy::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000.\u0003\u0000\u0000\u0001\u0000\u0000\u0000.\u0003\u0000\u0000@\u0000\u0000\u00002\u0003\u0000\u0000\u0000\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)rUpp::DrawProxy::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00003\u0003\u0000\u0000\u0001\u0000\u0000\u00003\u0003\u0000\u0000W\u0000\u0000\u00003\u0003\u0000\u0000\u0000\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)<Upp::DrawProxy::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00005\u0003\u0000\u0000\u0001\u0000\u0000\u00005\u0003\u0000\u0000P\u0000\u0000\u00005\u0003\u0000\u0000\u0000\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color):Upp::DrawProxy::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00006\u0003\u0000\u0000\u0001\u0000\u0000\u00006\u0003\u0000\u00006\u0000\u0000\u00007\u0003\u0000\u0000\u0000\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)NUpp::DrawProxy::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00008\u0003\u0000\u0000\u0001\u0000\u0000\u00008\u0003\u0000\u0000A\u0000\u0000\u00008\u0003\u0000\u0000\u0000\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)9Upp::DrawProxy::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00009\u0003\u0000\u0000\u0001\u0000\u0000\u00009\u0003\u0000\u0000C\u0000\u0000\u00009\u0003\u0000\u0000\u0000\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &);Upp::DrawProxy::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000;\u0003\u0000\u0000\u0001\u0000\u0000\u0000;\u0003\u0000\u0000\"\u0000\u0000\u0000;\u0003\u0000\u0000\u0000\u0001\u0000\fGetNativeDpi\rSize () const#Upp::DrawProxy::GetNativeDpi()const\u0019Size GetNativeDpi() const\u0003Upp\fGETNATIVEDPI\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000<\u0003\u0000\u0000\u0001\u0000\u0000\u0000<\u0003\u0000\u0000\u001B\u0000\u0000\u0000<\u0003\u0000\u0000\u0000\u0001\u0000\vBeginNative\avoid ()\u001DUpp::DrawProxy::BeginNative()\u0012void BeginNative()\u0003Upp\vBEGINNATIVE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000=\u0003\u0000\u0000\u0001\u0000\u0000\u0000=\u0003\u0000\u0000\u0019\u0000\u0000\u0000=\u0003\u0000\u0000\u0000\u0001\u0000\tEndNative\avoid ()\u001BUpp::DrawProxy::EndNative()\u0010void EndNative()\u0003Upp\tENDNATIVE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000?\u0003\u0000\u0000\u0001\u0000\u0000\u0000?\u0003\u0000\u0000#\u0000\u0000\u0000?\u0003\u0000\u0000\u0000\u0001\u0000\rGetCloffLevel\fint () const$Upp::DrawProxy::GetCloffLevel()const\u0019int GetCloffLevel() const\u0003Upp\rGETCLOFFLEVEL\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000A\u0003\u0000\u0000\u0001\u0000\u0000\u0000A\u0003\u0000\u0000(\u0000\u0000\u0000A\u0003\u0000\u0000\u0000\u0001\u0000\u0006Escape\u0015void (const String &)%Upp::DrawProxy::Escape(const String&)\u001Fvoid Escape(const String& data)\u0003Upp\u0006ESCAPE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000D\u0003\u0000\u0000\u0000\u0000\u0000\u0000D\u0003\u0000\u0000\u0001\u0000\u0000\u0000r\u0003\u0000\u0000\u0001\u0000\u0000\fImageAnyDraw\u0011Upp::ImageAnyDraw\u0011Upp::ImageAnyDraw\u001AImageAnyDraw : public Draw\u0003Upp\fIMAGEANYDRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\tUpp::Draw\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000E\u0003\u0000\u0000\u0001\u0000\u0000\u0000E\u0003\u0000\u0000\v\u0000\u0000\u0000E\u0003\u0000\u0000\u0001\u0000\u0000\u0004draw\u0006Draw *\u0017Upp::ImageAnyDraw::draw\nDraw *draw\u0003Upp\u0004DRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0003\u0000\u0000\u0001\u0000\u0000\u0000G\u0003\u0000\u0000\u0013\u0000\u0000\u0000G\u0003\u0000\u0000\u0000\u0000\u0000\u0004Init\vvoid (Size)\u001DUpp::ImageAnyDraw::Init(Size)\u0012void Init(Size sz)\u0003Upp\u0004INIT\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000J\u0003\u0000\u0000\u0001\u0000\u0000\u0000J\u0003\u0000\u0000\u001E\u0000\u0000\u0000J\u0003\u0000\u0000\u0000\u0001\u0000\aGetInfo\u000Edword () const!Upp::ImageAnyDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000K\u0003\u0000\u0000\u0001\u0000\u0000\u0000K\u0003\u0000\u0000\"\u0000\u0000\u0000K\u0003\u0000\u0000\u0000\u0001\u0000\vGetPageSize\rSize () const%Upp::ImageAnyDraw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000L\u0003\u0000\u0000\u0001\u0000\u0000\u0000L\u0003\u0000\u0000\u0017\u0000\u0000\u0000L\u0003\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u001CUpp::ImageAnyDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000M\u0003\u0000\u0000\u0001\u0000\u0000\u0000M\u0003\u0000\u0000\u0015\u0000\u0000\u0000M\u0003\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u001AUpp::ImageAnyDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000N\u0003\u0000\u0000\u0001\u0000\u0000\u0000N\u0003\u0000\u0000\u001F\u0000\u0000\u0000N\u0003\u0000\u0000\u0000\u0001\u0000\bOffsetOp\fvoid (Point)\"Upp::ImageAnyDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000O\u0003\u0000\u0000\u0001\u0000\u0000\u0000O\u0003\u0000\u0000#\u0000\u0000\u0000O\u0003\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)&Upp::ImageAnyDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000P\u0003\u0000\u0000\u0001\u0000\u0000\u0000P\u0003\u0000\u0000&\u0000\u0000\u0000P\u0003\u0000\u0000\u0000\u0001\u0000\tClipoffOp\u0013bool (const Rect &))Upp::ImageAnyDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Q\u0003\u0000\u0000\u0001\u0000\u0000\u0000Q\u0003\u0000\u0000*\u0000\u0000\u0000Q\u0003\u0000\u0000\u0000\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)-Upp::ImageAnyDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000R\u0003\u0000\u0000\u0001\u0000\u0000\u0000R\u0003\u0000\u0000,\u0000\u0000\u0000R\u0003\u0000\u0000\u0000\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)/Upp::ImageAnyDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000S\u0003\u0000\u0000\u0001\u0000\u0000\u0000S\u0003\u0000\u0000/\u0000\u0000\u0000S\u0003\u0000\u0000\u0000\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const1Upp::ImageAnyDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000T\u0003\u0000\u0000\u0001\u0000\u0000\u0000T\u0003\u0000\u0000\"\u0000\u0000\u0000T\u0003\u0000\u0000\u0000\u0001\u0000\fGetPaintRect\rRect () const&Upp::ImageAnyDraw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000V\u0003\u0000\u0000\u0001\u0000\u0000\u0000V\u0003\u0000\u0000C\u0000\u0000\u0000V\u0003\u0000\u0000\u0000\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)4Upp::ImageAnyDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000W\u0003\u0000\u0000\u0001\u0000\u0000\u0000W\u0003\u0000\u0000g\u0000\u0000\u0000W\u0003\u0000\u0000\u0000\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)NUpp::ImageAnyDraw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000X\u0003\u0000\u0000\u0001\u0000\u0000\u0000X\u0003\u0000\u0000Z\u0000\u0000\u0000X\u0003\u0000\u0000\u0000\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)HUpp::ImageAnyDraw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Y\u0003\u0000\u0000\u0001\u0000\u0000\u0000Y\u0003\u0000\u0000P\u0000\u0000\u0000Y\u0003\u0000\u0000\u0000\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)8Upp::ImageAnyDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Z\u0003\u0000\u0000\u0001\u0000\u0000\u0000Z\u0003\u0000\u0000E\u0000\u0000\u0000\\\u0003\u0000\u0000\u0000\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)VUpp::ImageAnyDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000]\u0003\u0000\u0000\u0001\u0000\u0000\u0000]\u0003\u0000\u0000@\u0000\u0000\u0000a\u0003\u0000\u0000\u0000\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)uUpp::ImageAnyDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000b\u0003\u0000\u0000\u0001\u0000\u0000\u0000b\u0003\u0000\u0000W\u0000\u0000\u0000b\u0003\u0000\u0000\u0000\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)?Upp::ImageAnyDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000c\u0003\u0000\u0000\u0001\u0000\u0000\u0000c\u0003\u0000\u0000P\u0000\u0000\u0000c\u0003\u0000\u0000\u0000\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)=Upp::ImageAnyDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000d\u0003\u0000\u0000\u0001\u0000\u0000\u0000d\u0003\u0000\u00006\u0000\u0000\u0000e\u0003\u0000\u0000\u0000\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)QUpp::ImageAnyDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000f\u0003\u0000\u0000\u0001\u0000\u0000\u0000f\u0003\u0000\u0000A\u0000\u0000\u0000f\u0003\u0000\u0000\u0000\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)<Upp::ImageAnyDraw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000g\u0003\u0000\u0000\u0001\u0000\u0000\u0000g\u0003\u0000\u0000C\u0000\u0000\u0000g\u0003\u0000\u0000\u0000\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)>Upp::ImageAnyDraw::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000j\u0003\u0000\u0000\u0001\u0000\u0000\u0000j\u0003\u0000\u0000\u001A\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0001\vIsAvailable\abool () Upp::ImageAnyDraw::IsAvailable()\u0019static bool IsAvailable()\u0003Upp\vISAVAILABLE\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0003\u0000\u0000\u0001\u0000\u0000\u0000l\u0003\u0000\u0000\u0017\u0000\u0000\u0000l\u0003\u0000\u0000\u0000\u0000\u0000\u000Eoperator Image\u000EImage () const(Upp::ImageAnyDraw::operator Image()const\u0016operator Image() const\u0003Upp\u000EOPERATOR IMAGE\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0003\u0000\u0000\u0001\u0000\u0000\u0000n\u0003\u0000\u0000\u0016\u0000\u0000\u0000n\u0003\u0000\u0000\u0000\u0000\u0000\fImageAnyDraw\vvoid (Size)%Upp::ImageAnyDraw::ImageAnyDraw(Size)\u0015ImageAnyDraw(Size sz)\u0003Upp\fIMAGEANYDRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0003\u0000\u0000\u0001\u0000\u0000\u0000o\u0003\u0000\u0000\u001D\u0000\u0000\u0000o\u0003\u0000\u0000\u0000\u0000\u0000\fImageAnyDraw\u000Fvoid (int, int)(Upp::ImageAnyDraw::ImageAnyDraw(int,int)\u001CImageAnyDraw(int cx, int cy)\u0003Upp\fIMAGEANYDRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0003\u0000\u0000\u0001\u0000\u0000\u0000q\u0003\u0000\u0000\u0010\u0000\u0000\u0000q\u0003\u0000\u0000\u0000\u0000\u0000\r~ImageAnyDraw\u0010void () noexcept\u0016Upp::ImageAnyDraw::~()\u000F~ImageAnyDraw()\u0003Upp\r~IMAGEANYDRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000t\u0003\u0000\u0000\u0000\u0000\u0000\u0000t\u0003\u0000\u0000X\u0000\u0000\u0000t\u0003\u0000\u0000\u0000\u0000\u0000\vAddNotEmpty)void (Vector<Rect> &, int, int, int, int))Upp::AddNotEmpty(Vector&,int,int,int,int)Pvoid AddNotEmpty(Vector<Rect>& result, int left, int right, int top, int bottom)\u0003Upp\vADDNOTEMPTY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000u\u0003\u0000\u0000\u0000\u0000\u0000\u0000u\u0003\u0000\u0000K\u0000\u0000\u0000u\u0003\u0000\u0000\u0000\u0000\u0000\bSubtract1bool (const Rect &, const Rect &, Vector<Rect> &).Upp::Subtract(const Rect&,const Rect&,Vector&)Cbool Subtract(const Rect& r, const Rect& sub, Vector<Rect>& result)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000v\u0003\u0000\u0000\u0000\u0000\u0000\u0000v\u0003\u0000\u0000T\u0000\u0000\u0000v\u0003\u0000\u0000\u0000\u0000\u0000\bSubtract9bool (const Vector<Rect> &, const Rect &, Vector<Rect> &)0Upp::Subtract(const Vector&,const Rect&,Vector&)Lbool Subtract(const Vector<Rect>& rr, const Rect& sub, Vector<Rect>& result)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000w\u0003\u0000\u0000\u0000\u0000\u0000\u0000w\u0003\u0000\u0000M\u0000\u0000\u0000w\u0003\u0000\u0000\u0000\u0000\u0000\bSubtract9Vector<Rect> (const Vector<Rect> &, const Rect &, bool &).Upp::Subtract(const Vector&,const Rect&,bool&)MVector<Rect> Subtract(const Vector<Rect>& rr, const Rect& sub, bool& changed)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000x\u0003\u0000\u0000\u0000\u0000\u0000\u0000x\u0003\u0000\u0000K\u0000\u0000\u0000x\u0003\u0000\u0000\u0000\u0000\u0000\tIntersect9Vector<Rect> (const Vector<Rect> &, const Rect &, bool &)/Upp::Intersect(const Vector&,const Rect&,bool&)KVector<Rect> Intersect(const Vector<Rect>& b, const Rect& a, bool& changed)\u0003Upp\tINTERSECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000z\u0003\u0000\u0000\u0000\u0000\u0000\u0000z\u0003\u0000\u00000\u0000\u0000\u0000z\u0003\u0000\u0000\u0000\u0000\u0000\bSubtract#void (Vector<Rect> &, const Rect &)\"Upp::Subtract(Vector&,const Rect&)0void Subtract(Vector<Rect>& rr, const Rect& sub)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000{\u0003\u0000\u0000\u0000\u0000\u0000\u0000{\u0003\u0000\u0000-\u0000\u0000\u0000{\u0003\u0000\u0000\u0000\u0000\u0000\u0005Union#void (Vector<Rect> &, const Rect &)\u001FUpp::Union(Vector&,const Rect&)-void Union(Vector<Rect>& rr, const Rect& add)\u0003Upp\u0005UNION\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000}\u0003\u0000\u0000\u0000\u0000\u0000\u0000}\u0003\u0000\u0000?\u0000\u0000\u0000}\u0003\u0000\u0000\u0000\u0000\u0000\fIntersection1Vector<Rect> (const Vector<Rect> &, const Rect &),Upp::Intersection(const Vector&,const Rect&)?Vector<Rect> Intersection(const Vector<Rect>& b, const Rect& a)\u0003Upp\fINTERSECTION\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u007F\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u007F\u0003\u0000\u0000Q\u0000\u0000\u0000\u007F\u0003\u0000\u0000\u0000\u0000\u0000\u000EAddRefreshRect+void (Vector<Rect> &, const Rect &, double)/Upp::AddRefreshRect(Vector&,const Rect&,double)Qvoid AddRefreshRect(Vector<Rect>& invalid, const Rect& _r, double ctolerance = 2)\u0003Upp\u000EADDREFRESHRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000a\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\rDrawDragFrame9void (Draw &, const Rect &, int, const int *, Color, int)>Upp::DrawDragFrame(Draw&,const Rect&,int,const int*,Color,int)avoid DrawDragFrame(Draw& w, const Rect& r, int n, const int *pattern, Color color, int animation)\u0003Upp\rDRAWDRAGFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000Z\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\rDrawDragFrame1void (Draw &, const Rect &, int, int, Color, int)7Upp::DrawDragFrame(Draw&,const Rect&,int,int,Color,int)Zvoid DrawDragFrame(Draw& w, const Rect& r, int n, int pattern, Color color, int animation)\u0003Upp\rDRAWDRAGFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000N\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\bDrawRect0void (Draw &, const Rect &, const Image &, bool)2Upp::DrawRect(Draw&,const Rect&,const Image&,bool)Nvoid DrawRect(Draw& w, const Rect& rect, const Image& img, bool ralgn = false)\u0003Upp\bDRAWRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000W\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\bDrawRect6void (Draw &, int, int, int, int, const Image &, bool)6Upp::DrawRect(Draw&,int,int,int,int,const Image&,bool)Wvoid DrawRect(Draw& w, int x, int y, int cx, int cy, const Image& img, bool ra = false)\u0003Upp\bDRAWRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000G\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawTiles0void (Draw &, int, int, int, int, const Image &)2Upp::DrawTiles(Draw&,int,int,int,int,const Image&)Gvoid DrawTiles(Draw& w, int x, int y, int cx, int cy, const Image& img)\u0003Upp\tDRAWTILES\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000;\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawTiles*void (Draw &, const Rect &, const Image &).Upp::DrawTiles(Draw&,const Rect&,const Image&);void DrawTiles(Draw& w, const Rect& rect, const Image& img)\u0003Upp\tDRAWTILES\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000L\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\fDrawFatFrame-void (Draw &, int, int, int, int, Color, int)2Upp::DrawFatFrame(Draw&,int,int,int,int,Color,int)Lvoid DrawFatFrame(Draw& w, int x, int y, int cx, int cy, Color color, int n)\u0003Upp\fDRAWFATFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000=\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\fDrawFatFrame'void (Draw &, const Rect &, Color, int).Upp::DrawFatFrame(Draw&,const Rect&,Color,int)=void DrawFatFrame(Draw& w, const Rect& r, Color color, int n)\u0003Upp\fDRAWFATFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000K\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawFrame=void (Draw &, int, int, int, int, Color, Color, Color, Color)=Upp::DrawFrame(Draw&,int,int,int,int,Color,Color,Color,Color){void DrawFrame(Draw& w, int x, int y, int cx, int cy, Color leftcolor, Color topcolor, Color rightcolor, Color bottomcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000K\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawFrame7void (Draw &, const Rect &, Color, Color, Color, Color)9Upp::DrawFrame(Draw&,const Rect&,Color,Color,Color,Color)lvoid DrawFrame(Draw& w, const Rect& r, Color leftcolor, Color topcolor, Color rightcolor, Color bottomcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u00001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawFrame/void (Draw &, int, int, int, int, Color, Color)1Upp::DrawFrame(Draw&,int,int,int,int,Color,Color)avoid DrawFrame(Draw& w, int x, int y, int cx, int cy, Color topleftcolor, Color bottomrightcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u00001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawFrame)void (Draw &, const Rect &, Color, Color)-Upp::DrawFrame(Draw&,const Rect&,Color,Color)Rvoid DrawFrame(Draw& w, const Rect& r, Color topleftcolor, Color bottomrightcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000B\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawFrame(void (Draw &, int, int, int, int, Color)+Upp::DrawFrame(Draw&,int,int,int,int,Color)Bvoid DrawFrame(Draw& w, int x, int y, int cx, int cy, Color color)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u00003\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\tDrawFrame\"void (Draw &, const Rect &, Color)'Upp::DrawFrame(Draw&,const Rect&,Color)3void DrawFrame(Draw& w, const Rect& r, Color color)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000Q\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\nDrawBorder1void (Draw &, int, int, int, int, const ColorF *)4Upp::DrawBorder(Draw&,int,int,int,int,const ColorF*)Qvoid DrawBorder(Draw& w, int x, int y, int cx, int cy, const ColorF *colors_ltrd)\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000B\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\nDrawBorder+void (Draw &, const Rect &, const ColorF *)0Upp::DrawBorder(Draw&,const Rect&,const ColorF*)Bvoid DrawBorder(Draw& w, const Rect& r, const ColorF *colors_ltrd)\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u001B\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\vBlackBorder\u0010const ColorF *()\u0012Upp::BlackBorder()\u001Bconst ColorF *BlackBorder()\u0003Upp\vBLACKBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u001B\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\vWhiteBorder\u0010const ColorF *()\u0012Upp::WhiteBorder()\u001Bconst ColorF *WhiteBorder()\u0003Upp\vWHITEBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000 \u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0010ButtonPushBorder\u0010const ColorF *()\u0017Upp::ButtonPushBorder() const ColorF *ButtonPushBorder()\u0003Upp\u0010BUTTONPUSHBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000 \u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0010EdgeButtonBorder\u0010const ColorF *()\u0017Upp::EdgeButtonBorder() const ColorF *EdgeButtonBorder()\u0003Upp\u0010EDGEBUTTONBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u001F\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u000FDefButtonBorder\u0010const ColorF *()\u0016Upp::DefButtonBorder()\u001Fconst ColorF *DefButtonBorder()\u0003Upp\u000FDEFBUTTONBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\u0000 \u0003\u0000\u0000\u001C\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\fButtonBorder\u0010const ColorF *()\u0013Upp::ButtonBorder()\u001Cconst ColorF *ButtonBorder()\u0003Upp\fBUTTONBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000¡\u0003\u0000\u0000\u0000\u0000\u0000\u0000¡\u0003\u0000\u0000\u001B\u0000\u0000\u0000¡\u0003\u0000\u0000\u0000\u0000\u0000\vInsetBorder\u0010const ColorF *()\u0012Upp::InsetBorder()\u001Bconst ColorF *InsetBorder()\u0003Upp\vINSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000¢\u0003\u0000\u0000\u0000\u0000\u0000\u0000¢\u0003\u0000\u0000\u001C\u0000\u0000\u0000¢\u0003\u0000\u0000\u0000\u0000\u0000\fOutsetBorder\u0010const ColorF *()\u0013Upp::OutsetBorder()\u001Cconst ColorF *OutsetBorder()\u0003Upp\fOUTSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000£\u0003\u0000\u0000\u0000\u0000\u0000\u0000£\u0003\u0000\u0000 \u0000\u0000\u0000£\u0003\u0000\u0000\u0000\u0000\u0000\u0010ThinOutsetBorder\u0010const ColorF *()\u0017Upp::ThinOutsetBorder() const ColorF *ThinOutsetBorder()\u0003Upp\u0010THINOUTSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000¤\u0003\u0000\u0000\u0000\u0000\u0000\u0000¤\u0003\u0000\u0000\u001F\u0000\u0000\u0000¤\u0003\u0000\u0000\u0000\u0000\u0000\u000FThinInsetBorder\u0010const ColorF *()\u0016Upp::ThinInsetBorder()\u001Fconst ColorF *ThinInsetBorder()\u0003Upp\u000FTHININSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¦\u0003\u0000\u0000\u0000\u0000\u0000\u0000¦\u0003\u0000\u0000V\u0000\u0000\u0000¦\u0003\u0000\u0000\u0000\u0000\u0000\nDrawBorder6void (Draw &, int, int, int, int, const ColorF *(*)())9Upp::DrawBorder(Draw&,int,int,int,int,const ColorF*(*)())Vvoid DrawBorder(Draw& w, int x, int y, int cx, int cy, const ColorF *(*colors_ltrd)())\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000§\u0003\u0000\u0000\u0000\u0000\u0000\u0000§\u0003\u0000\u0000G\u0000\u0000\u0000§\u0003\u0000\u0000\u0000\u0000\u0000\nDrawBorder0void (Draw &, const Rect &, const ColorF *(*)())5Upp::DrawBorder(Draw&,const Rect&,const ColorF*(*)())Gvoid DrawBorder(Draw& w, const Rect& r, const ColorF *(*colors_ltrd)())\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000©\u0003\u0000\u0000\u0000\u0000\u0000\u0000©\u0003\u0000\u0000Q\u0000\u0000\u0000©\u0003\u0000\u0000\u0000\u0000\u0000\u0011DrawRectMinusRect0void (Draw &, const Rect &, const Rect &, Color);Upp::DrawRectMinusRect(Draw&,const Rect&,const Rect&,Color)Qvoid DrawRectMinusRect(Draw& w, const Rect& rect, const Rect& inner, Color color)\u0003Upp\u0011DRAWRECTMINUSRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000«\u0003\u0000\u0000K\u0000\u0000\u0000¬\u0003\u0000\u0000\u0000\u0000\u0000\u0012DrawHighlightImage9void (Draw &, int, int, const Image &, bool, bool, Color)CUpp::DrawHighlightImage(Draw&,int,int,const Image&,bool,bool,Color)ÿ\u0000\u0000\u0000void DrawHighlightImage(Draw& w, int x, int y, const Image& img, bool highlight = true, bool enabled = true, Color maskcolor = SColorPaper)\u0003Upp\u0012DRAWHIGHLIGHTIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000®\u0003\u0000\u0000\u0000\u0000\u0000\u0000®\u0003\u0000\u00005\u0000\u0000\u0000®\u0003\u0000\u0000\u0000\u0000\u0000\rGradientColor\u001EColor (Color, Color, int, int)'Upp::GradientColor(Color,Color,int,int)5Color GradientColor(Color fc, Color tc, int i, int n)\u0003Upp\rGRADIENTCOLOR\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000°\u0003\u0000\u0000\u0000\u0000\u0000\u0000°\u0003\u0000\u0000F\u0000\u0000\u0000±\u0003\u0000\u0000\u0000\u0000\u0000\u0010DrawTextEllipsisJvoid (Draw &, int, int, int, const char *, const char *, Font, Color, int)OUpp::DrawTextEllipsis(Draw&,int,int,int,const char*,const char*,Font,Color,int)ÿ\u0000\u0000\u0000void DrawTextEllipsis(Draw& w, int x, int y, int cx, const char *text, const char *ellipsis, Font font = StdFont(), Color ink = SColorText(), int n = -1)\u0003Upp\u0010DRAWTEXTELLIPSIS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000²\u0003\u0000\u0000\u0000\u0000\u0000\u0000²\u0003\u0000\u0000F\u0000\u0000\u0000³\u0003\u0000\u0000\u0000\u0000\u0000\u0010DrawTextEllipsisKvoid (Draw &, int, int, int, const wchar *, const char *, Font, Color, int)PUpp::DrawTextEllipsis(Draw&,int,int,int,const wchar*,const char*,Font,Color,int)ÿ\u0000\u0000\u0000void DrawTextEllipsis(Draw& w, int x, int y, int cx, const wchar *text, const char *ellipsis, Font font = StdFont(), Color ink = SColorText(), int n = -1)\u0003Upp\u0010DRAWTEXTELLIPSIS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000µ\u0003\u0000\u0000\u0000\u0000\u0000\u0000µ\u0003\u0000\u0000<\u0000\u0000\u0000µ\u0003\u0000\u0000\u0000\u0000\u0000\rGetTLTextSize\u001ASize (const wchar *, Font)%Upp::GetTLTextSize(const wchar*,Font)<Size GetTLTextSize(const wchar *text, Font font = StdFont())\u0003Upp\rGETTLTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¶\u0003\u0000\u0000\u0000\u0000\u0000\u0000¶\u0003\u0000\u0000;\u0000\u0000\u0000¶\u0003\u0000\u0000\u0000\u0000\u0000\u000FGetTLTextHeight\u0019int (const wchar *, Font)'Upp::GetTLTextHeight(const wchar*,Font):int GetTLTextHeight(const wchar *s, Font font = StdFont())\u0003Upp\u000FGETTLTEXTHEIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000·\u0003\u0000\u0000\u0000\u0000\u0000\u0000·\u0003\u0000\u0000<\u0000\u0000\u0000¸\u0003\u0000\u0000\u0000\u0000\u0000\nDrawTLText=void (Draw &, int, int, int, const wchar *, Font, Color, int)>Upp::DrawTLText(Draw&,int,int,int,const wchar*,Font,Color,int)ÿ\u0000\u0000\u0000void DrawTLText(Draw& draw, int x, int y, int cx, const wchar *text, Font font = StdFont(), Color ink = SColorText(), int accesskey = 0)\u0003Upp\nDRAWTLTEXT\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000º\u0003\u0000\u0000\u0000\u0000\u0000\u0000º\u0003\u0000\u0000\u0001\u0000\u0000\u0000À\u0003\u0000\u0000\u0001\u0000\u0000?(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)8Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp?(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:955:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000»\u0003\u0000\u0000\u0001\u0000\u0000\u0000»\u0003\u0000\u0000\u000E\u0000\u0000\u0000»\u0003\u0000\u0000\u0001\u0000\u0000\rBUTTON_NORMALDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0012Upp::BUTTON_NORMAL\rBUTTON_NORMAL\u0003Upp\rBUTTON_NORMAL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0010\u0000\u0000\u0000»\u0003\u0000\u0000\u0010\u0000\u0000\u0000»\u0003\u0000\u0000\u0019\u0000\u0000\u0000»\u0003\u0000\u0000\u0001\u0000\u0000\tBUTTON_OKDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u000EUpp::BUTTON_OK\tBUTTON_OK\u0003Upp\tBUTTON_OK\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u001B\u0000\u0000\u0000»\u0003\u0000\u0000\u001B\u0000\u0000\u0000»\u0003\u0000\u0000+\u0000\u0000\u0000»\u0003\u0000\u0000\u0001\u0000\u0000\u0010BUTTON_HIGHLIGHTDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0015Upp::BUTTON_HIGHLIGHT\u0010BUTTON_HIGHLIGHT\u0003Upp\u0010BUTTON_HIGHLIGHT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000-\u0000\u0000\u0000»\u0003\u0000\u0000-\u0000\u0000\u0000»\u0003\u0000\u00008\u0000\u0000\u0000»\u0003\u0000\u0000\u0001\u0000\u0000\vBUTTON_PUSHDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0010Upp::BUTTON_PUSH\vBUTTON_PUSH\u0003Upp\vBUTTON_PUSH\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000:\u0000\u0000\u0000»\u0003\u0000\u0000:\u0000\u0000\u0000»\u0003\u0000\u0000I\u0000\u0000\u0000»\u0003\u0000\u0000\u0001\u0000\u0000\u000FBUTTON_DISABLEDDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0014Upp::BUTTON_DISABLED\u000FBUTTON_DISABLED\u0003Upp\u000FBUTTON_DISABLED\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000K\u0000\u0000\u0000»\u0003\u0000\u0000K\u0000\u0000\u0000»\u0003\u0000\u0000Y\u0000\u0000\u0000»\u0003\u0000\u0000\u0001\u0000\u0000\u000EBUTTON_CHECKEDDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0013Upp::BUTTON_CHECKED\u000EBUTTON_CHECKED\u0003Upp\u000EBUTTON_CHECKED\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000¼\u0003\u0000\u0000\u0001\u0000\u0000\u0000¼\u0003\u0000\u0000\u0018\u0000\u0000\u0000¼\u0003\u0000\u0000\u0001\u0000\u0000\u000FBUTTON_VERTICALDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0014Upp::BUTTON_VERTICAL\u000FBUTTON_VERTICAL\u0003Upp\u000FBUTTON_VERTICAL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000½\u0003\u0000\u0000\u0001\u0000\u0000\u0000½\u0003\u0000\u0000\u0014\u0000\u0000\u0000½\u0003\u0000\u0000\u0001\u0000\u0000\vBUTTON_EDGEDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0010Upp::BUTTON_EDGE\vBUTTON_EDGE\u0003Upp\vBUTTON_EDGE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0003\u0000\u0000\u0001\u0000\u0000\u0000¾\u0003\u0000\u0000\u0014\u0000\u0000\u0000¾\u0003\u0000\u0000\u0001\u0000\u0000\vBUTTON_TOOLDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0010Upp::BUTTON_TOOL\vBUTTON_TOOL\u0003Upp\vBUTTON_TOOL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000¿\u0003\u0000\u0000\u0001\u0000\u0000\u0000¿\u0003\u0000\u0000\u0016\u0000\u0000\u0000¿\u0003\u0000\u0000\u0001\u0000\u0000\rBUTTON_SCROLLDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:955:1)\u0012Upp::BUTTON_SCROLL\rBUTTON_SCROLL\u0003Upp\rBUTTON_SCROLL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Â\u0003\u0000\u0000\u0000\u0000\u0000\u0000Â\u0003\u0000\u0000,\u0000\u0000\u0000Â\u0003\u0000\u0000\u0000\u0000\u0000\fDrawXPButton\u0018void (Draw &, Rect, int)!Upp::DrawXPButton(Draw&,Rect,int),void DrawXPButton(Draw& w, Rect r, int type)\u0003Upp\fDRAWXPBUTTON\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000Ä\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ä\u0003\u0000\u0000\u0017\u0000\u0000\u0000Ä\u0003\u0000\u0000\u0000\u0000\u0000\u0010PdfSignatureInfo\u0015Upp::PdfSignatureInfo\u0015Upp::PdfSignatureInfo\u0010PdfSignatureInfo\u0003Upp\u0010PDFSIGNATUREINFO\u0015Upp::PdfSignatureInfo\u0015UPP::PDFSIGNATUREINFO\u0000\u0000\u0014\u0000\u0000\u0000\u0011\u0000\u0000\u0000Å\u0003\u0000\u0000\u0000\u0000\u0000\u0000Å\u0003\u0000\u0000M\u0000\u0000\u0000Æ\u0003\u0000\u0000\u0001\u0000\u0000\u0012DrawingToPdfFnType\u0017Upp::DrawingToPdfFnType\u0017Upp::DrawingToPdfFnTypeftypedef String (*DrawingToPdfFnType)(const Array<Drawing>&, Size, int, bool, const PdfSignatureInfo *)\u0003Upp\u0012DRAWINGTOPDFFNTYPE\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000;\u0000\u0000\u0000Å\u0003\u0000\u0000%\u0000\u0000\u0000Å\u0003\u0000\u0000A\u0000\u0000\u0000Å\u0003\u0000\u0000\u0001\u0000\u0000\u0006report\u0016const Array<Drawing> &\u0006report\u001Cconst Array<Drawing>& report\u0000\u0006REPORT\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000H\u0000\u0000\u0000Å\u0003\u0000\u0000C\u0000\u0000\u0000Å\u0003\u0000\u0000P\u0000\u0000\u0000Å\u0003\u0000\u0000\u0001\u0000\u0000\bpagesize\u0004Size\bpagesize\rSize pagesize\u0000\bPAGESIZE\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000V\u0000\u0000\u0000Å\u0003\u0000\u0000R\u0000\u0000\u0000Å\u0003\u0000\u0000\\\u0000\u0000\u0000Å\u0003\u0000\u0000\u0001\u0000\u0000\u0006margin\u0003int\u0006margin\nint margin\u0000\u0006MARGIN\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000*\u0000\u0000\u0000Æ\u0003\u0000\u0000%\u0000\u0000\u0000Æ\u0003\u0000\u0000.\u0000\u0000\u0000Æ\u0003\u0000\u0000\u0001\u0000\u0000\u0004pdfa\u0004bool\u0004pdfa\tbool pdfa\u0000\u0004PDFA\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000H\u0000\u0000\u0000Æ\u0003\u0000\u00000\u0000\u0000\u0000Æ\u0003\u0000\u0000L\u0000\u0000\u0000Æ\u0003\u0000\u0000\u0001\u0000\u0000\u0004sign\u0018const PdfSignatureInfo *\u0004sign\u001Cconst PdfSignatureInfo *sign\u0000\u0004SIGN\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u000F\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0003\u0000\u0000a\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0001\u0000\u0000\u0011PdfDrawJPEGFnType\u0016Upp::PdfDrawJPEGFnType\u0016Upp::PdfDrawJPEGFnTypeKtypedef void (*PdfDrawJPEGFnType)(Draw&, int, int, int, int, const String&)\u0003Upp\u0011PDFDRAWJPEGFNTYPE\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000(\u0000\u0000\u0000Ç\u0003\u0000\u0000\"\u0000\u0000\u0000Ç\u0003\u0000\u0000)\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0001\u0000\u0000\u0001w\u0006Draw &\u0001w\aDraw& w\u0000\u0001W\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000/\u0000\u0000\u0000Ç\u0003\u0000\u0000+\u0000\u0000\u0000Ç\u0003\u0000\u00000\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0001\u0000\u0000\u0001x\u0003int\u0001x\u0005int x\u0000\u0001X\u0000\u0000\u0000\u0000\n\u0000\u0000\u00006\u0000\u0000\u0000Ç\u0003\u0000\u00002\u0000\u0000\u0000Ç\u0003\u0000\u00007\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0001\u0000\u0000\u0001y\u0003int\u0001y\u0005int y\u0000\u0001Y\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000=\u0000\u0000\u0000Ç\u0003\u0000\u00009\u0000\u0000\u0000Ç\u0003\u0000\u0000?\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0001\u0000\u0000\u0002cx\u0003int\u0002cx\u0006int cx\u0000\u0002CX\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000E\u0000\u0000\u0000Ç\u0003\u0000\u0000A\u0000\u0000\u0000Ç\u0003\u0000\u0000G\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0001\u0000\u0000\u0002cy\u0003int\u0002cy\u0006int cy\u0000\u0002CY\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000W\u0000\u0000\u0000Ç\u0003\u0000\u0000I\u0000\u0000\u0000Ç\u0003\u0000\u0000`\u0000\u0000\u0000Ç\u0003\u0000\u0000\u0001\u0000\u0000\tjpeg_data\u000Econst String &\tjpeg_data\u0017const String& jpeg_data\u0000\tJPEG_DATA\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000É\u0003\u0000\u0000\u0000\u0000\u0000\u0000É\u0003\u0000\u0000F\u0000\u0000\u0000É\u0003\u0000\u0000\u0000\u0000\u0000\u0011SetDrawingToPdfFn,void (DrawingToPdfFnType, PdfDrawJPEGFnType)<Upp::SetDrawingToPdfFn(DrawingToPdfFnType,PdfDrawJPEGFnType)Fvoid SetDrawingToPdfFn(DrawingToPdfFnType Pdf, PdfDrawJPEGFnType Jpeg)\u0003Upp\u0011SETDRAWINGTOPDFFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0013\u0000\u0000\u0000Ê\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ê\u0003\u0000\u0000&\u0000\u0000\u0000Ê\u0003\u0000\u0000\u0000\u0000\u0000\u0011GetDrawingToPdfFn\u0015DrawingToPdfFnType ()\u0018Upp::GetDrawingToPdfFn()&DrawingToPdfFnType GetDrawingToPdfFn()\u0003Upp\u0011GETDRAWINGTOPDFFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ë\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ë\u0003\u0000\u0000$\u0000\u0000\u0000Ë\u0003\u0000\u0000\u0000\u0000\u0000\u0010GetPdfDrawJPEGFn\u0014PdfDrawJPEGFnType ()\u0017Upp::GetPdfDrawJPEGFn()$PdfDrawJPEGFnType GetPdfDrawJPEGFn()\u0003Upp\u0010GETPDFDRAWJPEGFN\u0003Upp\u0003UPP\u0000\u0000\u0014\u0000\u0000\u0000\u000F\u0000\u0000\u0000Í\u0003\u0000\u0000\u0000\u0000\u0000\u0000Í\u0003\u0000\u0000,\u0000\u0000\u0000Í\u0003\u0000\u0000\u0001\u0000\u0000\vIsJPGFnType\u0010Upp::IsJPGFnType\u0010Upp::IsJPGFnType+typedef bool (*IsJPGFnType)(StreamRaster *)\u0003Upp\vISJPGFNTYPE\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000*\u0000\u0000\u0000Í\u0003\u0000\u0000\u001C\u0000\u0000\u0000Í\u0003\u0000\u0000+\u0000\u0000\u0000Í\u0003\u0000\u0000\u0001\u0000\u0000\u0001s\u000EStreamRaster *\u0001s\u000FStreamRaster *s\u0000\u0001S\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Î\u0003\u0000\u0000\u0000\u0000\u0000\u0000Î\u0003\u0000\u0000\"\u0000\u0000\u0000Î\u0003\u0000\u0000\u0000\u0000\u0000\nSetIsJPGFn\u0012void (IsJPGFnType)\u001CUpp::SetIsJPGFn(IsJPGFnType)\"void SetIsJPGFn(IsJPGFnType isjpg)\u0003Upp\nSETISJPGFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000Ï\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ï\u0003\u0000\u0000\u0018\u0000\u0000\u0000Ï\u0003\u0000\u0000\u0000\u0000\u0000\nGetIsJPGFn\u000EIsJPGFnType ()\u0011Upp::GetIsJPGFn()\u0018IsJPGFnType GetIsJPGFn()\u0003Upp\nGETISJPGFN\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ö\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ö\u0003\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0003\u0000\u0000\u0001\u0000\u0000?(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:983:1)DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:983:1)8Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.)\u0004enum\u0003Upp?(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAW.H:983:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000×\u0003\u0000\u0000\u0001\u0000\u0000\u0000×\u0003\u0000\u0000\u0010\u0000\u0000\u0000×\u0003\u0000\u0000\u0001\u0000\u0000\vCMAP_GLYPHSDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:983:1)\u0010Upp::CMAP_GLYPHS\vCMAP_GLYPHS\u0003Upp\vCMAP_GLYPHS\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0003\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0003\u0000\u0000\u0016\u0000\u0000\u0000Ø\u0003\u0000\u0000\u0001\u0000\u0000\u0011CMAP_ALLOW_SYMBOLDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.h:983:1)\u0016Upp::CMAP_ALLOW_SYMBOL\u0011CMAP_ALLOW_SYMBOL\u0003Upp\u0011CMAP_ALLOW_SYMBOL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Û\u0003\u0000\u0000\u0000\u0000\u0000\u0000Û\u0003\u0000\u0000V\u0000\u0000\u0000Û\u0003\u0000\u0000\u0000\u0000\u0000\bReadCmap5bool (const char *, int, Event<int, int, int>, dword)*Upp::ReadCmap(const char*,int,Event,dword)Vbool ReadCmap(const char *ptr, int count, Event<int, int, int> range, dword flags = 0)\u0003Upp\bREADCMAP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ü\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ü\u0003\u0000\u0000E\u0000\u0000\u0000Ü\u0003\u0000\u0000\u0000\u0000\u0000\bReadCmap(bool (Font, Event<int, int, int>, dword)\u001FUpp::ReadCmap(Font,Event,dword)Ebool ReadCmap(Font font, Event<int, int, int> range, dword flags = 0)\u0003Upp\bREADCMAP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ý\u0003\u0000\u0000\u0000\u0000\u0000\u0000Ý\u0003\u0000\u0000-\u0000\u0000\u0000Ý\u0003\u0000\u0000\u0000\u0000\u0000\u000FGetPanoseNumber\u0013bool (Font, byte *) Upp::GetPanoseNumber(Font,byte*)-bool GetPanoseNumber(Font font, byte *panose)\u0003Upp\u000FGETPANOSENUMBER\u0003Upp\u0003UPP\u0000\u0000end\u0000ýé\u0001\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h","value":"dataêõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bNEWIMAGE\u0000\bNEWIMAGE\bNEWIMAGE\u0000\bNEWIMAGE\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\tImageKind\u000EUpp::ImageKind\u000EUpp::ImageKind\u000Eenum ImageKind\u0003Upp\tIMAGEKIND\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\rIMAGE_UNKNOWN\u000EUpp::ImageKind\u0012Upp::IMAGE_UNKNOWN\rIMAGE_UNKNOWN\u0003Upp\rIMAGE_UNKNOWN\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\f\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\vIMAGE_EMPTY\u000EUpp::ImageKind\u0010Upp::IMAGE_EMPTY\vIMAGE_EMPTY\u0003Upp\vIMAGE_EMPTY\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\f\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\vIMAGE_ALPHA\u000EUpp::ImageKind\u0010Upp::IMAGE_ALPHA\vIMAGE_ALPHA\u0003Upp\vIMAGE_ALPHA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\nIMAGE_MASK\u000EUpp::ImageKind\u000FUpp::IMAGE_MASK\nIMAGE_MASK\u0003Upp\nIMAGE_MASK\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\r\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\fIMAGE_OPAQUE\u000EUpp::ImageKind\u0011Upp::IMAGE_OPAQUE\fIMAGE_OPAQUE\u0003Upp\fIMAGE_OPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000Q\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill\u001Bvoid (RGBA *, RGBA, size_t)\u001CUpp::Fill(RGBA*,RGBA,size_t)$void Fill(RGBA *t, RGBA c, size_t n)\u0003Upp\u0004FILL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u00002\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\bFillDown\u001Dvoid (RGBA *, int, RGBA, int)!Upp::FillDown(RGBA*,int,RGBA,int)2void FillDown(RGBA *t, int linecy, RGBA c, int cy)\u0003Upp\bFILLDOWN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000F\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0004Copy void (RGBA *, const RGBA *, int) Upp::Copy(RGBA*,const RGBA*,int)(void Copy(RGBA *t, const RGBA *s, int n)\u0003Upp\u0004COPY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\vPremultiply\u0013RGBA (const RGBA &)\u001DUpp::Premultiply(const RGBA&)\u001FRGBA Premultiply(const RGBA& s)\u0003Upp\vPREMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\nUnmultiply\u0013RGBA (const RGBA &)\u001CUpp::Unmultiply(const RGBA&)\u001ERGBA Unmultiply(const RGBA& s)\u0003Upp\nUNMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u00004\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\vPremultiply\"int (RGBA *, const RGBA *, size_t)*Upp::Premultiply(RGBA*,const RGBA*,size_t)3int Premultiply(RGBA *t, const RGBA *s, size_t len)\u0003Upp\vPREMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u00003\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\nUnmultiply\"int (RGBA *, const RGBA *, size_t))Upp::Unmultiply(RGBA*,const RGBA*,size_t)2int Unmultiply(RGBA *t, const RGBA *s, size_t len)\u0003Upp\nUNMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000@\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0013TransformComponentsXvoid (RGBA *, const RGBA *, int, const byte *, const byte *, const byte *, const byte *)cUpp::TransformComponents(RGBA*,const RGBA*,int,const byte[],const byte[],const byte[],const byte[])yvoid TransformComponents(RGBA *t, const RGBA *s, int len, const byte r[], const byte g[], const byte b[], const byte a[])\u0003Upp\u0013TRANSFORMCOMPONENTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000P\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0012MultiplyComponents*void (RGBA *, const RGBA *, int, int, int)6Upp::MultiplyComponents(RGBA*,const RGBA*,int,int,int)Pvoid MultiplyComponents(RGBA *t, const RGBA *s, int len, int num, int den = 256)\u0003Upp\u0012MULTIPLYCOMPONENTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u00000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\nAlphaBlend void (RGBA *, const RGBA *, int)&Upp::AlphaBlend(RGBA*,const RGBA*,int)0void AlphaBlend(RGBA *t, const RGBA *s, int len)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000=\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\nAlphaBlend'void (RGBA *, const RGBA *, int, Color),Upp::AlphaBlend(RGBA*,const RGBA*,int,Color)=void AlphaBlend(RGBA *t, const RGBA *s, int len, Color color)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000C\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0010AlphaBlendOpaque'void (RGBA *, const RGBA *, int, Color)2Upp::AlphaBlendOpaque(RGBA*,const RGBA*,int,Color)Cvoid AlphaBlendOpaque(RGBA *t, const RGBA *s, int len, Color color)\u0003Upp\u0010ALPHABLENDOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u00006\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0010AlphaBlendOpaque void (RGBA *, const RGBA *, int),Upp::AlphaBlendOpaque(RGBA*,const RGBA*,int)6void AlphaBlendOpaque(RGBA *t, const RGBA *s, int len)\u0003Upp\u0010ALPHABLENDOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u00008\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0012AlphaBlendStraight void (RGBA *, const RGBA *, int).Upp::AlphaBlendStraight(RGBA*,const RGBA*,int)8void AlphaBlendStraight(RGBA *b, const RGBA *f, int len)\u0003Upp\u0012ALPHABLENDSTRAIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000E\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u0012AlphaBlendStraight'void (RGBA *, const RGBA *, int, Color)4Upp::AlphaBlendStraight(RGBA*,const RGBA*,int,Color)Evoid AlphaBlendStraight(RGBA *b, const RGBA *f, int len, Color color)\u0003Upp\u0012ALPHABLENDSTRAIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000>\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0018AlphaBlendStraightOpaque void (RGBA *, const RGBA *, int)4Upp::AlphaBlendStraightOpaque(RGBA*,const RGBA*,int)>void AlphaBlendStraightOpaque(RGBA *t, const RGBA *s, int len)\u0003Upp\u0018ALPHABLENDSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000I\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u0018AlphaBlendStraightOpaque%void (RGBA *, const RGBA *, int, int)8Upp::AlphaBlendStraightOpaque(RGBA*,const RGBA*,int,int)Ivoid AlphaBlendStraightOpaque(RGBA *t, const RGBA *s, int len, int alpha)\u0003Upp\u0018ALPHABLENDSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u001F\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u000EGetChMaskPos32\vint (dword)\u001AUpp::GetChMaskPos32(dword)\u001Eint GetChMaskPos32(dword mask)\u0003Upp\u000EGETCHMASKPOS32\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u00002\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0012AlphaBlendOverBgST\u0018void (RGBA *, RGBA, int)'Upp::AlphaBlendOverBgST(RGBA*,RGBA,int)2void AlphaBlendOverBgST(RGBA *b, RGBA bg, int len)\u0003Upp\u0012ALPHABLENDOVERBGST\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u00008\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\tUnpackRLE'const byte *(RGBA *, const byte *, int)%Upp::UnpackRLE(RGBA*,const byte*,int)8const byte *UnpackRLE(RGBA *t, const byte *src, int len)\u0003Upp\tUNPACKRLE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000+\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\aPackRLE\u001AString (const RGBA *, int)\u001DUpp::PackRLE(const RGBA*,int)&String PackRLE(const RGBA *s, int len)\u0003Upp\aPACKRLE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000W\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\tGrayscale\u0013int (int, int, int)\u001BUpp::Grayscale(int,int,int)\"int Grayscale(int r, int g, int b)\u0003Upp\tGRAYSCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000O\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\tGrayscale\u0012int (const RGBA &)\u001BUpp::Grayscale(const RGBA&)\u001Cint Grayscale(const RGBA& c)\u0003Upp\tGRAYSCALE\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\a\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\f\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0005Image\nUpp::Image\nUpp::Image\u0005Image\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vImageBuffer\u0010Upp::ImageBuffer\u0010Upp::ImageBuffer\u0014ImageBuffer : NoCopy\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\vUpp::NoCopy\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0016\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0004kind\u0010std::atomic<int>\u0016Upp::ImageBuffer::kind\u0015std::atomic<int> kind\u0003Upp\u0004KIND\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0012\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0004size\u0004Size\u0016Upp::ImageBuffer::size\tSize size\u0003Upp\u0004SIZE\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0014\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0006pixels\fBuffer<RGBA>\u0018Upp::ImageBuffer::pixels\u0013Buffer<RGBA> pixels\u0003Upp\u0006PIXELS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0015\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\ahotspot\u0005Point\u0019Upp::ImageBuffer::hotspot\rPoint hotspot\u0003Upp\aHOTSPOT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000\u0013\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0005spot2\u0005Point\u0017Upp::ImageBuffer::spot2\vPoint spot2\u0003Upp\u0005SPOT2\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0012\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0004dots\u0004Size\u0016Upp::ImageBuffer::dots\tSize dots\u0003Upp\u0004DOTS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u001F\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\tpaintonce\u0004bool\u001BUpp::ImageBuffer::paintonce\u000Ebool paintonce\u0003Upp\tPAINTONCE\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u001D\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0003Set\u000Evoid (Image &)\u001DUpp::ImageBuffer::Set(Image&)\u0014void Set(Image& img)\u0003Upp\u0003SET\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000.\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\bDeepCopy\u001Avoid (const ImageBuffer &).Upp::ImageBuffer::DeepCopy(const ImageBuffer&)%void DeepCopy(const ImageBuffer& img)\u0003Upp\bDEEPCOPY\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0000N\u0000\u0000\u0000u\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line\u0011RGBA *(int) const Upp::ImageBuffer::Line(int)const\u0017RGBA *Line(int i) const\u0003Upp\u0004LINE\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000A\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\rDropPixels___\u0014void (ImageBuffer &) Upp::DropPixels___(ImageBuffer&)\"void DropPixels___(ImageBuffer& b)\u0003Upp\rDROPPIXELS___\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0019\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0000\u0000\tInitAttrs\avoid ()\u001DUpp::ImageBuffer::InitAttrs()\u0010void InitAttrs()\u0003Upp\tINITATTRS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u00002\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\aSetKind\nvoid (int)\u001EUpp::ImageBuffer::SetKind(int)\u0013void SetKind(int k)\u0003Upp\aSETKIND\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000V\u0000\u0000\u00005\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\aGetKind\fint () const Upp::ImageBuffer::GetKind()const\u0013int GetKind() const\u0003Upp\aGETKIND\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000\u0017\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0000\bScanKind\fint () const!Upp::ImageBuffer::ScanKind()const\u0014int ScanKind() const\u0003Upp\bSCANKIND\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000_\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\vGetScanKind\fint () const$Upp::ImageBuffer::GetScanKind()const\u0017int GetScanKind() const\u0003Upp\vGETSCANKIND\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u00005\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\nSetHotSpot\fvoid (Point)#Upp::ImageBuffer::SetHotSpot(Point)\u0018void SetHotSpot(Point p)\u0003Upp\nSETHOTSPOT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u00008\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\nGetHotSpot\u000EPoint () const#Upp::ImageBuffer::GetHotSpot()const\u0018Point GetHotSpot() const\u0003Upp\nGETHOTSPOT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u00003\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\nSet2ndSpot\fvoid (Point)#Upp::ImageBuffer::Set2ndSpot(Point)\u0018void Set2ndSpot(Point p)\u0003Upp\nSET2NDSPOT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u00006\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\nGet2ndSpot\u000EPoint () const#Upp::ImageBuffer::Get2ndSpot()const\u0018Point Get2ndSpot() const\u0003Upp\nGET2NDSPOT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000$\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\vSetHotSpots\u0014void (const Image &)+Upp::ImageBuffer::SetHotSpots(const Image&)\"void SetHotSpots(const Image& src)\u0003Upp\vSETHOTSPOTS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u0000b\u0000\u0000\u00003\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\aSetDots\vvoid (Size)\u001FUpp::ImageBuffer::SetDots(Size)\u0015void SetDots(Size sz)\u0003Upp\aSETDOTS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u00005\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\aGetDots\rSize () const Upp::ImageBuffer::GetDots()const\u0014Size GetDots() const\u0003Upp\aGETDOTS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0000d\u0000\u0000\u0000\u0016\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0000\u0000\u0006SetDPI\vvoid (Size)\u001EUpp::ImageBuffer::SetDPI(Size)\u0014void SetDPI(Size sz)\u0003Upp\u0006SETDPI\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000\u000F\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\u0006GetDPI\aSize ()\u001AUpp::ImageBuffer::GetDPI()\rSize GetDPI()\u0003Upp\u0006GETDPI\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000(\u0000\u0000\u0000g\u0000\u0000\u0000\u0000\u0000\u0000\tCopyAttrs\u001Avoid (const ImageBuffer &)/Upp::ImageBuffer::CopyAttrs(const ImageBuffer&)&void CopyAttrs(const ImageBuffer& img)\u0003Upp\tCOPYATTRS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u0000\"\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\tCopyAttrs\u0014void (const Image &))Upp::ImageBuffer::CopyAttrs(const Image&) void CopyAttrs(const Image& img)\u0003Upp\tCOPYATTRS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u00005\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\aGetSize\rSize () const Upp::ImageBuffer::GetSize()const\u0014Size GetSize() const\u0003Upp\aGETSIZE\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000k\u0000\u0000\u00008\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\bGetWidth\fint () const!Upp::ImageBuffer::GetWidth()const\u0014int GetWidth() const\u0003Upp\bGETWIDTH\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u00008\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\tGetHeight\fint () const\"Upp::ImageBuffer::GetHeight()const\u0015int GetHeight() const\u0003Upp\tGETHEIGHT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0000m\u0000\u0000\u0000J\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\tGetLength\u000Fsize_t () const\"Upp::ImageBuffer::GetLength()const\u0018size_t GetLength() const\u0003Upp\tGETLENGTH\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u00008\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\noperator[]\vRGBA *(int)!Upp::ImageBuffer::operator[](int)\u0017RGBA *operator[](int i)\u0003Upp\nOPERATOR[]\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0000p\u0000\u0000\u00008\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\noperator[]\u0017const RGBA *(int) const&Upp::ImageBuffer::operator[](int)const#const RGBA *operator[](int i) const\u0003Upp\nOPERATOR[]\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u00007\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\toperator~\bRGBA *()\u001DUpp::ImageBuffer::operator~()\u0011RGBA *operator~()\u0003Upp\tOPERATOR~\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u00007\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0014operator Upp::RGBA *\bRGBA *()\"Upp::ImageBuffer::operator RGBA*()\u0011operator RGBA *()\u0003Upp\u0014OPERATOR UPP::RGBA *\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u0000\u0000\u00007\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\toperator~\u0014const RGBA *() const\"Upp::ImageBuffer::operator~()const\u001Dconst RGBA *operator~() const\u0003Upp\tOPERATOR~\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u00007\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u001Aoperator const Upp::RGBA *\u0014const RGBA *() const-Upp::ImageBuffer::operator const RGBA*()const\u001Doperator const RGBA *() const\u0003Upp\u001AOPERATOR CONST UPP::RGBA *\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u00007\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0005Begin\bRGBA *()\u0019Upp::ImageBuffer::Begin()\rRGBA *Begin()\u0003Upp\u0005BEGIN\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u00007\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0005Begin\u0014const RGBA *() const\u001EUpp::ImageBuffer::Begin()const\u0019const RGBA *Begin() const\u0003Upp\u0005BEGIN\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000E\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0003End\bRGBA *()\u0017Upp::ImageBuffer::End()\vRGBA *End()\u0003Upp\u0003END\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0000\u0000\u0000E\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0003End\u0014const RGBA *() const\u001CUpp::ImageBuffer::End()const\u0017const RGBA *End() const\u0003Upp\u0003END\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u00007\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0005begin\bRGBA *()\u0019Upp::ImageBuffer::begin()\rRGBA *begin()\u0003Upp\u0005BEGIN\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u00007\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0005begin\u0014const RGBA *() const\u001EUpp::ImageBuffer::begin()const\u0019const RGBA *begin() const\u0003Upp\u0005BEGIN\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000E\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0003end\bRGBA *()\u0017Upp::ImageBuffer::end()\vRGBA *end()\u0003Upp\u0003END\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u0000E\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0003end\u0014const RGBA *() const\u001CUpp::ImageBuffer::end()const\u0017const RGBA *end() const\u0003Upp\u0003END\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000\u001D\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0006Create\u000Fvoid (int, int)!Upp::ImageBuffer::Create(int,int)\u001Bvoid Create(int cx, int cy)\u0003Upp\u0006CREATE\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000>\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\vvoid (Size)\u001EUpp::ImageBuffer::Create(Size)\u0014void Create(Size sz)\u0003Upp\u0006CREATE\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aIsEmpty\rbool () const Upp::ImageBuffer::IsEmpty()const\u0014bool IsEmpty() const\u0003Upp\aISEMPTY\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u0019Upp::ImageBuffer::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\rPaintOnceHint\vvoid (bool)%Upp::ImageBuffer::PaintOnceHint(bool)!void PaintOnceHint(bool b = true)\u0003Upp\rPAINTONCEHINT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000FIsPaintOnceHint\rbool () const(Upp::ImageBuffer::IsPaintOnceHint()const\u001Cbool IsPaintOnceHint() const\u0003Upp\u000FISPAINTONCEHINT\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\toperator=\u000Evoid (Image &)#Upp::ImageBuffer::operator=(Image&)\rvoid operator\u0003Upp\tOPERATOR=\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\toperator=\u0014void (ImageBuffer &))Upp::ImageBuffer::operator=(ImageBuffer&)\rvoid operator\u0003Upp\tOPERATOR=\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vImageBuffer\avoid ()\u001FUpp::ImageBuffer::ImageBuffer()\rImageBuffer()\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vImageBuffer\u000Fvoid (int, int)&Upp::ImageBuffer::ImageBuffer(int,int)\u001BImageBuffer(int cx, int cy)\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vImageBuffer\vvoid (Size)#Upp::ImageBuffer::ImageBuffer(Size)\u0014ImageBuffer(Size sz)\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vImageBuffer\u000Evoid (Image &)%Upp::ImageBuffer::ImageBuffer(Image&)\u0017ImageBuffer(Image& img)\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vImageBuffer\u0014void (ImageBuffer &)+Upp::ImageBuffer::ImageBuffer(ImageBuffer&)\u001BImageBuffer(ImageBuffer& b)\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vImageBuffer\u0012void (ImageDraw &))Upp::ImageBuffer::ImageBuffer(ImageDraw&)\u001AImageBuffer(ImageDraw& iw)\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vPremultiply\u0014void (ImageBuffer &)\u001EUpp::Premultiply(ImageBuffer&) void Premultiply(ImageBuffer& b)\u0003Upp\vPREMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nUnmultiply\u0014void (ImageBuffer &)\u001DUpp::Unmultiply(ImageBuffer&)\u001Fvoid Unmultiply(ImageBuffer& b)\u0003Upp\nUNMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u0005Image\nUpp::Image\nUpp::Image6Image : public ValueType<Image, 150, Moveable_<Image>>\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u000EUpp::ValueType\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0004Data\u0010Upp::Image::Data\u0010Upp::Image::Data\u0004Data\u0003Upp\u0004DATA\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\brefcount\u0006Atomic\u001AUpp::Image::Data::refcount\u000FAtomic refcount\u0003Upp\bREFCOUNT\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006serial\u0005int64\u0018Upp::Image::Data::serial\fint64 serial\u0003Upp\u0006SERIAL\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\baux_data\u0006uint64\u001AUpp::Image::Data::aux_data\u000Fuint64 aux_data\u0003Upp\bAUX_DATA\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\npaintcount\u0003int\u001CUpp::Image::Data::paintcount\u000Eint paintcount\u0003Upp\nPAINTCOUNT\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Retain\avoid ()\u001AUpp::Image::Data::Retain()\rvoid Retain()\u0003Upp\u0006RETAIN\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aRelease\avoid ()\u001BUpp::Image::Data::Release()\u000Evoid Release()\u0003Upp\aRELEASE\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000 \u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000\u0014\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0006buffer\vImageBuffer\u0018Upp::Image::Data::buffer\u0012ImageBuffer buffer\u0003Upp\u0006BUFFER\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000¡\u0000\u0000\u0000\u0002\u0000\u0000\u0000¡\u0000\u0000\u0000\u0017\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\tpaintonly\u0004bool\u001BUpp::Image::Data::paintonly\u000Ebool paintonly\u0003Upp\tPAINTONLY\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000£\u0000\u0000\u0000\u0002\u0000\u0000\u0000£\u0000\u0000\u0000\u0017\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0000\u0000\aGetKind\u0006int ()\u001BUpp::Image::Data::GetKind()\rint GetKind()\u0003Upp\aGETKIND\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000¥\u0000\u0000\u0000\u0002\u0000\u0000\u0000¥\u0000\u0000\u0000\u0016\u0000\u0000\u0000¥\u0000\u0000\u0000\u0000\u0000\u0000\u0004Data\u0014void (ImageBuffer &)$Upp::Image::Data::Data(ImageBuffer&)\u0014Data(ImageBuffer& b)\u0003Upp\u0004DATA\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\u0000¨\u0000\u0000\u0000\v\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\u0004data\u0006Data *\u0010Upp::Image::data\nData *data\u0003Upp\u0004DATA\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000\u0019\u0000\u0000\u0000ª\u0000\u0000\u0000\u0000\u0000\u0000\u0003Set\u0014void (ImageBuffer &)\u001DUpp::Image::Set(ImageBuffer&)\u0018void Set(ImageBuffer& b)\u0003Upp\u0003SET\nUpp::Image\nUPP::IMAGE\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000^\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u000ESetPaintOnly__\u000Evoid (Image &)\u001BUpp::SetPaintOnly__(Image&)\u001Fvoid SetPaintOnly__(Image& img)\u0003Upp\u000ESETPAINTONLY__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\u0000°\u0000\u0000\u00001\u0000\u0000\u0000°\u0000\u0000\u0000\u0000\u0000\u0000\u0010SysImageRealized\u0014void (const Image &)#Upp::SysImageRealized(const Image&)'void SysImageRealized(const Image& img)\u0003Upp\u0010SYSIMAGEREALIZED\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000%\u0000\u0000\u0000³\u0000\u0000\u0000\u0000\u0000\u0000\nSetAuxData\rvoid (uint64)\u001EUpp::Image::SetAuxData(uint64)\u001Cvoid SetAuxData(uint64 data)\u0003Upp\nSETAUXDATA\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\u0000¶\u0000\u0000\u0000b\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\aGetSize\rSize () const\u001AUpp::Image::GetSize()const\u0014Size GetSize() const\u0003Upp\aGETSIZE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\u0000·\u0000\u0000\u0000D\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\bGetWidth\fint () const\u001BUpp::Image::GetWidth()const\u0014int GetWidth() const\u0003Upp\bGETWIDTH\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\u0000¸\u0000\u0000\u0000D\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\tGetHeight\fint () const\u001CUpp::Image::GetHeight()const\u0015int GetHeight() const\u0003Upp\tGETHEIGHT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000[\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\tGetLength\u000Fsize_t () const\u001CUpp::Image::GetLength()const\u0018size_t GetLength() const\u0003Upp\tGETLENGTH\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000\u001A\u0000\u0000\u0000º\u0000\u0000\u0000\u0000\u0000\u0000\nGetHotSpot\u000EPoint () const\u001DUpp::Image::GetHotSpot()const\u0018Point GetHotSpot() const\u0003Upp\nGETHOTSPOT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000»\u0000\u0000\u0000\u001A\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0000\u0000\nGet2ndSpot\u000EPoint () const\u001DUpp::Image::Get2ndSpot()const\u0018Point Get2ndSpot() const\u0003Upp\nGET2NDSPOT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000¼\u0000\u0000\u0000\u0017\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\aGetDots\rSize () const\u001AUpp::Image::GetDots()const\u0014Size GetDots() const\u0003Upp\aGETDOTS\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0000\u0000\u0000½\u0000\u0000\u0000\u0016\u0000\u0000\u0000½\u0000\u0000\u0000\u0000\u0000\u0000\u0006GetDPI\rSize () const\u0019Upp::Image::GetDPI()const\u0013Size GetDPI() const\u0003Upp\u0006GETDPI\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0000\u0000\u0000\u001D\u0000\u0000\u0000¾\u0000\u0000\u0000\u0000\u0000\u0000\rGetKindNoScan\fint () const Upp::Image::GetKindNoScan()const\u0019int GetKindNoScan() const\u0003Upp\rGETKINDNOSCAN\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\u0000¿\u0000\u0000\u0000\u0017\u0000\u0000\u0000¿\u0000\u0000\u0000\u0000\u0000\u0000\aGetKind\fint () const\u001AUpp::Image::GetKind()const\u0013int GetKind() const\u0003Upp\aGETKIND\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u0000Q\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\bIsOpaque\rbool () const\u001BUpp::Image::IsOpaque()const\u0015bool IsOpaque() const\u0003Upp\bISOPAQUE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000S\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0005Begin\u0014const RGBA *() const\u0018Upp::Image::Begin()const\u0019const RGBA *Begin() const\u0003Upp\u0005BEGIN\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0000\u0000\u0000?\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\u0005begin\u0014const RGBA *() const\u0018Upp::Image::begin()const\u0019const RGBA *begin() const\u0003Upp\u0005BEGIN\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000M\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0003End\u0014const RGBA *() const\u0016Upp::Image::End()const\u0017const RGBA *End() const\u0003Upp\u0003END\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000=\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\u0003end\u0014const RGBA *() const\u0016Upp::Image::end()const\u0017const RGBA *end() const\u0003Upp\u0003END\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000?\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\toperator~\u0014const RGBA *() const\u001CUpp::Image::operator~()const\u001Dconst RGBA *operator~() const\u0003Upp\tOPERATOR~\nUpp::Image\nUPP::IMAGE\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000?\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u001Aoperator const Upp::RGBA *\u0014const RGBA *() const'Upp::Image::operator const RGBA*()const\u001Doperator const RGBA *() const\u0003Upp\u001AOPERATOR CONST UPP::RGBA *\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000U\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\noperator[]\u0017const RGBA *(int) const Upp::Image::operator[](int)const#const RGBA *operator[](int i) const\u0003Upp\nOPERATOR[]\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0000\u0000\u0000N\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\vGetSerialId\u000Eint64 () const\u001EUpp::Image::GetSerialId()const\u0019int64 GetSerialId() const\u0003Upp\vGETSERIALID\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0000\u0000\u0000Y\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0006IsSame\u001Abool (const Image &) const%Upp::Image::IsSame(const Image&)const#bool IsSame(const Image& img) const\u0003Upp\u0006ISSAME\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000*\u0000\u0000\u0000Í\u0000\u0000\u0000\u0000\u0000\u0000\noperator==\u001Abool (const Image &) const)Upp::Image::operator==(const Image&)const\rbool operator\u0003Upp\nOPERATOR==\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\u0000Î\u0000\u0000\u0000*\u0000\u0000\u0000Î\u0000\u0000\u0000\u0000\u0000\u0000\noperator!=\u001Abool (const Image &) const)Upp::Image::operator!=(const Image&)const\u000Ebool operator!\u0003Upp\nOPERATOR!=\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000\u001C\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0000\u0000\u0000\fGetHashValue\u000Fhash_t () const\u001FUpp::Image::GetHashValue()const\u001Bhash_t GetHashValue() const\u0003Upp\fGETHASHVALUE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0018\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0000\u0000\u0000\bToString\u000FString () const\u001BUpp::Image::ToString()const\u0017String ToString() const\u0003Upp\bTOSTRING\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0000\u0000\u0000\u001B\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0000\u0000\u0000\tSerialize\u000Fvoid (Stream &)\u001EUpp::Image::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000M\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0006Xmlize\u000Evoid (XmlIO &)\u001AUpp::Image::Xmlize(XmlIO&)\u0017void Xmlize(XmlIO& xio)\u0003Upp\u0006XMLIZE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ô\u0000\u0000\u0000N\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0001\u0000\u0000\aJsonize\u000Fvoid (JsonIO &)\u001CUpp::Image::Jsonize(JsonIO&)\u0019void Jsonize(JsonIO& jio)\u0003Upp\aJSONIZE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000\u000E\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0000\u0000\u0000\u0005Clear\avoid ()\u0013Upp::Image::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000×\u0000\u0000\u0000\u0001\u0000\u0000\u0000×\u0000\u0000\u0000#\u0000\u0000\u0000×\u0000\u0000\u0000\u0000\u0000\u0000\toperator=\u0016Image &(const Image &)#Upp::Image::operator=(const Image&)\u000FImage& operator\u0003Upp\tOPERATOR=\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0000\u0000\u0000#\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0000\u0000\u0000\toperator=\u0016Image &(ImageBuffer &)#Upp::Image::operator=(ImageBuffer&)\u000FImage& operator\u0003Upp\tOPERATOR=\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000X\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u000EIsNullInstance\rbool () const!Upp::Image::IsNullInstance()const\u001Bbool IsNullInstance() const\u0003Upp\u000EISNULLINSTANCE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ü\u0000\u0000\u0000A\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\aIsEmpty\rbool () const\u001AUpp::Image::IsEmpty()const\u0014bool IsEmpty() const\u0003Upp\aISEMPTY\nUpp::Image\nUPP::IMAGE\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0000\u0000\u0000C\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u000Eoperator Value\u000EValue () const!Upp::Image::operator Value()const\u0016operator Value() const\u0003Upp\u000EOPERATOR VALUE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000H\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\vIsPaintOnly\rbool () const\u001EUpp::Image::IsPaintOnly()const\u0018bool IsPaintOnly() const\u0003Upp\vISPAINTONLY\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000à\u0000\u0000\u0000\u0001\u0000\u0000\u0000à\u0000\u0000\u0000W\u0000\u0000\u0000à\u0000\u0000\u0000\u0001\u0000\u0000\u000FIsPaintOnceHint\rbool () const\"Upp::Image::IsPaintOnceHint()const\u001Cbool IsPaintOnceHint() const\u0003Upp\u000FISPAINTONCEHINT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\u0000â\u0000\u0000\u00005\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\u0005Image\avoid ()\u0013Upp::Image::Image()\aImage()\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u00005\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\u0005Image\u0015void (const Nuller &) Upp::Image::Image(const Nuller&)\u0014Image(const Nuller&)\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000ä\u0000\u0000\u0000\u0018\u0000\u0000\u0000ä\u0000\u0000\u0000\u0000\u0000\u0000\u0005Image\u0014void (const Value &)\u001FUpp::Image::Image(const Value&)\u0017Image(const Value& src)\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000\u0018\u0000\u0000\u0000å\u0000\u0000\u0000\u0000\u0000\u0000\u0005Image\u0014void (const Image &)\u001FUpp::Image::Image(const Image&)\u0017Image(const Image& img)\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000æ\u0000\u0000\u0000\u0015\u0000\u0000\u0000æ\u0000\u0000\u0000\u0000\u0000\u0000\u0005Image\u0012void (Image (*)())\u001DUpp::Image::Image(Image(*)())\u0014Image(Image (*fn)())\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ç\u0000\u0000\u0000\u0016\u0000\u0000\u0000ç\u0000\u0000\u0000\u0000\u0000\u0000\u0005Image\u0014void (ImageBuffer &)\u001FUpp::Image::Image(ImageBuffer&)\u0015Image(ImageBuffer& b)\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0000\u0000\u0000\t\u0000\u0000\u0000è\u0000\u0000\u0000\u0000\u0000\u0000\u0006~Image\u0010void () noexcept\u000FUpp::Image::~()\b~Image()\u0003Upp\u0006~IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ë\u0000\u0000\u0000\u0015\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0001\u0005Arrow\bImage ()\u0013Upp::Image::Arrow()\u0014static Image Arrow()\u0003Upp\u0005ARROW\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000ì\u0000\u0000\u0000\u0014\u0000\u0000\u0000ì\u0000\u0000\u0000\u0000\u0000\u0001\u0004Wait\bImage ()\u0012Upp::Image::Wait()\u0013static Image Wait()\u0003Upp\u0004WAIT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\u0000í\u0000\u0000\u0000\u0015\u0000\u0000\u0000í\u0000\u0000\u0000\u0000\u0000\u0001\u0005IBeam\bImage ()\u0013Upp::Image::IBeam()\u0014static Image IBeam()\u0003Upp\u0005IBEAM\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\u0000î\u0000\u0000\u0000\u0012\u0000\u0000\u0000î\u0000\u0000\u0000\u0000\u0000\u0001\u0002No\bImage ()\u0010Upp::Image::No()\u0011static Image No()\u0003Upp\u0002NO\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000ï\u0000\u0000\u0000\u0017\u0000\u0000\u0000ï\u0000\u0000\u0000\u0000\u0000\u0001\aSizeAll\bImage ()\u0015Upp::Image::SizeAll()\u0016static Image SizeAll()\u0003Upp\aSIZEALL\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000\u0018\u0000\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0001\bSizeHorz\bImage ()\u0016Upp::Image::SizeHorz()\u0017static Image SizeHorz()\u0003Upp\bSIZEHORZ\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0018\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0000\u0000\u0001\bSizeVert\bImage ()\u0016Upp::Image::SizeVert()\u0017static Image SizeVert()\u0003Upp\bSIZEVERT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000ò\u0000\u0000\u0000\u001B\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0001\vSizeTopLeft\bImage ()\u0019Upp::Image::SizeTopLeft()\u001Astatic Image SizeTopLeft()\u0003Upp\vSIZETOPLEFT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000ó\u0000\u0000\u0000\u0017\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0001\aSizeTop\bImage ()\u0015Upp::Image::SizeTop()\u0016static Image SizeTop()\u0003Upp\aSIZETOP\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000ô\u0000\u0000\u0000\u001C\u0000\u0000\u0000ô\u0000\u0000\u0000\u0000\u0000\u0001\fSizeTopRight\bImage ()\u001AUpp::Image::SizeTopRight()\u001Bstatic Image SizeTopRight()\u0003Upp\fSIZETOPRIGHT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000õ\u0000\u0000\u0000\u0018\u0000\u0000\u0000õ\u0000\u0000\u0000\u0000\u0000\u0001\bSizeLeft\bImage ()\u0016Upp::Image::SizeLeft()\u0017static Image SizeLeft()\u0003Upp\bSIZELEFT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000ö\u0000\u0000\u0000\u0019\u0000\u0000\u0000ö\u0000\u0000\u0000\u0000\u0000\u0001\tSizeRight\bImage ()\u0017Upp::Image::SizeRight()\u0018static Image SizeRight()\u0003Upp\tSIZERIGHT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\u0000÷\u0000\u0000\u0000\u001E\u0000\u0000\u0000÷\u0000\u0000\u0000\u0000\u0000\u0001\u000ESizeBottomLeft\bImage ()\u001CUpp::Image::SizeBottomLeft()\u001Dstatic Image SizeBottomLeft()\u0003Upp\u000ESIZEBOTTOMLEFT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000ø\u0000\u0000\u0000\u001A\u0000\u0000\u0000ø\u0000\u0000\u0000\u0000\u0000\u0001\nSizeBottom\bImage ()\u0018Upp::Image::SizeBottom()\u0019static Image SizeBottom()\u0003Upp\nSIZEBOTTOM\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000ù\u0000\u0000\u0000\u001F\u0000\u0000\u0000ù\u0000\u0000\u0000\u0000\u0000\u0001\u000FSizeBottomRight\bImage ()\u001DUpp::Image::SizeBottomRight()\u001Estatic Image SizeBottomRight()\u0003Upp\u000FSIZEBOTTOMRIGHT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0000\u0000\u0000ú\u0000\u0000\u0000\u0015\u0000\u0000\u0000ú\u0000\u0000\u0000\u0000\u0000\u0001\u0005Cross\bImage ()\u0013Upp::Image::Cross()\u0014static Image Cross()\u0003Upp\u0005CROSS\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u0014\u0000\u0000\u0000û\u0000\u0000\u0000\u0000\u0000\u0001\u0004Hand\bImage ()\u0012Upp::Image::Hand()\u0013static Image Hand()\u0003Upp\u0004HAND\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0000\u0000\u0000 \u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0000\u0000\u0000\nGetAuxData\u000Fuint64 () const\u001DUpp::Image::GetAuxData()const\u0019uint64 GetAuxData() const\u0003Upp\nGETAUXDATA\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0001\u0000\u0000K\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\vGetRefCount\fint () const\u001EUpp::Image::GetRefCount()const\u0017int GetRefCount() const\u0003Upp\vGETREFCOUNT\nUpp::Image\nUPP::IMAGE\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0001\u0000\u0000#\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\vPremultiply\u0015Image (const Image &)\u001EUpp::Premultiply(const Image&)#Image Premultiply(const Image& img)\u0003Upp\vPREMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\a\u0001\u0000\u0000\u0000\u0000\u0000\u0000\a\u0001\u0000\u0000\"\u0000\u0000\u0000\a\u0001\u0000\u0000\u0000\u0000\u0000\nUnmultiply\u0015Image (const Image &)\u001DUpp::Unmultiply(const Image&)\"Image Unmultiply(const Image& img)\u0003Upp\nUNMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\u0000\f\u0001\u0000\u0000\u0001\u0000\u0000\bImageIml\rUpp::ImageIml\rUpp::ImageIml\u001DImageIml : Moveable<ImageIml>\u0003Upp\bIMAGEIML\rUpp::ImageIml\rUPP::IMAGEIML\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\n\u0001\u0000\u0000\u0001\u0000\u0000\u0000\n\u0001\u0000\u0000\r\u0000\u0000\u0000\n\u0001\u0000\u0000\u0001\u0000\u0000\u0005image\u0005Image\u0014Upp::ImageIml::image\vImage image\u0003Upp\u0005IMAGE\rUpp::ImageIml\rUPP::IMAGEIML\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\u0011\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0005flags\u0005dword\u0014Upp::ImageIml::flags\vdword flags\u0003Upp\u0005FLAGS\rUpp::ImageIml\rUPP::IMAGEIML\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0001\u0000\u0000>\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0000\u0000\u0000\u0019UnpackImlDataUncompressed!Vector<ImageIml> (const String &)-Upp::UnpackImlDataUncompressed(const String&)>Vector<ImageIml> UnpackImlDataUncompressed(const String& data)\u0003Upp\u0019UNPACKIMLDATAUNCOMPRESSED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0001\u0000\u00008\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\rUnpackImlData$Vector<ImageIml> (const void *, int)#Upp::UnpackImlData(const void*,int)8Vector<ImageIml> UnpackImlData(const void *ptr, int len)\u0003Upp\rUNPACKIMLDATA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0001\u0000\u0000/\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0000\u0000\u0000\rUnpackImlData!Vector<ImageIml> (const String &)!Upp::UnpackImlData(const String&)/Vector<ImageIml> UnpackImlData(const String& d)\u0003Upp\rUNPACKIMLDATA\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000@(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:275:1)EUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:275:1)9Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.)\u0004enum\u0003Upp@(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\IMAGE.H:275:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0016\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0001\u0000\u0000\u000FGUI_MODE_NORMALEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:275:1)\u0014Upp::GUI_MODE_NORMAL\u000FGUI_MODE_NORMAL\u0003Upp\u000FGUI_MODE_NORMAL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0016\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0000\u0000\rGUI_MODE_DARKEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:275:1)\u0012Upp::GUI_MODE_DARK\rGUI_MODE_DARK\u0003Upp\rGUI_MODE_DARK\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0016\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\fGUI_MODE_UHDEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:275:1)\u0011Upp::GUI_MODE_UHD\fGUI_MODE_UHD\u0003Upp\fGUI_MODE_UHD\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0016\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\u0011GUI_MODE_DARK_UHDEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:275:1)\u0016Upp::GUI_MODE_DARK_UHD\u0011GUI_MODE_DARK_UHD\u0003Upp\u0011GUI_MODE_DARK_UHD\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0001\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000@(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1)EUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1)9Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.)\u0004enum\u0003Upp@(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\IMAGE.H:282:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000\"\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0014IML_IMAGE_FLAG_FIXEDEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1)\u0019Upp::IML_IMAGE_FLAG_FIXED\u0014IML_IMAGE_FLAG_FIXED\u0003Upp\u0014IML_IMAGE_FLAG_FIXED\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\"\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\u001BIML_IMAGE_FLAG_FIXED_COLORSEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1) Upp::IML_IMAGE_FLAG_FIXED_COLORS\u001BIML_IMAGE_FLAG_FIXED_COLORS\u0003Upp\u001BIML_IMAGE_FLAG_FIXED_COLORS\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0001\u0000\u0000\"\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\u0019IML_IMAGE_FLAG_FIXED_SIZEEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1)\u001EUpp::IML_IMAGE_FLAG_FIXED_SIZE\u0019IML_IMAGE_FLAG_FIXED_SIZE\u0003Upp\u0019IML_IMAGE_FLAG_FIXED_SIZE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0001\u0000\u0000\"\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0012IML_IMAGE_FLAG_UHDEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1)\u0017Upp::IML_IMAGE_FLAG_UHD\u0012IML_IMAGE_FLAG_UHD\u0003Upp\u0012IML_IMAGE_FLAG_UHD\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0001\u0000\u0000#\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\u0013IML_IMAGE_FLAG_DARKEUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1)\u0018Upp::IML_IMAGE_FLAG_DARK\u0013IML_IMAGE_FLAG_DARK\u0003Upp\u0013IML_IMAGE_FLAG_DARK\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0001\u0000\u0000#\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u0011IML_IMAGE_FLAG_S3EUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.h:282:1)\u0016Upp::IML_IMAGE_FLAG_S3\u0011IML_IMAGE_FLAG_S3\u0003Upp\u0011IML_IMAGE_FLAG_S3\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\"\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0001\u0000\u0000h\u0000\u0000\u0000\"\u0001\u0000\u0000\u0000\u0000\u0000\fMakeImlImageGImage (const String &, Function<ImageIml (int, const String &)>, dword)/Upp::MakeImlImage(const String&,Function,dword)hImage MakeImlImage(const String& id, Function<ImageIml (int, const String&)> GetRaw, dword global_flags)\u0003Upp\fMAKEIMLIMAGE\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000$\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\u0000L\u0001\u0000\u0000\u0001\u0000\u0000\u0003Iml\bUpp::Iml\bUpp::Iml\u0003Iml\u0003Upp\u0003IML\bUpp::Iml\bUPP::IML\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u0000%\u0001\u0000\u0000\u0002\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0006IImage\u0010Upp::Iml::IImage\u0010Upp::Iml::IImage\u0019IImage : Moveable<IImage>\u0003Upp\u0006IIMAGE\u0010Upp::Iml::IImage\u0010UPP::IML::IIMAGE\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000&\u0001\u0000\u0000\u0002\u0000\u0000\u0000&\u0001\u0000\u0000\u001B\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0006loaded\u0011std::atomic<bool>\u0018Upp::Iml::IImage::loaded\u0018std::atomic<bool> loaded\u0003Upp\u0006LOADED\u0010Upp::Iml::IImage\u0010UPP::IML::IIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000'\u0001\u0000\u0000\u0002\u0000\u0000\u0000'\u0001\u0000\u0000\u001A\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\u0005image\u0005Image\u0017Upp::Iml::IImage::image\vImage image\u0003Upp\u0005IMAGE\u0010Upp::Iml::IImage\u0010UPP::IML::IIMAGE\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000)\u0001\u0000\u0000\u0002\u0000\u0000\u0000)\u0001\u0000\u0000\u001E\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u0006IImage\avoid ()\u001AUpp::Iml::IImage::IImage()\bIImage()\u0003Upp\u0006IIMAGE\u0010Upp::Iml::IImage\u0010UPP::IML::IIMAGE\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000+\u0001\u0000\u0000\u0001\u0000\u0000\u0000+\u0001\u0000\u0000\u0002\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000\u0004Data\u000EUpp::Iml::Data\u000EUpp::Iml::Data\u0015Data : Moveable<Data>\u0003Upp\u0004DATA\u000EUpp::Iml::Data\u000EUPP::IML::DATA\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000,\u0001\u0000\u0000\u0002\u0000\u0000\u0000,\u0001\u0000\u0000\u0012\u0000\u0000\u0000,\u0001\u0000\u0000\u0001\u0000\u0000\u0004data\fconst char *\u0014Upp::Iml::Data::data\u0010const char *data\u0003Upp\u0004DATA\u000EUpp::Iml::Data\u000EUPP::IML::DATA\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000-\u0001\u0000\u0000\u0002\u0000\u0000\u0000-\u0001\u0000\u0000\v\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0003len\u0003int\u0013Upp::Iml::Data::len\aint len\u0003Upp\u0003LEN\u000EUpp::Iml::Data\u000EUPP::IML::DATA\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000-\u0001\u0000\u0000\u0002\u0000\u0000\u0000-\u0001\u0000\u0000\u0012\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0005count\u0003int\u0015Upp::Iml::Data::count\tint count\u0003Upp\u0005COUNT\u000EUpp::Iml::Data\u000EUPP::IML::DATA\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u0000/\u0001\u0000\u0000\u0015\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u0004data\u000FVector<Data>[4]\u000EUpp::Iml::data\u0014Vector<Data> data[4]\u0003Upp\u0004DATA\bUpp::Iml\bUPP::IML\u0000\u0000\u0006\u0000\u0000\u0000\u001B\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u00000\u0001\u0000\u0000\u001E\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u0003map\u0019VectorMap<String, IImage>\rUpp::Iml::map\u001DVectorMap<String, IImage> map\u0003Upp\u0003MAP\bUpp::Iml\bUPP::IML\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u0012\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\u0004name\rconst char **\u000EUpp::Iml::name\u0011const char **name\u0003Upp\u0004NAME\bUpp::Iml\bUPP::IML\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u0017\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\fglobal_flags\u0005dword\u0016Upp::Iml::global_flags\u0012dword global_flags\u0003Upp\fGLOBAL_FLAGS\bUpp::Iml\bUPP::IML\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\u00003\u0001\u0000\u0000\u0012\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\vpremultiply\u0004bool\u0015Upp::Iml::premultiply\u0010bool premultiply\u0003Upp\vPREMULTIPLY\bUpp::Iml\bUPP::IML\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\u00005\u0001\u0000\u0000\u0019\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\aex_name\u0010Index<String>[3]\u0011Upp::Iml::ex_name\u0018Index<String> ex_name[3]\u0003Upp\aEX_NAME\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\u00007\u0001\u0000\u0000\u0012\u0000\u0000\u00007\u0001\u0000\u0000\u0000\u0000\u0000\u0004Init\nvoid (int)\u0013Upp::Iml::Init(int)\u0010void Init(int n)\u0003Upp\u0004INIT\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0000\u0000\u0000:\u0001\u0000\u0000\u000F\u0000\u0000\u0000:\u0001\u0000\u0000\u0000\u0000\u0000\u0005Reset\avoid ()\u0011Upp::Iml::Reset()\fvoid Reset()\u0003Upp\u0005RESET\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\u0000;\u0001\u0000\u0000D\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\bGetCount\fint () const\u0019Upp::Iml::GetCount()const\u0014int GetCount() const\u0003Upp\bGETCOUNT\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0000<\u0001\u0000\u0000C\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0005GetId\fString (int)\u0014Upp::Iml::GetId(int)\u0013String GetId(int i)\u0003Upp\u0005GETID\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\u0000=\u0001\u0000\u0000\u0012\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000\u0000\u0003Get\vImage (int)\u0012Upp::Iml::Get(int)\u0010Image Get(int i)\u0003Upp\u0003GET\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u0000>\u0001\u0000\u0000B\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u0004Find\u001Aint (const String &) const\"Upp::Iml::Find(const String&)const int Find(const String& id) const\u0003Upp\u0004FIND\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\u0000?\u0001\u0000\u0000$\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000\u0000\u0003Set\u0019void (int, const Image &)\u001FUpp::Iml::Set(int,const Image&)!void Set(int i, const Image& img)\u0003Upp\u0003SET\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000A\u0001\u0000\u0000\u0001\u0000\u0000\u0000A\u0001\u0000\u0000!\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0000\u0000\u0006GetRaw\u0013ImageIml (int, int)\u0019Upp::Iml::GetRaw(int,int) ImageIml GetRaw(int mode, int i)\u0003Upp\u0006GETRAW\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0000\u0000\u0000B\u0001\u0000\u0000,\u0000\u0000\u0000B\u0001\u0000\u0000\u0000\u0000\u0000\u0006GetRaw\u001EImageIml (int, const String &)#Upp::Iml::GetRaw(int,const String&)+ImageIml GetRaw(int mode, const String& id)\u0003Upp\u0006GETRAW\bUpp::Iml\bUPP::IML\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000E\u0001\u0000\u0000\u001E\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\u0003Iml\u0019void (const char **, int)\u001FUpp::Iml::Iml(const char**,int)\u001DIml(const char **name, int n)\u0003Upp\u0003IML\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000F\u0001\u0000\u0000A\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\aAddData\"void (const byte *, int, int, int)*Upp::Iml::AddData(const byte*,int,int,int)@void AddData(const byte *data, int len, int count, int mode = 0)\u0003Upp\aADDDATA\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u0000(\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000\u0000\u0005AddId\u0018void (int, const char *) Upp::Iml::AddId(int,const char*)'void AddId(int mode1, const char *name)\u0003Upp\u0005ADDID\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\u0000H\u0001\u0000\u0000@\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\rPremultiplied\avoid ()\u0019Upp::Iml::Premultiplied()\u0014void Premultiplied()\u0003Upp\rPREMULTIPLIED\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0000\u0000\u0000I\u0001\u0000\u0000>\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0000\u0000\nGlobalFlag\fvoid (dword)\u001BUpp::Iml::GlobalFlag(dword)\u0018void GlobalFlag(dword f)\u0003Upp\nGLOBALFLAG\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000K\u0001\u0000\u0000\u0001\u0000\u0000\u0000K\u0001\u0000\u0000\u0017\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000\u0001\bResetAll\avoid ()\u0014Upp::Iml::ResetAll()\u0016static void ResetAll()\u0003Upp\bRESETALL\bUpp::Iml\bUPP::IML\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0001\u0000\u00001\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000\bRegister\u001Avoid (const char *, Iml &)\u001FUpp::Register(const char*,Iml&)/void Register(const char *imageclass, Iml& iml)\u0003Upp\bREGISTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000P\u0001\u0000\u0000\u0000\u0000\u0000\u0000P\u0001\u0000\u0000\u0014\u0000\u0000\u0000P\u0001\u0000\u0000\u0000\u0000\u0000\vGetImlCount\u0006int ()\u0012Upp::GetImlCount()\u0011int GetImlCount()\u0003Upp\vGETIMLCOUNT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0018\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\nGetImlName\fString (int)\u0014Upp::GetImlName(int)\u0018String GetImlName(int i)\u0003Upp\nGETIMLNAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000R\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0001\u0000\u0000\u0014\u0000\u0000\u0000R\u0001\u0000\u0000\u0000\u0000\u0000\u0006GetIml\nIml &(int)\u0010Upp::GetIml(int)\u0012Iml& GetIml(int i)\u0003Upp\u0006GETIML\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000S\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0001\u0000\u0000 \u0000\u0000\u0000S\u0001\u0000\u0000\u0000\u0000\u0000\aFindIml\u0012int (const char *)\u0019Upp::FindIml(const char*)\u001Dint FindIml(const char *name)\u0003Upp\aFINDIML\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\u0000T\u0001\u0000\u0000$\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\vGetImlImage\u0014Image (const char *)\u001DUpp::GetImlImage(const char*)#Image GetImlImage(const char *name)\u0003Upp\vGETIMLIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0001\u0000\u00004\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000\u0000\vSetImlImage\"void (const char *, const Image &)*Upp::SetImlImage(const char*,const Image&)2void SetImlImage(const char *name, const Image& m)\u0003Upp\vSETIMLIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000\u0000\u0000W\u0001\u0000\u0000+\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000\u0000\u0012StoreImageAsString\u0016String (const Image &)%Upp::StoreImageAsString(const Image&)+String StoreImageAsString(const Image& img)\u0003Upp\u0012STOREIMAGEASSTRING\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\u0000X\u0001\u0000\u0000+\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\u0013LoadImageFromString\u0016Image (const String &)'Upp::LoadImageFromString(const String&)*Image LoadImageFromString(const String& s)\u0003Upp\u0013LOADIMAGEFROMSTRING\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000\u0000\u0000\u0000Y\u0001\u0000\u0000,\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000\u0000\u0000\u0012GetImageStringSize\u0015Size (const String &)&Upp::GetImageStringSize(const String&)*Size GetImageStringSize(const String& src)\u0003Upp\u0012GETIMAGESTRINGSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000Z\u0001\u0000\u0000\u0000\u0000\u0000\u0000Z\u0001\u0000\u0000,\u0000\u0000\u0000Z\u0001\u0000\u0000\u0000\u0000\u0000\u0012GetImageStringDots\u0015Size (const String &)&Upp::GetImageStringDots(const String&)*Size GetImageStringDots(const String& src)\u0003Upp\u0012GETIMAGESTRINGDOTS\u0003Upp\u0003UPP\u0000\u0000end\u0000Þ\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h","value":"dataã\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000?(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1):Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.)\u0004enum\u0003Upp?(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\RASTER.H:1:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\bRASTER_1DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\rUpp::RASTER_1\bRASTER_1\u0003Upp\bRASTER_1\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\bRASTER_2DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\rUpp::RASTER_2\bRASTER_2\u0003Upp\bRASTER_2\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\t\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\bRASTER_4DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\rUpp::RASTER_4\bRASTER_4\u0003Upp\bRASTER_4\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\t\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\bRASTER_8DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\rUpp::RASTER_8\bRASTER_8\u0003Upp\bRASTER_8\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\rRASTER_8ALPHADUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0012Upp::RASTER_8ALPHA\rRASTER_8ALPHA\u0003Upp\rRASTER_8ALPHA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\tRASTER_16DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u000EUpp::RASTER_16\tRASTER_16\u0003Upp\tRASTER_16\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\n\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\tRASTER_24DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u000EUpp::RASTER_24\tRASTER_24\u0003Upp\tRASTER_24\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\tRASTER_32DUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u000EUpp::RASTER_32\tRASTER_32\u0003Upp\tRASTER_32\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u000F\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u000ERASTER_32ALPHADUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0013Upp::RASTER_32ALPHA\u000ERASTER_32ALPHA\u0003Upp\u000ERASTER_32ALPHA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0017\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0016RASTER_32PREMULTIPLIEDDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u001BUpp::RASTER_32PREMULTIPLIED\u0016RASTER_32PREMULTIPLIED\u0003Upp\u0016RASTER_32PREMULTIPLIED\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0017\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u000FRASTER_MSBFIRSTDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0014Upp::RASTER_MSBFIRST\u000FRASTER_MSBFIRST\u0003Upp\u000FRASTER_MSBFIRST\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\fRASTER_MAP_RDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0011Upp::RASTER_MAP_R\fRASTER_MAP_R\u0003Upp\fRASTER_MAP_R\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u000ERASTER_SHIFT_RDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0013Upp::RASTER_SHIFT_R\u000ERASTER_SHIFT_R\u0003Upp\u000ERASTER_SHIFT_R\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\fRASTER_MAP_GDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0011Upp::RASTER_MAP_G\fRASTER_MAP_G\u0003Upp\fRASTER_MAP_G\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u000ERASTER_SHIFT_GDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0013Upp::RASTER_SHIFT_G\u000ERASTER_SHIFT_G\u0003Upp\u000ERASTER_SHIFT_G\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\fRASTER_MAP_BDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0011Upp::RASTER_MAP_B\fRASTER_MAP_B\u0003Upp\fRASTER_MAP_B\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u000ERASTER_SHIFT_BDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0013Upp::RASTER_SHIFT_B\u000ERASTER_SHIFT_B\u0003Upp\u000ERASTER_SHIFT_B\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u000ERASTER_MAP_MAXDUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.h:1:1)\u0013Upp::RASTER_MAP_MAX\u000ERASTER_MAP_MAX\u0003Upp\u000ERASTER_MAP_MAX\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\tPaletteCv\u000EUpp::PaletteCv\u000EUpp::PaletteCv\tPaletteCv\u0003Upp\tPALETTECV\u000EUpp::PaletteCv\u000EUPP::PALETTECV\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0002cv\fBuffer<byte>\u0012Upp::PaletteCv::cv\u000FBuffer<byte> cv\u0003Upp\u0002CV\u000EUpp::PaletteCv\u000EUPP::PALETTECV\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000G\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0002At\u0010byte *(int, int)\u001BUpp::PaletteCv::At(int,int)\u0016byte *At(int r, int b)\u0003Upp\u0002AT\u000EUpp::PaletteCv\u000EUPP::PALETTECV\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000S\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\u0019byte (const RGBA &) const%Upp::PaletteCv::Get(const RGBA&)const\u001Dbyte Get(const RGBA& b) const\u0003Upp\u0003GET\u000EUpp::PaletteCv\u000EUPP::PALETTECV\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000[\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\tPaletteCv\avoid ()\u001BUpp::PaletteCv::PaletteCv()\vPaletteCv()\u0003Upp\tPALETTECV\u000EUpp::PaletteCv\u000EUPP::PALETTECV\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\fRasterFormat\u0011Upp::RasterFormat\u0011Upp::RasterFormat\fRasterFormat\u0003Upp\fRASTERFORMAT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\v\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0004type\u0004byte\u0017Upp::RasterFormat::type\tbyte type\u0003Upp\u0004TYPE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\f\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0005rmask\u0005dword\u0018Upp::RasterFormat::rmask\vdword rmask\u0003Upp\u0005RMASK\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0013\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0005gmask\u0005dword\u0018Upp::RasterFormat::gmask\vdword gmask\u0003Upp\u0005GMASK\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u001A\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0005bmask\u0005dword\u0018Upp::RasterFormat::bmask\vdword bmask\u0003Upp\u0005BMASK\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\v\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0004rpos\u0004byte\u0017Upp::RasterFormat::rpos\tbyte rpos\u0003Upp\u0004RPOS\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0011\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0004gpos\u0004byte\u0017Upp::RasterFormat::gpos\tbyte gpos\u0003Upp\u0004GPOS\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0017\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0004bpos\u0004byte\u0017Upp::RasterFormat::bpos\tbyte bpos\u0003Upp\u0004BPOS\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u001D\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0004apos\u0004byte\u0017Upp::RasterFormat::apos\tbyte apos\u0003Upp\u0004APOS\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000c\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0001\bTailBits:void (RGBA *, const byte *, int, byte, byte, const RGBA *)HUpp::RasterFormat::TailBits(RGBA*,const byte*,int,byte,byte,const RGBA*)bstatic void TailBits(RGBA *t, const byte *src, int cx, byte andm, byte shift, const RGBA *palette)\u0003Upp\bTAILBITS\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000v\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0001\u000ETailBitsMSB1st@void (RGBA *, const byte *, int, byte, byte, byte, const RGBA *)SUpp::RasterFormat::TailBitsMSB1st(RGBA*,const byte*,int,byte,byte,byte,const RGBA*)ustatic void TailBitsMSB1st(RGBA *t, const byte *src, int cx, byte shift1, byte andm, byte shift, const RGBA *palette)\u0003Upp\u000ETAILBITSMSB1ST\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u00006\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0006Set1lf\avoid ()\u001BUpp::RasterFormat::Set1lf()\rvoid Set1lf()\u0003Upp\u0006SET1LF\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000F\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0006Set1mf\avoid ()\u001BUpp::RasterFormat::Set1mf()\rvoid Set1mf()\u0003Upp\u0006SET1MF\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u00006\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0006Set2lf\avoid ()\u001BUpp::RasterFormat::Set2lf()\rvoid Set2lf()\u0003Upp\u0006SET2LF\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000F\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0006Set2mf\avoid ()\u001BUpp::RasterFormat::Set2mf()\rvoid Set2mf()\u0003Upp\u0006SET2MF\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u00006\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0006Set4lf\avoid ()\u001BUpp::RasterFormat::Set4lf()\rvoid Set4lf()\u0003Upp\u0006SET4LF\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000F\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Set4mf\avoid ()\u001BUpp::RasterFormat::Set4mf()\rvoid Set4mf()\u0003Upp\u0006SET4MF\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u00006\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0004Set8\avoid ()\u0019Upp::RasterFormat::Set8()\vvoid Set8()\u0003Upp\u0004SET8\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000;\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u0005Set8A\avoid ()\u001AUpp::RasterFormat::Set8A()\fvoid Set8A()\u0003Upp\u0005SET8A\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u00004\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\aSet16le\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set16le(dword,dword,dword)3void Set16le(dword rmask, dword gmask, dword bmask)\u0003Upp\aSET16LE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u00004\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\aSet16be\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set16be(dword,dword,dword)3void Set16be(dword rmask, dword gmask, dword bmask)\u0003Upp\aSET16BE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u00004\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\aSet24le\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set24le(dword,dword,dword)3void Set24le(dword rmask, dword gmask, dword bmask)\u0003Upp\aSET24LE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u00004\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\aSet24be\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set24be(dword,dword,dword)3void Set24be(dword rmask, dword gmask, dword bmask)\u0003Upp\aSET24BE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000E\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\aSet32le!void (dword, dword, dword, dword)3Upp::RasterFormat::Set32le(dword,dword,dword,dword)Dvoid Set32le(dword rmask, dword gmask, dword bmask, dword amask = 0)\u0003Upp\aSET32LE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000E\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\aSet32be!void (dword, dword, dword, dword)3Upp::RasterFormat::Set32be(dword,dword,dword,dword)Dvoid Set32be(dword rmask, dword gmask, dword bmask, dword amask = 0)\u0003Upp\aSET32BE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000I\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u000FSet32leStraight!void (dword, dword, dword, dword);Upp::RasterFormat::Set32leStraight(dword,dword,dword,dword)Hvoid Set32leStraight(dword rmask, dword gmask, dword bmask, dword amask)\u0003Upp\u000FSET32LESTRAIGHT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000I\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u000FSet32beStraight!void (dword, dword, dword, dword);Upp::RasterFormat::Set32beStraight(dword,dword,dword,dword)Hvoid Set32beStraight(dword rmask, dword gmask, dword bmask, dword amask)\u0003Upp\u000FSET32BESTRAIGHT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u000F\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\aSetRGBA\avoid ()\u001CUpp::RasterFormat::SetRGBA()\u000Evoid SetRGBA()\u0003Upp\aSETRGBA\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0017\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u000FSetRGBAStraight\avoid ()$Upp::RasterFormat::SetRGBAStraight()\u0016void SetRGBAStraight()\u0003Upp\u000FSETRGBASTRAIGHT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u00002\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\aGetType\fint () const!Upp::RasterFormat::GetType()const\u0013int GetType() const\u0003Upp\aGETTYPE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000\u0014\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0006IsRGBA\fint () const Upp::RasterFormat::IsRGBA()const\u0012int IsRGBA() const\u0003Upp\u0006ISRGBA\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000 \u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\fGetByteCount\u000Fint (int) const)Upp::RasterFormat::GetByteCount(int)const\u001Eint GetByteCount(int cx) const\u0003Upp\fGETBYTECOUNT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0014\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0006GetBpp\fint () const Upp::RasterFormat::GetBpp()const\u0012int GetBpp() const\u0003Upp\u0006GETBPP\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u0016\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\bHasAlpha\rbool () const\"Upp::RasterFormat::HasAlpha()const\u0015bool HasAlpha() const\u0003Upp\bHASALPHA\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u001B\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\rGetColorCount\fint () const'Upp::RasterFormat::GetColorCount()const\u0019int GetColorCount() const\u0003Upp\rGETCOLORCOUNT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u001D\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u000FGetPaletteCount\fint () const)Upp::RasterFormat::GetPaletteCount()const\u001Bint GetPaletteCount() const\u0003Upp\u000FGETPALETTECOUNT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000E\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0004Read4void (RGBA *, const byte *, int, const RGBA *) const?Upp::RasterFormat::Read(RGBA*,const byte*,int,const RGBA*)constDvoid Read(RGBA *t, const byte *s, int cx, const RGBA *palette) const\u0003Upp\u0004READ\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000I\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0005Write9void (byte *, const RGBA *, int, const PaletteCv *) constEUpp::RasterFormat::Write(byte*,const RGBA*,int,const PaletteCv*)constHvoid Write(byte *t, const RGBA *s, int cx, const PaletteCv *palcv) const\u0003Upp\u0005WRITE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\bFlipMode\rUpp::FlipMode\rUpp::FlipMode\renum FlipMode\u0003Upp\bFLIPMODE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u001E\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\tFLIP_NONE\rUpp::FlipMode\u000EUpp::FLIP_NONE\tFLIP_NONE\u0003Upp\tFLIP_NONE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u001E\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0010FLIP_MIRROR_HORZ\rUpp::FlipMode\u0015Upp::FLIP_MIRROR_HORZ\u0010FLIP_MIRROR_HORZ\u0003Upp\u0010FLIP_MIRROR_HORZ\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u001E\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u000FFLIP_ROTATE_180\rUpp::FlipMode\u0014Upp::FLIP_ROTATE_180\u000FFLIP_ROTATE_180\u0003Upp\u000FFLIP_ROTATE_180\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0000N\u0000\u0000\u0000\u001E\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0010FLIP_MIRROR_VERT\rUpp::FlipMode\u0015Upp::FLIP_MIRROR_VERT\u0010FLIP_MIRROR_VERT\u0003Upp\u0010FLIP_MIRROR_VERT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u001E\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u000EFLIP_TRANSPOSE\rUpp::FlipMode\u0013Upp::FLIP_TRANSPOSE\u000EFLIP_TRANSPOSE\u0003Upp\u000EFLIP_TRANSPOSE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u001E\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0015FLIP_ROTATE_CLOCKWISE\rUpp::FlipMode\u001AUpp::FLIP_ROTATE_CLOCKWISE\u0015FLIP_ROTATE_CLOCKWISE\u0003Upp\u0015FLIP_ROTATE_CLOCKWISE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u001E\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u000FFLIP_TRANSVERSE\rUpp::FlipMode\u0014Upp::FLIP_TRANSVERSE\u000FFLIP_TRANSVERSE\u0003Upp\u000FFLIP_TRANSVERSE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000\u001E\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0019FLIP_ROTATE_ANTICLOCKWISE\rUpp::FlipMode\u001EUpp::FLIP_ROTATE_ANTICLOCKWISE\u0019FLIP_ROTATE_ANTICLOCKWISE\u0003Upp\u0019FLIP_ROTATE_ANTICLOCKWISE\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Raster\vUpp::Raster\vUpp::Raster\u0006Raster\u0003Upp\u0006RASTER\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0004\u0000\u0000\u0000\a\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000\u0002\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line\u0011Upp::Raster::Line\u0011Upp::Raster::Line\u0004Line\u0003Upp\u0004LINE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000X\u0000\u0000\u0000\u0002\u0000\u0000\u0000X\u0000\u0000\u0000\u001A\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0004data\fconst RGBA *\u0017Upp::Raster::Line::data\u0018mutable const RGBA *data\u0003Upp\u0004DATA\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000Y\u0000\u0000\u0000\u0002\u0000\u0000\u0000Y\u0000\u0000\u0000\u001D\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\afmtdata\fconst byte *\u001AUpp::Raster::Line::fmtdata\u0013const byte *fmtdata\u0003Upp\aFMTDATA\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000Z\u0000\u0000\u0000\u0002\u0000\u0000\u0000Z\u0000\u0000\u0000\u001C\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0006raster\bRaster *\u0019Upp::Raster::Line::raster\u000ERaster *raster\u0003Upp\u0006RASTER\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000[\u0000\u0000\u0000\u0002\u0000\u0000\u0000[\u0000\u0000\u0000\u001A\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0004free\u0004bool\u0017Upp::Raster::Line::free\u0011mutable bool free\u0003Upp\u0004FREE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\\\u0000\u0000\u0000\u0002\u0000\u0000\u0000\\\u0000\u0000\u0000\u001D\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\afmtfree\u0004bool\u001AUpp::Raster::Line::fmtfree\fbool fmtfree\u0003Upp\aFMTFREE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000`\u0000\u0000\u0000\u0002\u0000\u0000\u0000`\u0000\u0000\u0000%\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\bMakeRGBA\rvoid () const\"Upp::Raster::Line::MakeRGBA()const\u0015void MakeRGBA() const\u0003Upp\bMAKERGBA\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000a\u0000\u0000\u0000\u0002\u0000\u0000\u0000a\u0000\u0000\u0000c\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0004Free\avoid ()\u0019Upp::Raster::Line::Free()\vvoid Free()\u0003Upp\u0004FREE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000b\u0000\u0000\u0000\u0002\u0000\u0000\u0000b\u0000\u0000\u0000\u0015\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0000\u0000\u0004Pick\u000Evoid (Line &&)\u001FUpp::Raster::Line::Pick(Line&&)\u0013void Pick(Line&& b)\u0003Upp\u0004PICK\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000e\u0000\u0000\u0000\u0002\u0000\u0000\u0000e\u0000\u0000\u0000P\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\aGetRGBA\u0014const RGBA *() const!Upp::Raster::Line::GetRGBA()const\u001Bconst RGBA *GetRGBA() const\u0003Upp\aGETRGBA\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000f\u0000\u0000\u0000\u0002\u0000\u0000\u0000f\u0000\u0000\u0000=\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\nGetRawData\u0014const byte *() const$Upp::Raster::Line::GetRawData()const\u001Econst byte *GetRawData() const\u0003Upp\nGETRAWDATA\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u001A\u0000\u0000\u0000\u0002\u0000\u0000\u0000g\u0000\u0000\u0000\u0002\u0000\u0000\u0000g\u0000\u0000\u0000?\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u001Aoperator const Upp::RGBA *\u0014const RGBA *() const.Upp::Raster::Line::operator const RGBA*()const\u001Doperator const RGBA *() const\u0003Upp\u001AOPERATOR CONST UPP::RGBA *\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000h\u0000\u0000\u0000\u0002\u0000\u0000\u0000h\u0000\u0000\u0000?\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\toperator~\u0014const RGBA *() const#Upp::Raster::Line::operator~()const\u001Dconst RGBA *operator~() const\u0003Upp\tOPERATOR~\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000j\u0000\u0000\u0000\u0002\u0000\u0000\u0000j\u0000\u0000\u0000S\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line\u0019void (const RGBA *, bool))Upp::Raster::Line::Line(const RGBA*,bool)!Line(const RGBA *data, bool free)\u0003Upp\u0004LINE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000l\u0000\u0000\u0000\u0002\u0000\u0000\u0000l\u0000\u0000\u0000S\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line#void (const byte *, Raster *, bool)1Upp::Raster::Line::Line(const byte*,Raster*,bool)7Line(const byte *fmtdata, Raster *raster, bool fmtfree)\u0003Upp\u0004LINE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000n\u0000\u0000\u0000\u0002\u0000\u0000\u0000n\u0000\u0000\u0000<\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line\u000Evoid (Line &&)\u001FUpp::Raster::Line::Line(Line&&)\u000ELine(Line&& b)\u0003Upp\u0004LINE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000o\u0000\u0000\u0000\u0002\u0000\u0000\u0000o\u0000\u0000\u0000q\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line\avoid ()\u0019Upp::Raster::Line::Line()\u0006Line()\u0003Upp\u0004LINE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0019\u0000\u0000\u0000\u0002\u0000\u0000\u0000p\u0000\u0000\u0000\u0002\u0000\u0000\u0000p\u0000\u0000\u00005\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0005~Line\u0010void () noexcept\u0016Upp::Raster::Line::~()\a~Line()\u0003Upp\u0005~LINE\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000r\u0000\u0000\u0000\u0002\u0000\u0000\u0000r\u0000\u0000\u0000D\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\toperator=\u000Evoid (Line &&)$Upp::Raster::Line::operator=(Line&&)\rvoid operator\u0003Upp\tOPERATOR=\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u0002\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0004Info\u0011Upp::Raster::Info\u0011Upp::Raster::Info\u0004Info\u0003Upp\u0004INFO\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000v\u0000\u0000\u0000\u0002\u0000\u0000\u0000v\u0000\u0000\u0000\v\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0003bpp\u0003int\u0016Upp::Raster::Info::bpp\aint bpp\u0003Upp\u0003BPP\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000w\u0000\u0000\u0000\u0002\u0000\u0000\u0000w\u0000\u0000\u0000\u000E\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0006colors\u0003int\u0019Upp::Raster::Info::colors\nint colors\u0003Upp\u0006COLORS\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000x\u0000\u0000\u0000\u0002\u0000\u0000\u0000x\u0000\u0000\u0000\f\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0004dots\u0004Size\u0017Upp::Raster::Info::dots\tSize dots\u0003Upp\u0004DOTS\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000y\u0000\u0000\u0000\u0002\u0000\u0000\u0000y\u0000\u0000\u0000\u000F\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\ahotspot\u0005Point\u001AUpp::Raster::Info::hotspot\rPoint hotspot\u0003Upp\aHOTSPOT\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000z\u0000\u0000\u0000\u0002\u0000\u0000\u0000z\u0000\u0000\u0000\f\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0004kind\u0003int\u0017Upp::Raster::Info::kind\bint kind\u0003Upp\u0004KIND\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000{\u0000\u0000\u0000\u0002\u0000\u0000\u0000{\u0000\u0000\u0000\u0013\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\vorientation\u0003int\u001EUpp::Raster::Info::orientation\u000Fint orientation\u0003Upp\vORIENTATION\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000}\u0000\u0000\u0000\u0002\u0000\u0000\u0000}\u0000\u0000\u0000\b\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0004Info\avoid ()\u0019Upp::Raster::Info::Info()\u0006Info()\u0003Upp\u0004INFO\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\bSeekPage\nvoid (int)\u001AUpp::Raster::SeekPage(int)\u0017void SeekPage(int page)\u0003Upp\bSEEKPAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\rGetActivePage\fint () const!Upp::Raster::GetActivePage()const\u0019int GetActivePage() const\u0003Upp\rGETACTIVEPAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\fGetPageCount\u0006int ()\u001BUpp::Raster::GetPageCount()\u0012int GetPageCount()\u0003Upp\fGETPAGECOUNT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\rGetPageAspect\tint (int)\u001FUpp::Raster::GetPageAspect(int)\u0018int GetPageAspect(int n)\u0003Upp\rGETPAGEASPECT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\fGetPageDelay\tint (int)\u001EUpp::Raster::GetPageDelay(int)\u0017int GetPageDelay(int n)\u0003Upp\fGETPAGEDELAY\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\vGetPageRect\nRect (int)\u001DUpp::Raster::GetPageRect(int)\u0017Rect GetPageRect(int n)\u0003Upp\vGETPAGERECT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u000FGetPageDisposal\tint (int)!Upp::Raster::GetPageDisposal(int)\u001Aint GetPageDisposal(int n)\u0003Upp\u000FGETPAGEDISPOSAL\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006Create\abool ()\u0015Upp::Raster::Create()\rbool Create()\u0003Upp\u0006CREATE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\aGetSize\aSize ()\u0016Upp::Raster::GetSize()\u000ESize GetSize()\u0003Upp\aGETSIZE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\aGetInfo\aInfo ()\u0016Upp::Raster::GetInfo()\u000EInfo GetInfo()\u0003Upp\aGETINFO\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\aGetLine\nLine (int)\u0019Upp::Raster::GetLine(int)\u0016Line GetLine(int line)\u0003Upp\aGETLINE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\aIsError\abool ()\u0016Upp::Raster::IsError()\u000Ebool IsError()\u0003Upp\aISERROR\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u000FGetPaletteCount\u0006int ()\u001EUpp::Raster::GetPaletteCount()\u0015int GetPaletteCount()\u0003Upp\u000FGETPALETTECOUNT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\nGetPalette\u000Econst RGBA *()\u0019Upp::Raster::GetPalette()\u0018const RGBA *GetPalette()\u0003Upp\nGETPALETTE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\tGetFormat\u0016const RasterFormat *()\u0018Upp::Raster::GetFormat()\u001Fconst RasterFormat *GetFormat()\u0003Upp\tGETFORMAT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\vGetMetaData\u000EValue (String) Upp::Raster::GetMetaData(String)\u001CValue GetMetaData(String id)\u0003Upp\vGETMETADATA\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\fEnumMetaData\u0017void (Vector<String> &)\"Upp::Raster::EnumMetaData(Vector&)*void EnumMetaData(Vector<String>& id_list)\u0003Upp\fENUMMETADATA\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bGetWidth\u0006int ()\u0017Upp::Raster::GetWidth()\u000Eint GetWidth()\u0003Upp\bGETWIDTH\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tGetHeight\u0006int ()\u0018Upp::Raster::GetHeight()\u000Fint GetHeight()\u0003Upp\tGETHEIGHT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\noperator[]\nLine (int)\u001CUpp::Raster::operator[](int)\u0016Line operator[](int i)\u0003Upp\nOPERATOR[]\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bGetImage0Image (int, int, int, int, const Gate<int, int>)1Upp::Raster::GetImage(int,int,int,int,const Gate)RImage GetImage(int x, int y, int cx, int cy, const Gate<int, int> progress = Null)\u0003Upp\bGETIMAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bGetImage\u001CImage (const Gate<int, int>)!Upp::Raster::GetImage(const Gate)4Image GetImage(const Gate<int, int> progress = Null)\u0003Upp\bGETIMAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a~Raster\u0010void () noexcept\u0010Upp::Raster::~()\t~Raster()\u0003Upp\a~RASTER\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0014\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nRasterLine\u000FUpp::RasterLine\u000FUpp::RasterLine\u001Ftypedef Raster::Line RasterLine\u0003Upp\nRASTERLINE\u0003Upp\u0003UPP\u0011Upp::Raster::Line\u0000\u0014\u0000\u0000\u0000\u0015\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u001F\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\nRasterInfo\u000FUpp::RasterInfo\u000FUpp::RasterInfo\u001Ftypedef Raster::Info RasterInfo\u0003Upp\nRASTERINFO\u0003Upp\u0003UPP\u0011Upp::Raster::Info\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¢\u0000\u0000\u0000\u0000\u0000\u0000\u0000¢\u0000\u0000\u0000I\u0000\u0000\u0000¢\u0000\u0000\u0000\u0000\u0000\u0000\u000FCreatePaletteCv%void (const RGBA *, int, PaletteCv &)0Upp::CreatePaletteCv(const RGBA*,int,PaletteCv&)Ivoid CreatePaletteCv(const RGBA *palette, int ncolors, PaletteCv& cv_pal)\u0003Upp\u000FCREATEPALETTECV\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0000\u0000\u0000£\u0000\u0000\u0000>\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0000\u0000\rCreatePalette\u001Cvoid (Raster &, RGBA *, int)%Upp::CreatePalette(Raster&,RGBA*,int)>void CreatePalette(Raster& raster, RGBA *palette, int ncolors)\u0003Upp\rCREATEPALETTE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¤\u0000\u0000\u0000\u0000\u0000\u0000\u0000¤\u0000\u0000\u0000M\u0000\u0000\u0000¤\u0000\u0000\u0000\u0000\u0000\u0000\rCreatePalette)void (Raster &, RGBA *, int, PaletteCv &)0Upp::CreatePalette(Raster&,RGBA*,int,PaletteCv&)Mvoid CreatePalette(Raster& raster, RGBA *palette, int ncolors, PaletteCv& cv)\u0003Upp\rCREATEPALETTE\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\vImageRaster\u0010Upp::ImageRaster\u0010Upp::ImageRaster\u001BImageRaster : public Raster\u0003Upp\vIMAGERASTER\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\vUpp::Raster\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0000§\u0000\u0000\u0000\n\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0003img\u0005Image\u0015Upp::ImageRaster::img\tImage img\u0003Upp\u0003IMG\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000\u001A\u0000\u0000\u0000ª\u0000\u0000\u0000\u0000\u0001\u0000\aGetSize\aSize ()\u001BUpp::ImageRaster::GetSize()\u000ESize GetSize()\u0003Upp\aGETSIZE\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\u0000«\u0000\u0000\u0000\"\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0001\u0000\aGetLine\nLine (int)\u001EUpp::ImageRaster::GetLine(int)\u0016Line GetLine(int line)\u0003Upp\aGETLINE\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\u0000¬\u0000\u0000\u0000\u001A\u0000\u0000\u0000¬\u0000\u0000\u0000\u0000\u0001\u0000\aGetInfo\aInfo ()\u001BUpp::ImageRaster::GetInfo()\u000EInfo GetInfo()\u0003Upp\aGETINFO\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000®\u0000\u0000\u0000\u0001\u0000\u0000\u0000®\u0000\u0000\u0000,\u0000\u0000\u0000®\u0000\u0000\u0000\u0001\u0000\u0000\vImageRaster\u0014void (const Image &)+Upp::ImageRaster::ImageRaster(const Image&)\u001DImageRaster(const Image& img)\u0003Upp\vIMAGERASTER\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\fMemoryRaster\u0011Upp::MemoryRaster\u0011Upp::MemoryRaster\u001CMemoryRaster : public Raster\u0003Upp\fMEMORYRASTER\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\vUpp::Raster\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0000²\u0000\u0000\u0000\u0017\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0006format\fRasterFormat\u0019Upp::MemoryRaster::format\u0013RasterFormat format\u0003Upp\u0006FORMAT\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000\u0015\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\u0004info\u0004Info\u0017Upp::MemoryRaster::info\tInfo info\u0003Upp\u0004INFO\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\u0000´\u0000\u0000\u0000\u0015\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\u0004size\u0004Size\u0017Upp::MemoryRaster::size\tSize size\u0003Upp\u0004SIZE\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000\u001D\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0005lines\u0014Vector<Buffer<byte>>\u0018Upp::MemoryRaster::lines\u001AVector<Buffer<byte>> lines\u0003Upp\u0005LINES\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\u0000¶\u0000\u0000\u0000\u0018\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\apalette\fVector<RGBA>\u001AUpp::MemoryRaster::palette\u0014Vector<RGBA> palette\u0003Upp\aPALETTE\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000>\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0001\u0000\aGetSize\aSize ()\u001CUpp::MemoryRaster::GetSize()\u000ESize GetSize()\u0003Upp\aGETSIZE\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000>\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0001\u0000\aGetInfo\aInfo ()\u001CUpp::MemoryRaster::GetInfo()\u000EInfo GetInfo()\u0003Upp\aGETINFO\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000»\u0000\u0000\u0000-\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0001\u0000\aGetLine\nLine (int)\u001FUpp::MemoryRaster::GetLine(int)\u0016Line GetLine(int line)\u0003Upp\aGETLINE\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000¼\u0000\u0000\u0000L\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0001\u0000\u000FGetPaletteCount\u0006int ()$Upp::MemoryRaster::GetPaletteCount()\u0015int GetPaletteCount()\u0003Upp\u000FGETPALETTECOUNT\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001D\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0000\u0000\u0000½\u0000\u0000\u0000I\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0001\u0000\nGetPalette\u000Econst RGBA *()\u001FUpp::MemoryRaster::GetPalette()\u0018const RGBA *GetPalette()\u0003Upp\nGETPALETTE\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001D\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0000\u0000\u0000A\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0001\u0000\tGetFormat\u0016const RasterFormat *()\u001EUpp::MemoryRaster::GetFormat()\u001Fconst RasterFormat *GetFormat()\u0003Upp\tGETFORMAT\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u00000\u0000\u0000\u0000À\u0000\u0000\u0000\u0000\u0000\u0000\u0004Load\u000Fvoid (Raster &) Upp::MemoryRaster::Load(Raster&)\u0019void Load(Raster& raster)\u0003Upp\u0004LOAD\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0000Á\u0000\u0000\u0000-\u0000\u0000\u0000Á\u0000\u0000\u0000\u0000\u0000\u0000\tGetLength\fint () const#Upp::MemoryRaster::GetLength()const\u0015int GetLength() const\u0003Upp\tGETLENGTH\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0000\u0000\u0000\u000F\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0000\u0000\u0000\fMemoryRaster\avoid ()!Upp::MemoryRaster::MemoryRaster()\u000EMemoryRaster()\u0003Upp\fMEMORYRASTER\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000?\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\fMemoryRaster\u000Fvoid (Raster &)(Upp::MemoryRaster::MemoryRaster(Raster&)\u001CMemoryRaster(Raster& raster)\u0003Upp\fMEMORYRASTER\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\fStreamRaster\u0011Upp::StreamRaster\u0011Upp::StreamRaster\u001CStreamRaster : public Raster\u0003Upp\fSTREAMRASTER\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\vUpp::Raster\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000\n\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0001s\bStream *\u0014Upp::StreamRaster::s\tStream *s\u0003Upp\u0001S\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000\u000E\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0005error\u0004bool\u0018Upp::StreamRaster::error\nbool error\u0003Upp\u0005ERROR\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0014\u0000\u0000\u0000\u0019\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0000\u0000\u0000)\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\rRasterFactory Upp::StreamRaster::RasterFactory Upp::StreamRaster::RasterFactory(typedef StreamRaster *(*RasterFactory)()\u0003Upp\rRASTERFACTORY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u001E\u0000\u0000\u0000)\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ì\u0000\u0000\u0000F\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\tFactoryFn\u0010StreamRaster *()\u001EUpp::StreamRaster::FactoryFn()3template <class T> static StreamRaster *FactoryFn()\u0003Upp\tFACTORYFN\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000'\u0000\u0000\u0000Í\u0000\u0000\u0000\u0000\u0000\u0001\tAddFormat\u0014void (RasterFactory)+Upp::StreamRaster::AddFormat(RasterFactory)&static void AddFormat(RasterFactory f)\u0003Upp\tADDFORMAT\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\u0000Î\u0000\u0000\u0000\u001D\u0000\u0000\u0000Î\u0000\u0000\u0000\u0000\u0000\u0001\u0003Map\u0012Vector<void *> &()\u0018Upp::StreamRaster::Map()\u001Cstatic Vector<void *>& Map()\u0003Upp\u0003MAP\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ñ\u0000\u0000\u00003\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\tGetStream\nStream &()\u001EUpp::StreamRaster::GetStream()\u0013Stream& GetStream()\u0003Upp\tGETSTREAM\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0019\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0000\u0000\u0000\u0004Open\u000Fbool (Stream &) Upp::StreamRaster::Open(Stream&)\u0015bool Open(Stream& _s)\u0003Upp\u0004OPEN\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0000\u0001\u0000\aIsError\abool ()\u001CUpp::StreamRaster::IsError()\u000Ebool IsError()\u0003Upp\aISERROR\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u00006\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\bSetError\avoid ()\u001DUpp::StreamRaster::SetError()\u000Fvoid SetError()\u0003Upp\bSETERROR\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000×\u0000\u0000\u0000\u0001\u0000\u0000\u0000×\u0000\u0000\u0000<\u0000\u0000\u0000×\u0000\u0000\u0000\u0000\u0000\u0000\u0004Load&Image (Stream &, const Gate<int, int>)+Upp::StreamRaster::Load(Stream&,const Gate);Image Load(Stream& s, const Gate<int, int> progress = Null)\u0003Upp\u0004LOAD\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0000\u0000\u0000E\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0000\u0000\u0000\bLoadFile*Image (const char *, const Gate<int, int>)3Upp::StreamRaster::LoadFile(const char*,const Gate)DImage LoadFile(const char *fn, const Gate<int, int> progress = Null)\u0003Upp\bLOADFILE\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0000\u0000\u0000H\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0000\u0000\u0000\vLoadStringA,Image (const String &, const Gate<int, int>)8Upp::StreamRaster::LoadStringA(const String&,const Gate)HImage LoadStringA(const String& s, const Gate<int, int> progress = Null)\u0003Upp\vLOADSTRINGA\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u001E\u0000\u0000\u0000\r\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000Û\u0000\u0000\u0000P\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\bRegister\avoid ()\u001DUpp::StreamRaster::Register())template <class T> static void Register()\u0003Upp\bREGISTER\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0000\u0000\u0000,\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0000\u0000\u0001\aOpenAny\u001COne<StreamRaster> (Stream &)#Upp::StreamRaster::OpenAny(Stream&)+static One<StreamRaster> OpenAny(Stream& s)\u0003Upp\aOPENANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000@\u0000\u0000\u0000ß\u0000\u0000\u0000\u0000\u0000\u0001\aLoadAny Image (Stream &, Gate<int, int>)(Upp::StreamRaster::LoadAny(Stream&,Gate)?static Image LoadAny(Stream& s, Gate<int, int> progress = Null)\u0003Upp\aLOADANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000à\u0000\u0000\u0000\u0001\u0000\u0000\u0000à\u0000\u0000\u0000I\u0000\u0000\u0000à\u0000\u0000\u0000\u0000\u0000\u0001\vLoadFileAny$Image (const char *, Gate<int, int>)0Upp::StreamRaster::LoadFileAny(const char*,Gate)Hstatic Image LoadFileAny(const char *fn, Gate<int, int> progress = Null)\u0003Upp\vLOADFILEANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0000\u0000\u0000á\u0000\u0000\u0000L\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0001\rLoadStringAny&Image (const String &, Gate<int, int>)4Upp::StreamRaster::LoadStringAny(const String&,Gate)Kstatic Image LoadStringAny(const String& s, Gate<int, int> progress = Null)\u0003Upp\rLOADSTRINGANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u00006\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\fStreamRaster\avoid ()!Upp::StreamRaster::StreamRaster()\u000EStreamRaster()\u0003Upp\fSTREAMRASTER\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000æ\u0000\u0000\u0000\u0000\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\rRasterEncoder\u0012Upp::RasterEncoder\u0012Upp::RasterEncoder\rRasterEncoder\u0003Upp\rRASTERENCODER\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ç\u0000\u0000\u0000\u0014\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0004size\u0004Size\u0018Upp::RasterEncoder::size\tSize size\u0003Upp\u0004SIZE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ç\u0000\u0000\u0000\u001A\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0004dots\u0004Size\u0018Upp::RasterEncoder::dots\tSize dots\u0003Upp\u0004DOTS\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0000\u0000\u0000\u0017\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\ahotspot\u0005Point\u001BUpp::RasterEncoder::hotspot\rPoint hotspot\u0003Upp\aHOTSPOT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0000\u0000\u0000\u0014\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\u0004line\u0006RGBA *\u0018Upp::RasterEncoder::line\nRGBA *line\u0003Upp\u0004LINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000ê\u0000\u0000\u0000\u0018\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\bscanline\fBuffer<byte>\u001CUpp::RasterEncoder::scanline\u0015Buffer<byte> scanline\u0003Upp\bSCANLINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ë\u0000\u0000\u0000\u001A\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\nline_bytes\u0003int\u001EUpp::RasterEncoder::line_bytes\u000Eint line_bytes\u0003Upp\nLINE_BYTES\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000ì\u0000\u0000\u0000\u0011\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0001h\fBuffer<RGBA>\u0015Upp::RasterEncoder::h\u000EBuffer<RGBA> h\u0003Upp\u0001H\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\u0000í\u0000\u0000\u0000\u0017\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\apalette\fBuffer<RGBA>\u001BUpp::RasterEncoder::palette\u0014Buffer<RGBA> palette\u0003Upp\aPALETTE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\u0000î\u0000\u0000\u0000\u001A\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\npalette_cv\u000EOne<PaletteCv>\u001EUpp::RasterEncoder::palette_cv\u0019One<PaletteCv> palette_cv\u0003Upp\nPALETTE_CV\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000\u0015\u0000\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0000\u0003Pal\bRGBA *()\u0019Upp::RasterEncoder::Pal()\vRGBA *Pal()\u0003Upp\u0003PAL\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000ó\u0000\u0000\u0000\u0016\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0006format\fRasterFormat\u001AUpp::RasterEncoder::format\u0013RasterFormat format\u0003Upp\u0006FORMAT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000ô\u0000\u0000\u0000$\u0000\u0000\u0000ô\u0000\u0000\u0000\u0000\u0000\u0000\aSetLine\rvoid (RGBA *)\"Upp::RasterEncoder::SetLine(RGBA*)\u0019void SetLine(RGBA *_line)\u0003Upp\aSETLINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\u0000÷\u0000\u0000\u0000\u001F\u0000\u0000\u0000÷\u0000\u0000\u0000\u0000\u0001\u0000\u000FGetPaletteCount\u0006int ()%Upp::RasterEncoder::GetPaletteCount()\u0015int GetPaletteCount()\u0003Upp\u000FGETPALETTECOUNT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000ø\u0000\u0000\u0000 \u0000\u0000\u0000ø\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\vvoid (Size)\u001FUpp::RasterEncoder::Start(Size)\u0013void Start(Size sz)\u0003Upp\u0005START\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000ù\u0000\u0000\u00000\u0000\u0000\u0000ù\u0000\u0000\u0000\u0000\u0001\u0000\fWriteLineRaw\u0013void (const byte *)-Upp::RasterEncoder::WriteLineRaw(const byte*)#void WriteLineRaw(const byte *data)\u0003Upp\fWRITELINERAW\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u0011\u0000\u0000\u0000û\u0000\u0000\u0000\u0000\u0000\u0000\tWriteLine\avoid ()\u001FUpp::RasterEncoder::WriteLine()\u0010void WriteLine()\u0003Upp\tWRITELINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000ü\u0000\u0000\u0000\u001E\u0000\u0000\u0000ü\u0000\u0000\u0000\u0000\u0000\u0000\tWriteLine\u0013void (const RGBA *)*Upp::RasterEncoder::WriteLine(const RGBA*)\u001Dvoid WriteLine(const RGBA *s)\u0003Upp\tWRITELINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000þ\u0000\u0000\u0000@\u0000\u0000\u0000þ\u0000\u0000\u0000\u0001\u0000\u0000\tGetFormat\u001Cconst RasterFormat &() const$Upp::RasterEncoder::GetFormat()const%const RasterFormat& GetFormat() const\u0003Upp\tGETFORMAT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0000\u0000\u0000!\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0000\u0000\u0000\nGetPalette\u000Econst RGBA *() Upp::RasterEncoder::GetPalette()\u0018const RGBA *GetPalette()\u0003Upp\nGETPALETTE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000E\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\fGetPaletteCv\u0013const PaletteCv *()\"Upp::RasterEncoder::GetPaletteCv()\u001Fconst PaletteCv *GetPaletteCv()\u0003Upp\fGETPALETTECV\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0001\u0000\u0000>\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\u0014operator Upp::RGBA *\bRGBA *()$Upp::RasterEncoder::operator RGBA*()\u0011operator RGBA *()\u0003Upp\u0014OPERATOR UPP::RGBA *\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0001\u0000\u0000>\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\toperator~\bRGBA *()\u001FUpp::RasterEncoder::operator~()\u0011RGBA *operator~()\u0003Upp\tOPERATOR~\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0001\u0000\u0000>\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\aGetSize\rSize () const\"Upp::RasterEncoder::GetSize()const\u0014Size GetSize() const\u0003Upp\aGETSIZE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0001\u0000\u0000F\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\bGetWidth\fint () const#Upp::RasterEncoder::GetWidth()const\u0014int GetWidth() const\u0003Upp\bGETWIDTH\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0001\u0000\u0000F\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0000\u0000\tGetHeight\fint () const$Upp::RasterEncoder::GetHeight()const\u0015int GetHeight() const\u0003Upp\tGETHEIGHT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\u0000\b\u0001\u0000\u0000>\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\nSetHotSpot\fvoid (Point)%Upp::RasterEncoder::SetHotSpot(Point)\u0018void SetHotSpot(Point p)\u0003Upp\nSETHOTSPOT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\u0000\t\u0001\u0000\u0000A\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\nGetHotSpot\u000EPoint () const%Upp::RasterEncoder::GetHotSpot()const\u0018Point GetHotSpot() const\u0003Upp\nGETHOTSPOT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000?\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\aSetDots\vvoid (Size)!Upp::RasterEncoder::SetDots(Size)\u0018void SetDots(Size _dots)\u0003Upp\aSETDOTS\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0001\u0000\u0000\u0001\u0000\u0000\u0000\f\u0001\u0000\u0000>\u0000\u0000\u0000\f\u0001\u0000\u0000\u0001\u0000\u0000\aGetDots\rSize () const\"Upp::RasterEncoder::GetDots()const\u0014Size GetDots() const\u0003Upp\aGETDOTS\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0001\u0000\u0000%\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0000\u0000\u0000\nSetPalette\u0013void (const RGBA *)+Upp::RasterEncoder::SetPalette(const RGBA*)$void SetPalette(const RGBA *palette)\u0003Upp\nSETPALETTE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000$\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\nSetPalette\u000Fvoid (Raster &)'Upp::RasterEncoder::SetPalette(Raster&)#void SetPalette(Raster& pal_raster)\u0003Upp\nSETPALETTE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0000\u0006Create\vvoid (Size) Upp::RasterEncoder::Create(Size)\u0014void Create(Size sz)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0001\u0000\u0000G\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0006Create\u000Fvoid (int, int)#Upp::RasterEncoder::Create(int,int)\u001Bvoid Create(int cx, int cy)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0001\u0000\u0000*\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0000\u0000\u0000\u0006Create\u0019void (Size, const RGBA *),Upp::RasterEncoder::Create(Size,const RGBA*))void Create(Size sz, const RGBA *palette)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u00001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0000\u0006Create\u001Dvoid (int, int, const RGBA *)/Upp::RasterEncoder::Create(int,int,const RGBA*)0void Create(int cx, int cy, const RGBA *palette)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000)\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0000\u0006Create\u0015void (Size, Raster &)(Upp::RasterEncoder::Create(Size,Raster&)(void Create(Size sz, Raster& pal_raster)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0001\u0000\u00000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0000\u0006Create\u0019void (int, int, Raster &)+Upp::RasterEncoder::Create(int,int,Raster&)/void Create(int cx, int cy, Raster& pal_raster)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u0000\rRasterEncoder\avoid ()#Upp::RasterEncoder::RasterEncoder()\u000FRasterEncoder()\u0003Upp\rRASTERENCODER\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0019\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0000\u0000\u0000\u000E~RasterEncoder\u0010void () noexcept\u0017Upp::RasterEncoder::~()\u0010~RasterEncoder()\u0003Upp\u000E~RASTERENCODER\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\fImageEncoder\u0011Upp::ImageEncoder\u0011Upp::ImageEncoder#ImageEncoder : public RasterEncoder\u0003Upp\fIMAGEENCODER\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0012Upp::RasterEncoder\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u000F\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\u0002ii\u0003int\u0015Upp::ImageEncoder::ii\u0006int ii\u0003Upp\u0002II\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u000F\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u0002ib\vImageBuffer\u0015Upp::ImageEncoder::ib\u000EImageBuffer ib\u0003Upp\u0002IB\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000\"\u0001\u0000\u0000\u001C\u0000\u0000\u0000\"\u0001\u0000\u0000\u0000\u0001\u0000\u0005Start\vvoid (Size)\u001EUpp::ImageEncoder::Start(Size)\u0013void Start(Size sz)\u0003Upp\u0005START\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0000#\u0001\u0000\u0000,\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0001\u0000\fWriteLineRaw\u0013void (const byte *),Upp::ImageEncoder::WriteLineRaw(const byte*)#void WriteLineRaw(const byte *data)\u0003Upp\fWRITELINERAW\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u0000%\u0001\u0000\u0000:\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u001Aoperator const Upp::RGBA *\u000Econst RGBA *())Upp::ImageEncoder::operator const RGBA*()\u0017operator const RGBA *()\u0003Upp\u001AOPERATOR CONST UPP::RGBA *\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000:\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u000Eoperator Image\bImage ()#Upp::ImageEncoder::operator Image()\u0010operator Image()\u0003Upp\u000EOPERATOR IMAGE\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\u0013StreamRasterEncoder\u0018Upp::StreamRasterEncoder\u0018Upp::StreamRasterEncoder*StreamRasterEncoder : public RasterEncoder\u0003Upp\u0013STREAMRASTERENCODER\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0012Upp::RasterEncoder\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000\n\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0001s\bStream *\u001BUpp::StreamRasterEncoder::s\tStream *s\u0003Upp\u0001S\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u00003\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\tGetStream\nStream &()%Upp::StreamRasterEncoder::GetStream()\u0013Stream& GetStream()\u0003Upp\tGETSTREAM\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000\u0000.\u0001\u0000\u00001\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000\tSetStream\u000Fvoid (Stream &),Upp::StreamRasterEncoder::SetStream(Stream&)\u001Avoid SetStream(Stream& _s)\u0003Upp\tSETSTREAM\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u00000\u0001\u0000\u0000(\u0000\u0000\u00000\u0001\u0000\u0000\u0000\u0000\u0000\u0004Save\u0019void (Stream &, Raster &)/Upp::StreamRasterEncoder::Save(Stream&,Raster&)$void Save(Stream& s, Raster& raster)\u0003Upp\u0004SAVE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\u00001\u0001\u0000\u00001\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000\u0000\bSaveFile\u001Dbool (const char *, Raster &)7Upp::StreamRasterEncoder::SaveFile(const char*,Raster&)-bool SaveFile(const char *fn, Raster& raster)\u0003Upp\bSAVEFILE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000#\u0000\u0000\u00002\u0001\u0000\u0000\u0000\u0000\u0000\nSaveString\u0011String (Raster &)-Upp::StreamRasterEncoder::SaveString(Raster&)!String SaveString(Raster& raster)\u0003Upp\nSAVESTRING\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00004\u0001\u0000\u0000*\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u0004Save\u001Evoid (Stream &, const Image &)4Upp::StreamRasterEncoder::Save(Stream&,const Image&)&void Save(Stream& s, const Image& img)\u0003Upp\u0004SAVE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\u00005\u0001\u0000\u00003\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000\u0000\bSaveFile\"bool (const char *, const Image &)<Upp::StreamRasterEncoder::SaveFile(const char*,const Image&)/bool SaveFile(const char *fn, const Image& img)\u0003Upp\bSAVEFILE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u00006\u0001\u0000\u0000\u0001\u0000\u0000\u00006\u0001\u0000\u0000%\u0000\u0000\u00006\u0001\u0000\u0000\u0000\u0000\u0000\nSaveString\u0016String (const Image &)2Upp::StreamRasterEncoder::SaveString(const Image&)#String SaveString(const Image& img)\u0003Upp\nSAVESTRING\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000end\u0000y\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h","value":"dataÎ\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vCreateImage\u001AImage (Size, const RGBA &)\"Upp::CreateImage(Size,const RGBA&),Image CreateImage(Size sz, const RGBA& rgba)\u0003Upp\vCREATEIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\vCreateImage\u0013Image (Size, Color)\u001CUpp::CreateImage(Size,Color)'Image CreateImage(Size sz, Color color)\u0003Upp\vCREATEIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u00002\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0011SetColorKeepAlpha\u001CImage (const Image &, Color)*Upp::SetColorKeepAlpha(const Image&,Color)2Image SetColorKeepAlpha(const Image& img, Color c)\u0003Upp\u0011SETCOLORKEEPALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000H\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\vSetHotSpots\u001Cvoid (Image &, Point, Point)$Upp::SetHotSpots(Image&,Point,Point)Gvoid SetHotSpots(Image& m, Point hotspot, Point hotspot2 = Point(0, 0))\u0003Upp\vSETHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000O\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\fWithHotSpots#Image (const Image &, Point, Point)+Upp::WithHotSpots(const Image&,Point,Point)OImage WithHotSpots(const Image& m, Point hotspot, Point hotspot2 = Point(0, 0))\u0003Upp\fWITHHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000B\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\fWithHotSpots)Image (const Image &, int, int, int, int)/Upp::WithHotSpots(const Image&,int,int,int,int)BImage WithHotSpots(const Image& m, int x1, int y1, int x2, int y2)\u0003Upp\fWITHHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u00001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\vWithHotSpot\u001FImage (const Image &, int, int)&Upp::WithHotSpot(const Image&,int,int)1Image WithHotSpot(const Image& m, int x1, int y1)\u0003Upp\vWITHHOTSPOT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u001A\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\nScanOpaque\u000Evoid (Image &)\u0017Upp::ScanOpaque(Image&)\u0019void ScanOpaque(Image& m)\u0003Upp\nSCANOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000V\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\bDstSrcOpcvoid (ImageBuffer &, Point, const Image &, const Rect &, void (*)(RGBA *, const RGBA *, int), bool)^Upp::DstSrcOp(ImageBuffer&,Point,const Image&,const Rect&,void(*)(RGBA*,const RGBA*,int),bool)ÿ\u0000\u0000\u0000void DstSrcOp(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, void (*op)(RGBA *, const RGBA *, int), bool co = false)\u0003Upp\bDSTSRCOP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000[\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0004Copy>void (ImageBuffer &, Point, const Image &, const Rect &, bool);Upp::Copy(ImageBuffer&,Point,const Image&,const Rect&,bool)[void Copy(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, bool co = false)\u0003Upp\u0004COPY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000[\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0004Over>void (ImageBuffer &, Point, const Image &, const Rect &, bool);Upp::Over(ImageBuffer&,Point,const Image&,const Rect&,bool)[void Over(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, bool co = false)\u0003Upp\u0004OVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000V\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0004Over8void (Image &, Point, const Image &, const Rect &, bool)5Upp::Over(Image&,Point,const Image&,const Rect&,bool)Vvoid Over(Image& dest, Point p, const Image& _src, const Rect& srect, bool co = false)\u0003Upp\u0004OVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000:\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0004Over#void (Image &, const Image &, bool)#Upp::Over(Image&,const Image&,bool):void Over(Image& dest, const Image& _src, bool co = false)\u0003Upp\u0004OVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000:\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0004Fill(void (ImageBuffer &, const Rect &, RGBA)(Upp::Fill(ImageBuffer&,const Rect&,RGBA):void Fill(ImageBuffer& dest, const Rect& rect, RGBA color)\u0003Upp\u0004FILL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000V\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0004Copy8void (Image &, Point, const Image &, const Rect &, bool)5Upp::Copy(Image&,Point,const Image&,const Rect&,bool)Uvoid Copy(Image& dest, Point p, const Image& src, const Rect& srect, bool co = false)\u0003Upp\u0004COPY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u00002\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\aGetOver$Image (const Image &, const Image &)'Upp::GetOver(const Image&,const Image&)2Image GetOver(const Image& dest, const Image& src)\u0003Upp\aGETOVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u00005\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0004Fill\"void (Image &, const Rect &, RGBA)\"Upp::Fill(Image&,const Rect&,RGBA)4void Fill(Image& dest, const Rect& rect, RGBA color)\u0003Upp\u0004FILL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000/\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0004Copy#Image (const Image &, const Rect &)#Upp::Copy(const Image&,const Rect&)/Image Copy(const Image& src, const Rect& srect)\u0003Upp\u0004COPY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000j\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0012OverStraightOpaque>void (ImageBuffer &, Point, const Image &, const Rect &, bool)IUpp::OverStraightOpaque(ImageBuffer&,Point,const Image&,const Rect&,bool)ivoid OverStraightOpaque(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, bool co = false)\u0003Upp\u0012OVERSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000e\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0012OverStraightOpaque8void (Image &, Point, const Image &, const Rect &, bool)CUpp::OverStraightOpaque(Image&,Point,const Image&,const Rect&,bool)dvoid OverStraightOpaque(Image& dest, Point p, const Image& _src, const Rect& srect, bool co = false)\u0003Upp\u0012OVERSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000;\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0004Crop.void (RasterEncoder &, Raster &, const Rect &)-Upp::Crop(RasterEncoder&,Raster&,const Rect&):void Crop(RasterEncoder& tgt, Raster& img, const Rect& rc)\u0003Upp\u0004CROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0000\u0000\u0000,\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0004Crop#Image (const Image &, const Rect &)#Upp::Crop(const Image&,const Rect&),Image Crop(const Image& img, const Rect& rc)\u0003Upp\u0004CROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000:\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0004Crop)Image (const Image &, int, int, int, int)'Upp::Crop(const Image&,int,int,int,int):Image Crop(const Image& img, int x, int y, int cx, int cy)\u0003Upp\u0004CROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000X\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\nAddMargins/Image (const Image &, int, int, int, int, RGBA)2Upp::AddMargins(const Image&,int,int,int,int,RGBA)XImage AddMargins(const Image& img, int left, int top, int right, int bottom, RGBA color)\u0003Upp\nADDMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u00006\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\nFindBounds\u001ARect (const Image &, RGBA)\"Upp::FindBounds(const Image&,RGBA)5Rect FindBounds(const Image& m, RGBA bg = RGBAZero())\u0003Upp\nFINDBOUNDS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u00004\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\bAutoCrop\u001BImage (const Image &, RGBA) Upp::AutoCrop(const Image&,RGBA)4Image AutoCrop(const Image& m, RGBA bg = RGBAZero())\u0003Upp\bAUTOCROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u00009\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\bAutoCrop\u0019void (Image *, int, RGBA)\u001EUpp::AutoCrop(Image*,int,RGBA)8void AutoCrop(Image *m, int count, RGBA bg = RGBAZero())\u0003Upp\bAUTOCROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u001D\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\rClampHotSpots\u000Evoid (Image &)\u001AUpp::ClampHotSpots(Image&)\u001Cvoid ClampHotSpots(Image& m)\u0003Upp\rCLAMPHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u00004\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\tColorMask\u001CImage (const Image &, Color)\"Upp::ColorMask(const Image&,Color)4Image ColorMask(const Image& src, Color transparent)\u0003Upp\tCOLORMASK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000A\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\nCanvasSize*void (RasterEncoder &, Raster &, int, int)/Upp::CanvasSize(RasterEncoder&,Raster&,int,int)@void CanvasSize(RasterEncoder& tgt, Raster& img, int cx, int cy)\u0003Upp\nCANVASSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u00002\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\nCanvasSize\u001FImage (const Image &, int, int)%Upp::CanvasSize(const Image&,int,int)2Image CanvasSize(const Image& img, int cx, int cy)\u0003Upp\nCANVASSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000;\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\vAssignAlpha$Image (const Image &, const Image &)+Upp::AssignAlpha(const Image&,const Image&);Image AssignAlpha(const Image& img, const Image& new_alpha)\u0003Upp\vASSIGNALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000!\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\tGrayscale\u0015Image (const Image &)\u001CUpp::Grayscale(const Image&)!Image Grayscale(const Image& img)\u0003Upp\tGRAYSCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000-\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\tGrayscale\u001AImage (const Image &, int) Upp::Grayscale(const Image&,int)-Image Grayscale(const Image& img, int amount)\u0003Upp\tGRAYSCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u00002\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\bContrast\u001AImage (const Image &, int)\u001FUpp::Contrast(const Image&,int)2Image Contrast(const Image& img, int amount = 256)\u0003Upp\bCONTRAST\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000.\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\vHorzFadeOut\u0017Image (int, int, Color)\u001FUpp::HorzFadeOut(int,int,Color).Image HorzFadeOut(int cx, int cy, Color color)\u0003Upp\vHORZFADEOUT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000'\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\vHorzFadeOut\u0013Image (Size, Color)\u001CUpp::HorzFadeOut(Size,Color)'Image HorzFadeOut(Size sz, Color color)\u0003Upp\vHORZFADEOUT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000N\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u000EDrawRasterData1void (Draw &, int, int, int, int, const String &)8Upp::DrawRasterData(Draw&,int,int,int,int,const String&)Nvoid DrawRasterData(Draw& w, int x, int y, int cx, int cy, const String& data)\u0003Upp\u000EDRAWRASTERDATA\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\fRescaleImage\u0011Upp::RescaleImage\u0011Upp::RescaleImage\fRescaleImage\u0003Upp\fRESCALEIMAGE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u0012\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0003src\bRaster *\u0016Upp::RescaleImage::src\vRaster *src\u0003Upp\u0003SRC\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0012\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0003tsz\u0004Size\u0016Upp::RescaleImage::tsz\bSize tsz\u0003Upp\u0003TSZ\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0013\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0004horz\rVector<dword>\u0017Upp::RescaleImage::horz\u0012Vector<dword> horz\u0003Upp\u0004HORZ\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0013\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0004vert\rVector<dword>\u0017Upp::RescaleImage::vert\u0012Vector<dword> vert\u0003Upp\u0004VERT\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000H\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\brow_proc.void (*)(dword *, const RGBA *, const dword *)\u001BUpp::RescaleImage::row_proc6void (*row_proc)(dword *, const RGBA *, const dword *)\u0003Upp\bROW_PROC\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\n\u0000\u0000\u0000 \u0000\u0000\u0000?\u0000\u0000\u0000\u0019\u0000\u0000\u0000?\u0000\u0000\u0000$\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0004dest\adword *\u0004dest\vdword *dest\u0000\u0004DEST\u0000\u0000\u0000\u0000\n\u0000\u0000\u00002\u0000\u0000\u0000?\u0000\u0000\u0000&\u0000\u0000\u0000?\u0000\u0000\u00005\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0003src\fconst RGBA *\u0003src\u000Fconst RGBA *src\u0000\u0003SRC\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000D\u0000\u0000\u0000?\u0000\u0000\u00007\u0000\u0000\u0000?\u0000\u0000\u0000G\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0003map\rconst dword *\u0003map\u0010const dword *map\u0000\u0003MAP\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0013\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0004size\u0004Size\u0017Upp::RescaleImage::size\tSize size\u0003Upp\u0004SIZE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0012\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0003cx4\u0003int\u0016Upp::RescaleImage::cx4\aint cx4\u0003Upp\u0003CX4\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u0014\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0005count\u0003int\u0018Upp::RescaleImage::count\tint count\u0003Upp\u0005COUNT\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0016\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\asegment\u0003int\u001AUpp::RescaleImage::segment\vint segment\u0003Upp\aSEGMENT\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0014\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0005entry\u0003int\u0018Upp::RescaleImage::entry\tint entry\u0003Upp\u0005ENTRY\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0013\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0004step\u0003int\u0017Upp::RescaleImage::step\bint step\u0003Upp\u0004STEP\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0016\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\asegspan\u0003int\u001AUpp::RescaleImage::segspan\vint segspan\u0003Upp\aSEGSPAN\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000\u0015\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0006bigseg\u0004bool\u0019Upp::RescaleImage::bigseg\vbool bigseg\u0003Upp\u0006BIGSEG\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u001A\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\vrow_buffers\rBuffer<dword>\u001EUpp::RescaleImage::row_buffers\u0019Buffer<dword> row_buffers\u0003Upp\vROW_BUFFERS\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0014\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0005first\u0003int\u0018Upp::RescaleImage::first\tint first\u0003Upp\u0005FIRST\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0013\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0004full\u0003int\u0017Upp::RescaleImage::full\bint full\u0003Upp\u0004FULL\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0016\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\aoffsets\rconst dword *\u001AUpp::RescaleImage::offsets\u0014const dword *offsets\u0003Upp\aOFFSETS\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u0015\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0006offset\u0003int\u0019Upp::RescaleImage::offset\nint offset\u0003Upp\u0006OFFSET\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0010\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0001y\u0003int\u0014Upp::RescaleImage::y\u0005int y\u0003Upp\u0001Y\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0002\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0002Ln\u0015Upp::RescaleImage::Ln\u0015Upp::RescaleImage::Ln\u0002Ln\u0003Upp\u0002LN\u0015Upp::RescaleImage::Ln\u0015UPP::RESCALEIMAGE::LN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000P\u0000\u0000\u0000\u0002\u0000\u0000\u0000P\u0000\u0000\u0000\u0011\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0004line\nRasterLine\u001BUpp::RescaleImage::Ln::line\u000FRasterLine line\u0003Upp\u0004LINE\u0015Upp::RescaleImage::Ln\u0015UPP::RESCALEIMAGE::LN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000Q\u0000\u0000\u0000\u0002\u0000\u0000\u0000Q\u0000\u0000\u0000\u000F\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0002ii\u0003int\u0019Upp::RescaleImage::Ln::ii\u0006int ii\u0003Upp\u0002II\u0015Upp::RescaleImage::Ln\u0015UPP::RESCALEIMAGE::LN\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000\u0017\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0005cache\u0005Ln[4]\u0018Upp::RescaleImage::cache\vLn cache[4]\u0003Upp\u0005CACHE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000\u0012\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0003cii\u0003int\u0016Upp::RescaleImage::cii\aint cii\u0003Upp\u0003CII\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000V\u0000\u0000\u0000\u001D\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\aGetLine\u0011const RGBA *(int)\u001FUpp::RescaleImage::GetLine(int)\u001Aconst RGBA *GetLine(int i)\u0003Upp\aGETLINE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u00006\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0000\u0000\u0006Create#void (Size, Raster &, const Rect &)3Upp::RescaleImage::Create(Size,Raster&,const Rect&)5void Create(Size sz, Raster& src, const Rect& src_rc)\u0003Upp\u0006CREATE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000\u0015\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0003Get\rvoid (RGBA *)\u001DUpp::RescaleImage::Get(RGBA*)\u0014void Get(RGBA *line)\u0003Upp\u0003GET\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000?\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\tCoRescale)Image (Size, const Image &, const Rect &);Upp::RescaleImage::CoRescale(Size,const Image&,const Rect&)>Image CoRescale(Size sz, const Image& img, const Rect& src_rc)\u0003Upp\tCORESCALE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0000\u0000\u0000-\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\aRescaleDbool (RasterEncoder &, Size, Raster &, const Rect &, Gate<int, int>):Upp::Rescale(RasterEncoder&,Size,Raster&,const Rect&,Gate)jbool Rescale(RasterEncoder& tgt, Size sz, Raster& src, const Rect& src_rc, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0000\u0000\u0000a\u0000\u0000\u0000\\\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0000\u0000\aRescale9Image (const Image &, Size, const Rect &, Gate<int, int>)0Upp::Rescale(const Image&,Size,const Rect&,Gate)\\Image Rescale(const Image& src, Size sz, const Rect& src_rc, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000b\u0000\u0000\u0000H\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0000\u0000\aRescale+Image (const Image &, Size, Gate<int, int>)$Upp::Rescale(const Image&,Size,Gate)HImage Rescale(const Image& src, Size sz, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000c\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\u0000\u0000\u0000O\u0000\u0000\u0000c\u0000\u0000\u0000\u0000\u0000\u0000\aRescale/Image (const Image &, int, int, Gate<int, int>)'Upp::Rescale(const Image&,int,int,Gate)OImage Rescale(const Image& src, int cx, int cy, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\fImageFilter9\u0011Upp::ImageFilter9\u0011Upp::ImageFilter9\fImageFilter9\u0003Upp\fIMAGEFILTER9\u0011Upp::ImageFilter9\u0011UPP::IMAGEFILTER9\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000-\u0000\u0000\u0000f\u0000\u0000\u0000\u0000\u0001\u0000\noperator()\u0014RGBA (const RGBA **)+Upp::ImageFilter9::operator()(const RGBA**) RGBA operator()(const RGBA **mx)\u0003Upp\nOPERATOR()\u0011Upp::ImageFilter9\u0011UPP::IMAGEFILTER9\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u001B\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\r~ImageFilter9\u0010void () noexcept\u0016Upp::ImageFilter9::~()\u000F~ImageFilter9()\u0003Upp\r~IMAGEFILTER9\u0011Upp::ImageFilter9\u0011UPP::IMAGEFILTER9\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0000\u0000\u00004\u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u0006Filter%Image (const Image &, ImageFilter9 &)'Upp::Filter(const Image&,ImageFilter9&)4Image Filter(const Image& img, ImageFilter9& filter)\u0003Upp\u0006FILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000F\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0006Filter0void (RasterEncoder &, Raster &, ImageFilter9 &)1Upp::Filter(RasterEncoder&,Raster&,ImageFilter9&)Evoid Filter(RasterEncoder& target, Raster& src, ImageFilter9& filter)\u0003Upp\u0006FILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000m\u0000\u0000\u0000\u001E\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0006Etched\u0015Image (const Image &)\u0019Upp::Etched(const Image&)\u001EImage Etched(const Image& img)\u0003Upp\u0006ETCHED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u00001\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\aSharpen\u001AImage (const Image &, int)\u001EUpp::Sharpen(const Image&,int)1Image Sharpen(const Image& img, int amount = 100)\u0003Upp\aSHARPEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0000\u0000\u0000o\u0000\u0000\u0000-\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0000\u0000\u0006Dither\u001AImage (const Image &, int)\u001DUpp::Dither(const Image&,int)-Image Dither(const Image& m, int dival = 394)\u0003Upp\u0006DITHER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000p\u0000\u0000\u0000\u0000\u0000\u0000\u0000p\u0000\u0000\u0000A\u0000\u0000\u0000p\u0000\u0000\u0000\u0000\u0000\u0000\fGaussianBlur Image (const Image &, int, bool)(Upp::GaussianBlur(const Image&,int,bool)AImage GaussianBlur(const Image& img, int radius, bool co = false)\u0003Upp\fGAUSSIANBLUR\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000'\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u000FRotateClockwise\u0015Image (const Image &)\"Upp::RotateClockwise(const Image&)'Image RotateClockwise(const Image& img)\u0003Upp\u000FROTATECLOCKWISE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0000\u0000\u0000+\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0013RotateAntiClockwise\u0015Image (const Image &)&Upp::RotateAntiClockwise(const Image&)+Image RotateAntiClockwise(const Image& img)\u0003Upp\u0013ROTATEANTICLOCKWISE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000\"\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\tRotate180\u0015Image (const Image &)\u001CUpp::Rotate180(const Image&)\"Image Rotate180(const Image& orig)\u0003Upp\tROTATE180\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0000\u0000\u0000\"\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000\u0000\nMirrorHorz\u0015Image (const Image &)\u001DUpp::MirrorHorz(const Image&)\"Image MirrorHorz(const Image& img)\u0003Upp\nMIRRORHORZ\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0000\u0000\u0000\"\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\nMirrorVert\u0015Image (const Image &)\u001DUpp::MirrorVert(const Image&)\"Image MirrorVert(const Image& img)\u0003Upp\nMIRRORVERT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0000w\u0000\u0000\u0000'\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0006Rotate\u001AImage (const Image &, int)\u001DUpp::Rotate(const Image&,int)'Image Rotate(const Image& m, int angle)\u0003Upp\u0006ROTATE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000!\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\tTranspose\u0015Image (const Image &)\u001CUpp::Transpose(const Image&)!Image Transpose(const Image& img)\u0003Upp\tTRANSPOSE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0000y\u0000\u0000\u0000\"\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\nTransverse\u0015Image (const Image &)\u001DUpp::Transverse(const Image&)\"Image Transverse(const Image& img)\u0003Upp\nTRANSVERSE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000)\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\tFlipImage\u001AImage (const Image &, int) Upp::FlipImage(const Image&,int))Image FlipImage(const Image& m, int mode)\u0003Upp\tFLIPIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000>\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\bColorize!Image (const Image &, Color, int)%Upp::Colorize(const Image&,Color,int)>Image Colorize(const Image& img, Color color, int alpha = 100)\u0003Upp\bCOLORIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u00001\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\tEqualight\u001AImage (const Image &, int) Upp::Equalight(const Image&,int)1Image Equalight(const Image& img, int thold = 10)\u0003Upp\tEQUALIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tDarkTheme\u0015Image (const Image &)\u001CUpp::DarkTheme(const Image&)!Image DarkTheme(const Image& img)\u0003Upp\tDARKTHEME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004Diff\u0010int (RGBA, RGBA)\u0014Upp::Diff(RGBA,RGBA)\u0018int Diff(RGBA a, RGBA b)\u0003Upp\u0004DIFF\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\aUnglyph(Image (const Image &, Color &, double &))Upp::Unglyph(const Image&,Color&,double&)7Image Unglyph(const Image& m, Color& c, double& factor)\u0003Upp\aUNGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\aUnglyph\u001EImage (const Image &, Color &)!Upp::Unglyph(const Image&,Color&)'Image Unglyph(const Image& m, Color& c)\u0003Upp\aUNGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\aUnglyph\u0015Image (const Image &)\u001AUpp::Unglyph(const Image&)\u001DImage Unglyph(const Image& m)\u0003Upp\aUNGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tVertBlend\u001EImage (Image, Image, int, int)#Upp::VertBlend(Image,Image,int,int)7Image VertBlend(Image img1, Image img2, int y0, int y1)\u0003Upp\tVERTBLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tHorzBlend\u001EImage (Image, Image, int, int)#Upp::HorzBlend(Image,Image,int,int)7Image HorzBlend(Image img1, Image img2, int x0, int x1)\u0003Upp\tHORZBLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bHorzSymm\rImage (Image)\u0014Upp::HorzSymm(Image)\u0019Image HorzSymm(Image src)\u0003Upp\bHORZSYMM\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\rIsSingleColor\"bool (const Image &, const Rect &),Upp::IsSingleColor(const Image&,const Rect&)4bool IsSingleColor(const Image& m, const Rect& rect)\u0003Upp\rISSINGLECOLOR\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\rRecreateAlpha$Image (const Image &, const Image &)-Upp::RecreateAlpha(const Image&,const Image&)CImage RecreateAlpha(const Image& overwhite, const Image& overblack)\u0003Upp\rRECREATEALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vImageMargin\u001Dint (const Image &, int, int)&Upp::ImageMargin(const Image&,int,int)0int ImageMargin(const Image& m, int p, int dist)\u0003Upp\vIMAGEMARGIN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\fImageMarginV\u001Dint (const Image &, int, int)'Upp::ImageMarginV(const Image&,int,int)2int ImageMarginV(const Image& _m, int p, int dist)\u0003Upp\fIMAGEMARGINV\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000FGetImageMargins\u001ARect (const Image &, RGBA)'Upp::GetImageMargins(const Image&,RGBA)7Rect GetImageMargins(const Image& m, RGBA margin_color)\u0003Upp\u000FGETIMAGEMARGINS\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vChPartMaker\u0010Upp::ChPartMaker\u0010Upp::ChPartMaker\vChPartMaker\u0003Upp\vCHPARTMAKER\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005image\u0005Image\u0017Upp::ChPartMaker::image\vImage image\u0003Upp\u0005IMAGE\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006border\u0005Color\u0018Upp::ChPartMaker::border\fColor border\u0003Upp\u0006BORDER\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002bg\u0005Color\u0014Upp::ChPartMaker::bg\bColor bg\u0003Upp\u0002BG\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0004bool\u0013Upp::ChPartMaker::t\u0006bool t\u0003Upp\u0001T\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001b\u0004bool\u0013Upp::ChPartMaker::b\u0006bool b\u0003Upp\u0001B\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001l\u0004bool\u0013Upp::ChPartMaker::l\u0006bool l\u0003Upp\u0001L\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001r\u0004bool\u0013Upp::ChPartMaker::r\u0006bool r\u0003Upp\u0001R\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002tl\u0004byte\u0014Upp::ChPartMaker::tl\abyte tl\u0003Upp\u0002TL\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002tr\u0004byte\u0014Upp::ChPartMaker::tr\abyte tr\u0003Upp\u0002TR\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002bl\u0004byte\u0014Upp::ChPartMaker::bl\abyte bl\u0003Upp\u0002BL\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002br\u0004byte\u0014Upp::ChPartMaker::br\abyte br\u0003Upp\u0002BR\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nResetShape\avoid ()\u001EUpp::ChPartMaker::ResetShape()\u0011void ResetShape()\u0003Upp\nRESETSHAPE\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004Make\u000EImage () const\u001DUpp::ChPartMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vChPartMaker\u0014void (const Image &)+Upp::ChPartMaker::ChPartMaker(const Image&)\u001BChPartMaker(const Image& m)\u0003Upp\vCHPARTMAKER\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000¢\u0000\u0000\u0000\u0000\u0000\u0000\u0000¢\u0000\u0000\u0000\u0001\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\nImageMaker\u000FUpp::ImageMaker\u000FUpp::ImageMaker\nImageMaker\u0003Upp\nIMAGEMAKER\u000FUpp::ImageMaker\u000FUPP::IMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0000£\u0000\u0000\u0000\u001F\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0001\u0000\u0003Key\u000FString () const\u001BUpp::ImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u000FUpp::ImageMaker\u000FUPP::IMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000 \u0000\u0000\u0000¤\u0000\u0000\u0000\u0000\u0001\u0000\u0004Make\u000EImage () const\u001CUpp::ImageMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u000FUpp::ImageMaker\u000FUPP::IMAGEMAKER\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\u0000¥\u0000\u0000\u0000\u0019\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\v~ImageMaker\u0010void () noexcept\u0014Upp::ImageMaker::~()\r~ImageMaker()\u0003Upp\v~IMAGEMAKER\u000FUpp::ImageMaker\u000FUPP::IMAGEMAKER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000¨\u0000\u0000\u0000\u0000\u0000\u0000\u0000¨\u0000\u0000\u0000(\u0000\u0000\u0000¨\u0000\u0000\u0000\u0000\u0000\u0000\u0010SysImageRealized\u0014void (const Image &)#Upp::SysImageRealized(const Image&)'void SysImageRealized(const Image& img)\u0003Upp\u0010SYSIMAGEREALIZED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000©\u0000\u0000\u0000\u0000\u0000\u0000\u0000©\u0000\u0000\u0000(\u0000\u0000\u0000©\u0000\u0000\u0000\u0000\u0000\u0000\u0010SysImageReleased\u0014void (const Image &)#Upp::SysImageReleased(const Image&)'void SysImageReleased(const Image& img)\u0003Upp\u0010SYSIMAGERELEASED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000«\u0000\u0000\u0000$\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\tMakeImage\u001AImage (const ImageMaker &)!Upp::MakeImage(const ImageMaker&)$Image MakeImage(const ImageMaker& m)\u0003Upp\tMAKEIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000¬\u0000\u0000\u0000\u0000\u0000\u0000\u0000¬\u0000\u0000\u0000F\u0000\u0000\u0000¬\u0000\u0000\u0000\u0000\u0000\u0000\tMakeImage/Image (const Image &, Image (*)(const Image &))3Upp::MakeImage(const Image&,Image(*)(const Image&))@Image MakeImage(const Image& image, Image (*make)(const Image&))\u0003Upp\tMAKEIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000®\u0000\u0000\u0000\u0000\u0000\u0000\u0000®\u0000\u0000\u0000\u0019\u0000\u0000\u0000®\u0000\u0000\u0000\u0000\u0000\u0000\u0011SweepMkImageCache\avoid ()\u0018Upp::SweepMkImageCache()\u0018void SweepMkImageCache()\u0003Upp\u0011SWEEPMKIMAGECACHE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000°\u0000\u0000\u0000\u0000\u0000\u0000\u0000°\u0000\u0000\u0000 \u0000\u0000\u0000°\u0000\u0000\u0000\u0000\u0000\u0000\u0014SetMakeImageCacheMax\nvoid (int)\u001EUpp::SetMakeImageCacheMax(int) void SetMakeImageCacheMax(int m)\u0003Upp\u0014SETMAKEIMAGECACHEMAX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0000±\u0000\u0000\u0000!\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0015SetMakeImageCacheSize\nvoid (int)\u001FUpp::SetMakeImageCacheSize(int)!void SetMakeImageCacheSize(int m)\u0003Upp\u0015SETMAKEIMAGECACHESIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000³\u0000\u0000\u0000\u0000\u0000\u0000\u0000³\u0000\u0000\u0000-\u0000\u0000\u0000³\u0000\u0000\u0000\u0000\u0000\u0000\u0012MakeImagePaintOnly\u001AImage (const ImageMaker &)*Upp::MakeImagePaintOnly(const ImageMaker&)-Image MakeImagePaintOnly(const ImageMaker& m)\u0003Upp\u0012MAKEIMAGEPAINTONLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000µ\u0000\u0000\u0000\u0000\u0000\u0000\u0000µ\u0000\u0000\u0000\u001C\u0000\u0000\u0000·\u0000\u0000\u0000\u0000\u0000\u0000\rRescaleFilterXImage (const Image &, Size, const Rect &, double (*)(double), int, Gate<int, int>, bool)QUpp::RescaleFilter(const Image&,Size,const Rect&,double(*)(double),int,Gate,bool)ÿ\u0000\u0000\u0000Image RescaleFilter(const Image& img, Size sz, const Rect& sr, double (*kernel_fn)(double), int kernel_width, Gate<int, int> progress, bool co)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000¸\u0000\u0000\u0000\u0000\u0000\u0000\u0000¸\u0000\u0000\u0000\u001C\u0000\u0000\u0000º\u0000\u0000\u0000\u0000\u0000\u0000\rRescaleFilterJImage (const Image &, Size, double (*)(double), int, Gate<int, int>, bool)EUpp::RescaleFilter(const Image&,Size,double(*)(double),int,Gate,bool)ÿ\u007F\u0000\u0000\u0000Image RescaleFilter(const Image& img, Size sz, double (*kernel_fn)(double), int kernel_width, Gate<int, int> progress, bool co)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0000\u0000\u0000»\u0000\u0000\u0000\u001C\u0000\u0000\u0000½\u0000\u0000\u0000\u0000\u0000\u0000\rRescaleFilterNImage (const Image &, int, int, double (*)(double), int, Gate<int, int>, bool)HUpp::RescaleFilter(const Image&,int,int,double(*)(double),int,Gate,bool)ÿ\u0000\u0000\u0000Image RescaleFilter(const Image& img, int cx, int cy, double (*kernel_fn)(double), int kernel_width, Gate<int, int> progress, bool co)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000B(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)GUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1);Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.)\u0004enum\u0003UppB(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\IMAGEOP.H:192:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u0000\u0013\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u000EFILTER_NEARESTGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0013Upp::FILTER_NEAREST\u000EFILTER_NEAREST\u0003Upp\u000EFILTER_NEAREST\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0000Á\u0000\u0000\u0000\u0014\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u000FFILTER_BILINEARGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0014Upp::FILTER_BILINEAR\u000FFILTER_BILINEAR\u0003Upp\u000FFILTER_BILINEAR\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000\u0013\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u000EFILTER_BSPLINEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0013Upp::FILTER_BSPLINE\u000EFILTER_BSPLINE\u0003Upp\u000EFILTER_BSPLINE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0014\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\u000FFILTER_COSTELLOGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0014Upp::FILTER_COSTELLO\u000FFILTER_COSTELLO\u0003Upp\u000FFILTER_COSTELLO\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0014\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u000FFILTER_COSTELLAGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0014Upp::FILTER_COSTELLA\u000FFILTER_COSTELLA\u0003Upp\u000FFILTER_COSTELLA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000\u001C\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\u0017FILTER_BICUBIC_MITCHELLGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u001CUpp::FILTER_BICUBIC_MITCHELL\u0017FILTER_BICUBIC_MITCHELL\u0003Upp\u0017FILTER_BICUBIC_MITCHELL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000\u001E\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0019FILTER_BICUBIC_CATMULLROMGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u001EUpp::FILTER_BICUBIC_CATMULLROM\u0019FILTER_BICUBIC_CATMULLROM\u0003Upp\u0019FILTER_BICUBIC_CATMULLROM\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0014\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u000FFILTER_LANCZOS2GUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0014Upp::FILTER_LANCZOS2\u000FFILTER_LANCZOS2\u0003Upp\u000FFILTER_LANCZOS2\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000\u0014\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u000FFILTER_LANCZOS3GUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0014Upp::FILTER_LANCZOS3\u000FFILTER_LANCZOS3\u0003Upp\u000FFILTER_LANCZOS3\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000\u0014\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u000FFILTER_LANCZOS4GUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0014Upp::FILTER_LANCZOS4\u000FFILTER_LANCZOS4\u0003Upp\u000FFILTER_LANCZOS4\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0014\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\u000FFILTER_LANCZOS5GUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.h:192:1)\u0014Upp::FILTER_LANCZOS5\u000FFILTER_LANCZOS5\u0003Upp\u000FFILTER_LANCZOS5\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000 \u0000\u0000\u0000Í\u0000\u0000\u0000\u0000\u0000\u0000\u0000Í\u0000\u0000\u0000B\u0000\u0000\u0000Í\u0000\u0000\u0000\u0000\u0000\u0000\u0016GetImageFilterFunction%Tuple2<double (*)(double), int> (int) Upp::GetImageFilterFunction(int)BTuple2<double (*)(double), int> GetImageFilterFunction(int filter)\u0003Upp\u0016GETIMAGEFILTERFUNCTION\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0011ImageFilterKernel\u0016Upp::ImageFilterKernel\u0016Upp::ImageFilterKernel\u0011ImageFilterKernel\u0003Upp\u0011IMAGEFILTERKERNEL\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0000\u0000\u0000\r\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0001a\u0003int\u0019Upp::ImageFilterKernel::a\u0005int a\u0003Upp\u0001A\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ñ\u0000\u0000\u0000\r\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0001n\u0003int\u0019Upp::ImageFilterKernel::n\u0005int n\u0003Upp\u0001N\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0011\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\u0005shift\u0003int\u001DUpp::ImageFilterKernel::shift\tint shift\u0003Upp\u0005SHIFT\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0006ashift\u0003int\u001EUpp::ImageFilterKernel::ashift\nint ashift\u0003Upp\u0006ASHIFT\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0017\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0001\u0000\u0000\vkernel_size\u0003int#Upp::ImageFilterKernel::kernel_size\u000Fint kernel_size\u0003Upp\vKERNEL_SIZE\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0012\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0006kernel\vconst int *\u001EUpp::ImageFilterKernel::kernel\u0011const int *kernel\u0003Upp\u0006KERNEL\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ö\u0000\u0000\u0000\u000F\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\u0003mul\u0006double\u001BUpp::ImageFilterKernel::mul\ndouble mul\u0003Upp\u0003MUL\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0015\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0000\u0000\u0000m\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\u0014int (int, int) const)Upp::ImageFilterKernel::Get(int,int)const\u001Cint Get(int x, int dx) const\u0003Upp\u0003GET\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000B\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init(void (double (*)(double), int, int, int);Upp::ImageFilterKernel::Init(double(*)(double),int,int,int)?void Init(double (*kfn)(double), int a, int src_sz, int tgt_sz)\u0003Upp\u0004INIT\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\u0000Û\u0000\u0000\u0000.\u0000\u0000\u0000Û\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init\u0014void (int, int, int))Upp::ImageFilterKernel::Init(int,int,int)-void Init(int filter, int src_sz, int tgt_sz)\u0003Upp\u0004INIT\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0017\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u0011ImageFilterKernel\avoid ()+Upp::ImageFilterKernel::ImageFilterKernel()\u0013ImageFilterKernel()\u0003Upp\u0011IMAGEFILTERKERNEL\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0000\u0000\u0000J\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0000\u0000\u0000\u0011ImageFilterKernel(void (double (*)(double), int, int, int)HUpp::ImageFilterKernel::ImageFilterKernel(double(*)(double),int,int,int)GImageFilterKernel(double (*kfn)(double), int a, int src_sz, int tgt_sz)\u0003Upp\u0011IMAGEFILTERKERNEL\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\u0000á\u0000\u0000\u0000{\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\rRescaleFilterDImage (const Image &, Size, const Rect &, int, Gate<int, int>, bool)?Upp::RescaleFilter(const Image&,Size,const Rect&,int,Gate,bool){Image RescaleFilter(const Image& img, Size sz, const Rect& sr, int filter, Gate<int, int> progress = Null, bool co = false)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000â\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\u0000\u0000\u0000Z\u0000\u0000\u0000â\u0000\u0000\u0000\u0000\u0000\u0000\rRescaleFilter0Image (const Image &, Size, int, Gate<int, int>).Upp::RescaleFilter(const Image&,Size,int,Gate)ZImage RescaleFilter(const Image& img, Size sz, int filter, Gate<int, int> progress = Null)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000ã\u0000\u0000\u0000a\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\rRescaleFilter4Image (const Image &, int, int, int, Gate<int, int>)1Upp::RescaleFilter(const Image&,int,int,int,Gate)aImage RescaleFilter(const Image& img, int cx, int cy, int filter, Gate<int, int> progress = Null)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000å\u0000\u0000\u0000\u0000\u0000\u0000\u0000å\u0000\u0000\u0000l\u0000\u0000\u0000å\u0000\u0000\u0000\u0000\u0000\u0000\u000FCoRescaleFilter>Image (const Image &, Size, const Rect &, int, Gate<int, int>)<Upp::CoRescaleFilter(const Image&,Size,const Rect&,int,Gate)lImage CoRescaleFilter(const Image& img, Size sz, const Rect& sr, int filter, Gate<int, int> progress = Null)\u0003Upp\u000FCORESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000æ\u0000\u0000\u0000\u0000\u0000\u0000\u0000æ\u0000\u0000\u0000\\\u0000\u0000\u0000æ\u0000\u0000\u0000\u0000\u0000\u0000\u000FCoRescaleFilter0Image (const Image &, Size, int, Gate<int, int>)0Upp::CoRescaleFilter(const Image&,Size,int,Gate)\\Image CoRescaleFilter(const Image& img, Size sz, int filter, Gate<int, int> progress = Null)\u0003Upp\u000FCORESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ç\u0000\u0000\u0000\u0000\u0000\u0000\u0000ç\u0000\u0000\u0000c\u0000\u0000\u0000ç\u0000\u0000\u0000\u0000\u0000\u0000\u000FCoRescaleFilter4Image (const Image &, int, int, int, Gate<int, int>)3Upp::CoRescaleFilter(const Image&,int,int,int,Gate)cImage CoRescaleFilter(const Image& img, int cx, int cy, int filter, Gate<int, int> progress = Null)\u0003Upp\u000FCORESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000é\u0000\u0000\u0000\u0000\u0000\u0000\u0000é\u0000\u0000\u0000P\u0000\u0000\u0000é\u0000\u0000\u0000\u0000\u0000\u0000\rCachedRescale.Image (const Image &, Size, const Rect &, int)5Upp::CachedRescale(const Image&,Size,const Rect&,int)PImage CachedRescale(const Image& m, Size sz, const Rect& src, int filter = Null)\u0003Upp\rCACHEDRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ê\u0000\u0000\u0000\u0000\u0000\u0000\u0000ê\u0000\u0000\u0000?\u0000\u0000\u0000ê\u0000\u0000\u0000\u0000\u0000\u0000\rCachedRescale Image (const Image &, Size, int))Upp::CachedRescale(const Image&,Size,int)?Image CachedRescale(const Image& m, Size sz, int filter = Null)\u0003Upp\rCACHEDRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000ë\u0000\u0000\u0000Y\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0016CachedRescalePaintOnly.Image (const Image &, Size, const Rect &, int)>Upp::CachedRescalePaintOnly(const Image&,Size,const Rect&,int)YImage CachedRescalePaintOnly(const Image& m, Size sz, const Rect& src, int filter = Null)\u0003Upp\u0016CACHEDRESCALEPAINTONLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ì\u0000\u0000\u0000\u0000\u0000\u0000\u0000ì\u0000\u0000\u0000H\u0000\u0000\u0000ì\u0000\u0000\u0000\u0000\u0000\u0000\u0016CachedRescalePaintOnly Image (const Image &, Size, int)2Upp::CachedRescalePaintOnly(const Image&,Size,int)HImage CachedRescalePaintOnly(const Image& m, Size sz, int filter = Null)\u0003Upp\u0016CACHEDRESCALEPAINTONLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000î\u0000\u0000\u0000\u0000\u0000\u0000\u0000î\u0000\u0000\u0000<\u0000\u0000\u0000î\u0000\u0000\u0000\u0000\u0000\u0000\u0017CachedSetColorKeepAlpha\u001CImage (const Image &, Color)0Upp::CachedSetColorKeepAlpha(const Image&,Color)<Image CachedSetColorKeepAlpha(const Image& img, Color color)\u0003Upp\u0017CACHEDSETCOLORKEEPALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ï\u0000\u0000\u0000\u0000\u0000\u0000\u0000ï\u0000\u0000\u0000E\u0000\u0000\u0000ï\u0000\u0000\u0000\u0000\u0000\u0000 CachedSetColorKeepAlphaPaintOnly\u001CImage (const Image &, Color)9Upp::CachedSetColorKeepAlphaPaintOnly(const Image&,Color)EImage CachedSetColorKeepAlphaPaintOnly(const Image& img, Color color)\u0003Upp CACHEDSETCOLORKEEPALPHAPAINTONLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000ñ\u0000\u0000\u0000I\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0000\u0000\u0000\aMagnify3Image (const Image &, const Rect &, int, int, bool)3Upp::Magnify(const Image&,const Rect&,int,int,bool)IImage Magnify(const Image& img, const Rect& src, int nx, int ny, bool co)\u0003Upp\aMAGNIFY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0000\u0000ò\u0000\u0000\u0000@\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0000\aMagnify%Image (const Image &, int, int, bool)'Upp::Magnify(const Image&,int,int,bool)@Image Magnify(const Image& img, int nx, int ny, bool co = false)\u0003Upp\aMAGNIFY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0000\u0000\u0000?\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0000\u0006Minify%Image (const Image &, int, int, bool)&Upp::Minify(const Image&,int,int,bool)?Image Minify(const Image& img, int nx, int ny, bool co = false)\u0003Upp\u0006MINIFY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ô\u0000\u0000\u0000\u0000\u0000\u0000\u0000ô\u0000\u0000\u0000E\u0000\u0000\u0000ô\u0000\u0000\u0000\u0000\u0000\u0000\fMinifyCached%Image (const Image &, int, int, bool),Upp::MinifyCached(const Image&,int,int,bool)EImage MinifyCached(const Image& img, int nx, int ny, bool co = false)\u0003Upp\fMINIFYCACHED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000ö\u0000\u0000\u0000\u0000\u0000\u0000\u0000ö\u0000\u0000\u00006\u0000\u0000\u0000ö\u0000\u0000\u0000\u0000\u0000\u0000\fDownSample3x\u001BImage (const Image &, bool)$Upp::DownSample3x(const Image&,bool)5Image DownSample3x(const Image& src, bool co = false)\u0003Upp\fDOWNSAMPLE3X\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000÷\u0000\u0000\u0000\u0000\u0000\u0000\u0000÷\u0000\u0000\u00006\u0000\u0000\u0000÷\u0000\u0000\u0000\u0000\u0000\u0000\fDownSample2x\u001BImage (const Image &, bool)$Upp::DownSample2x(const Image&,bool)5Image DownSample2x(const Image& src, bool co = false)\u0003Upp\fDOWNSAMPLE2X\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ù\u0000\u0000\u0000\u0000\u0000\u0000\u0000ù\u0000\u0000\u0000!\u0000\u0000\u0000ù\u0000\u0000\u0000\u0000\u0000\u0000\tUpscale2x\u0015Image (const Image &)\u001CUpp::Upscale2x(const Image&)!Image Upscale2x(const Image& src)\u0003Upp\tUPSCALE2X\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ú\u0000\u0000\u0000\u0000\u0000\u0000\u0000ú\u0000\u0000\u0000#\u0000\u0000\u0000ú\u0000\u0000\u0000\u0000\u0000\u0000\vDownscale2x\u0015Image (const Image &)\u001EUpp::Downscale2x(const Image&)#Image Downscale2x(const Image& src)\u0003Upp\vDOWNSCALE2X\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ü\u0000\u0000\u0000\u0000\u0000\u0000\u0000ü\u0000\u0000\u0000\u001E\u0000\u0000\u0000ü\u0000\u0000\u0000\u0000\u0000\u0000\nSetUHDMode\vvoid (bool)\u0015Upp::SetUHDMode(bool)\u001Evoid SetUHDMode(bool b = true)\u0003Upp\nSETUHDMODE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000ý\u0000\u0000\u0000\u0010\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\tIsUHDMode\abool ()\u0010Upp::IsUHDMode()\u0010bool IsUHDMode()\u0003Upp\tISUHDMODE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000þ\u0000\u0000\u0000\u0000\u0000\u0000\u0000þ\u0000\u0000\u0000\u0012\u0000\u0000\u0000þ\u0000\u0000\u0000\u0000\u0000\u0000\vSyncUHDMode\avoid ()\u0012Upp::SyncUHDMode()\u0012void SyncUHDMode()\u0003Upp\vSYNCUHDMODE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000)\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0003DPI\u001AImage (const Image &, int)\u001AUpp::DPI(const Image&,int))Image DPI(const Image& img, int expected)\u0003Upp\u0003DPI\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000E\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\u0003DPI\tint (int)\rUpp::DPI(int)\u000Eint DPI(int a)\u0003Upp\u0003DPI\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0001\u0000\u0000E\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u0003DPI\u000Fdouble (double)\u0010Upp::DPI(double)\u0014double DPI(double a)\u0003Upp\u0003DPI\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000G\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0003DPI\vSize (Size)\u000EUpp::DPI(Size)\u0011Size DPI(Size sz)\u0003Upp\u0003DPI\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0001\u0000\u0000D\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0000\u0000\u0003DPI\u000FSize (int, int)\u0011Upp::DPI(int,int)\u0018Size DPI(int cx, int cy)\u0003Upp\u0003DPI\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0001\u0000\u0000P\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\u0003DPI$Image (const Image &, const Image &)#Upp::DPI(const Image&,const Image&))Image DPI(const Image& a, const Image& b)\u0003Upp\u0003DPI\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\n\u0001\u0000\u0000\u0000\u0000\u0000\u0000\n\u0001\u0000\u0000\u0001\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0005RGBAV\nUpp::RGBAV\nUpp::RGBAV\u0005RGBAV\u0003Upp\u0005RGBAV\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\b\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0001r\u0005dword\rUpp::RGBAV::r\adword r\u0003Upp\u0001R\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\v\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0001g\u0005dword\rUpp::RGBAV::g\adword g\u0003Upp\u0001G\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\u000E\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0001b\u0005dword\rUpp::RGBAV::b\adword b\u0003Upp\u0001B\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\u0011\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0001a\u0005dword\rUpp::RGBAV::a\adword a\u0003Upp\u0001A\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\u0000\r\u0001\u0000\u0000)\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\u0003Set\fvoid (dword)\u0016Upp::RGBAV::Set(dword)\u0011void Set(dword v)\u0003Upp\u0003SET\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u001E\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u0013Upp::RGBAV::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0000\u0000\u0003Put\u001Avoid (dword, const RGBA &)\"Upp::RGBAV::Put(dword,const RGBA&)'void Put(dword weight, const RGBA& src)\u0003Upp\u0003PUT\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0003Put\u0013void (const RGBA &)\u001CUpp::RGBAV::Put(const RGBA&)\u0019void Put(const RGBA& src)\u0003Upp\u0003PUT\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0002\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0003Get\u0010RGBA (int) const\u0019Upp::RGBAV::Get(int)const\u0017RGBA Get(int div) const\u0003Upp\u0003GET\nUpp::RGBAV\nUPP::RGBAV\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000&\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0001\u0000\u0000c\u0000\u0000\u0000&\u0001\u0000\u0000\u0000\u0000\u0000\u000ERescaleBicubic9Image (const Image &, Size, const Rect &, Gate<int, int>)7Upp::RescaleBicubic(const Image&,Size,const Rect&,Gate)cImage RescaleBicubic(const Image& src, Size sz, const Rect& src_rc, Gate<int, int> progress = Null)\u0003Upp\u000ERESCALEBICUBIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0001\u0000\u0000O\u0000\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000\u000ERescaleBicubic+Image (const Image &, Size, Gate<int, int>)+Upp::RescaleBicubic(const Image&,Size,Gate)OImage RescaleBicubic(const Image& img, Size sz, Gate<int, int> progress = Null)\u0003Upp\u000ERESCALEBICUBIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0001\u0000\u0000V\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\u000ERescaleBicubic/Image (const Image &, int, int, Gate<int, int>).Upp::RescaleBicubic(const Image&,int,int,Gate)VImage RescaleBicubic(const Image& img, int cx, int cy, Gate<int, int> progress = Null)\u0003Upp\u000ERESCALEBICUBIC\u0003Upp\u0003UPP\u0000\u0000end\u0000X\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SIMD.h","value":"data\u000F\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\bLoadRGBA\u0014i16x8 (const RGBA *)\u001AUpp::LoadRGBA(const RGBA*)\u001Di16x8 LoadRGBA(const RGBA *s)\u0003Upp\bLOADRGBA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\tLoadRGBA2\"i16x8 (const RGBA *, const RGBA *)'Upp::LoadRGBA2(const RGBA*,const RGBA*)/i16x8 LoadRGBA2(const RGBA *s0, const RGBA *s1)\u0003Upp\tLOADRGBA2\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\tLoadRGBA2\u0014i16x8 (const RGBA &)\u001BUpp::LoadRGBA2(const RGBA&)\u001Ei16x8 LoadRGBA2(const RGBA& c)\u0003Upp\tLOADRGBA2\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\tLoadRGBA2\u0014i16x8 (const RGBA *)\u001BUpp::LoadRGBA2(const RGBA*)\u001Ei16x8 LoadRGBA2(const RGBA *s)\u0003Upp\tLOADRGBA2\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\tLoadRGBAL\ri16x8 (i16x8)\u0015Upp::LoadRGBAL(i16x8)\u0018i16x8 LoadRGBAL(i16x8 x)\u0003Upp\tLOADRGBAL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\tLoadRGBAH\ri16x8 (i16x8)\u0015Upp::LoadRGBAH(i16x8)\u0018i16x8 LoadRGBAH(i16x8 x)\u0003Upp\tLOADRGBAH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\tLoadRGBA4%void (const RGBA *, i16x8 &, i16x8 &))Upp::LoadRGBA4(const RGBA*,i16x8&,i16x8&)1void LoadRGBA4(const RGBA *s, i16x8& l, i16x8& h)\u0003Upp\tLOADRGBA4\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\bPackRGBA\u0014i8x16 (i16x8, i16x8)\u001AUpp::PackRGBA(i16x8,i16x8) i8x16 PackRGBA(i16x8 l, i16x8 h)\u0003Upp\bPACKRGBA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\tStoreRGBA\u0014void (RGBA *, i16x8)\u001BUpp::StoreRGBA(RGBA*,i16x8)#void StoreRGBA(RGBA *rgba, i16x8 x)\u0003Upp\tSTORERGBA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\nStoreRGBA2\u0014void (RGBA *, i16x8)\u001CUpp::StoreRGBA2(RGBA*,i16x8)$void StoreRGBA2(RGBA *rgba, i16x8 x)\u0003Upp\nSTORERGBA2\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\nStoreRGBA4\u001Bvoid (RGBA *, i16x8, i16x8)\"Upp::StoreRGBA4(RGBA*,i16x8,i16x8)-void StoreRGBA4(RGBA *rgba, i16x8 l, i16x8 h)\u0003Upp\nSTORERGBA4\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\tLoadRGBAF\u0014f32x4 (const RGBA *)\u001BUpp::LoadRGBAF(const RGBA*)\u001Ef32x4 LoadRGBAF(const RGBA *s)\u0003Upp\tLOADRGBAF\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\nStoreRGBAF\u0014void (RGBA *, f32x4)\u001CUpp::StoreRGBAF(RGBA*,f32x4)!void StoreRGBAF(RGBA *t, f32x4 s)\u0003Upp\nSTORERGBAF\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\nClampRGBAF\rf32x4 (f32x4)\u0016Upp::ClampRGBAF(f32x4)\u0019f32x4 ClampRGBAF(f32x4 p)\u0003Upp\nCLAMPRGBAF\u0003Upp\u0003UPP\u0000\u0000end\u0000M\b\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontInt.h","value":"data/õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0010_Draw_FontInt_h_\u0000\u0010_Draw_FontInt_h_\u0010_Draw_FontInt_h_\u0000\u0010_DRAW_FONTINT_H_\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\bFaceInfo\rUpp::FaceInfo\rUpp::FaceInfo\u001DFaceInfo : Moveable<FaceInfo>\u0003Upp\bFACEINFO\rUpp::FaceInfo\rUPP::FACEINFO\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0004name\u0006String\u0013Upp::FaceInfo::name\vString name\u0003Upp\u0004NAME\rUpp::FaceInfo\rUPP::FACEINFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0010\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0004info\u0005dword\u0013Upp::FaceInfo::info\ndword info\u0003Upp\u0004INFO\rUpp::FaceInfo\rUPP::FACEINFO\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u000ECommonFontInfo\u0013Upp::CommonFontInfo\u0013Upp::CommonFontInfo\u000ECommonFontInfo\u0003Upp\u000ECOMMONFONTINFO\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\f\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0006ascent\u0003int\u001BUpp::CommonFontInfo::ascent\nint ascent\u0003Upp\u0006ASCENT\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\r\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\adescent\u0003int\u001CUpp::CommonFontInfo::descent\vint descent\u0003Upp\aDESCENT\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\bexternal\u0003int\u001DUpp::CommonFontInfo::external\fint external\u0003Upp\bEXTERNAL\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\binternal\u0003int\u001DUpp::CommonFontInfo::internal\fint internal\u0003Upp\bINTERNAL\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\boverhang\u0003int\u001DUpp::CommonFontInfo::overhang\fint overhang\u0003Upp\bOVERHANG\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\bavewidth\u0003int\u001DUpp::CommonFontInfo::avewidth\fint avewidth\u0003Upp\bAVEWIDTH\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\bmaxwidth\u0003int\u001DUpp::CommonFontInfo::maxwidth\fint maxwidth\u0003Upp\bMAXWIDTH\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\tfirstchar\u0003int\u001EUpp::CommonFontInfo::firstchar\rint firstchar\u0003Upp\tFIRSTCHAR\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\tcharcount\u0003int\u001EUpp::CommonFontInfo::charcount\rint charcount\u0003Upp\tCHARCOUNT\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\fdefault_char\u0003int!Upp::CommonFontInfo::default_char\u0010int default_char\u0003Upp\fDEFAULT_CHAR\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\vspacebefore\u0003int Upp::CommonFontInfo::spacebefore\u000Fint spacebefore\u0003Upp\vSPACEBEFORE\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\nspaceafter\u0003int\u001FUpp::CommonFontInfo::spaceafter\u000Eint spaceafter\u0003Upp\nSPACEAFTER\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\nfixedpitch\u0004bool\u001FUpp::CommonFontInfo::fixedpitch\u000Fbool fixedpitch\u0003Upp\nFIXEDPITCH\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\tscaleable\u0004bool\u001EUpp::CommonFontInfo::scaleable\u000Ebool scaleable\u0003Upp\tSCALEABLE\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0003ttf\u0004bool\u0018Upp::CommonFontInfo::ttf\bbool ttf\u0003Upp\u0003TTF\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\t\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0003aux\u0003int\u0018Upp::CommonFontInfo::aux\aint aux\u0003Upp\u0003AUX\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\vcolorimg_cy\u0003int Upp::CommonFontInfo::colorimg_cy\u000Fint colorimg_cy\u0003Upp\vCOLORIMG_CY\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0004path\tchar[256]\u0019Upp::CommonFontInfo::path\u000Echar path[256]\u0003Upp\u0004PATH\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0005fonti\u0003int\u001AUpp::CommonFontInfo::fonti\tint fonti\u0003Upp\u0005FONTI\u0013Upp::CommonFontInfo\u0013UPP::COMMONFONTINFO\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\n\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0004Font\tUpp::Font\tUpp::Font\u0004Font\u0003Upp\u0004FONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\tGlyphInfo\u000EUpp::GlyphInfo\u000EUpp::GlyphInfo\tGlyphInfo\u0003Upp\tGLYPHINFO\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\f\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0005width\u0005int16\u0015Upp::GlyphInfo::width\vint16 width\u0003Upp\u0005WIDTH\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\v\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0004lspc\u0005int16\u0014Upp::GlyphInfo::lspc\nint16 lspc\u0003Upp\u0004LSPC\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\v\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0004rspc\u0005int16\u0014Upp::GlyphInfo::rspc\nint16 rspc\u0003Upp\u0004RSPC\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0011\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0006glyphi\u0004word\u0016Upp::GlyphInfo::glyphi\vword glyphi\u0003Upp\u0006GLYPHI\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000<\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\bIsNormal\rbool () const\u001FUpp::GlyphInfo::IsNormal()const\u0015bool IsNormal() const\u0003Upp\bISNORMAL\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000Q\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\nIsComposed\rbool () const!Upp::GlyphInfo::IsComposed()const\u0017bool IsComposed() const\u0003Upp\nISCOMPOSED\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000A\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\fIsComposedLM\rbool () const#Upp::GlyphInfo::IsComposedLM()const\u0019bool IsComposedLM() const\u0003Upp\fISCOMPOSEDLM\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000?\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\nIsReplaced\rbool () const!Upp::GlyphInfo::IsReplaced()const\u0017bool IsReplaced() const\u0003Upp\nISREPLACED\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000@\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\tIsMissing\rbool () const Upp::GlyphInfo::IsMissing()const\u0016bool IsMissing() const\u0003Upp\tISMISSING\u000EUpp::GlyphInfo\u000EUPP::GLYPHINFO\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0019\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0003Std\rvoid (Font &)\u000FUpp::Std(Font&)\u0014void Std(Font& font)\u0003Upp\u0003STD\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000*\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\fGetGlyphInfo\u0015GlyphInfo (Font, int)\u001BUpp::GetGlyphInfo(Font,int)*GlyphInfo GetGlyphInfo(Font font, int chr)\u0003Upp\fGETGLYPHINFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u001A\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u00000\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\vGetFontInfo\u001Cconst CommonFontInfo &(Font)\u0016Upp::GetFontInfo(Font),const CommonFontInfo& GetFontInfo(Font font)\u0003Upp\vGETFONTINFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000)\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\vIsNormal_nc\u0010bool (Font, int)\u001AUpp::IsNormal_nc(Font,int)$bool IsNormal_nc(Font font, int chr)\u0003Upp\vISNORMAL_NC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u00008\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\fGlyphMetrics\u001Dvoid (GlyphInfo &, Font, int)&Upp::GlyphMetrics(GlyphInfo&,Font,int)3void GlyphMetrics(GlyphInfo& f, Font font, int chr)\u0003Upp\fGLYPHMETRICS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u001E\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0012InvalidateFontList\avoid ()\u0019Upp::InvalidateFontList()\u0019void InvalidateFontList()\u0003Upp\u0012INVALIDATEFONTLIST\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u0000*\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u000EGetFontInfoSys\u0015CommonFontInfo (Font)\u0019Upp::GetFontInfoSys(Font)(CommonFontInfo GetFontInfoSys(Font font)\u0003Upp\u000EGETFONTINFOSYS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u00004\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u000FGetGlyphInfoSys\u0015GlyphInfo (Font, int)\u001EUpp::GetGlyphInfoSys(Font,int)-GlyphInfo GetGlyphInfoSys(Font font, int chr)\u0003Upp\u000FGETGLYPHINFOSYS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000!\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u000EGetAllFacesSys\u0013Vector<FaceInfo> ()\u0015Upp::GetAllFacesSys()!Vector<FaceInfo> GetAllFacesSys()\u0003Upp\u000EGETALLFACESSYS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000S\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u000EGetFontDataSys%String (Font, const char *, int, int)-Upp::GetFontDataSys(Font,const char*,int,int)IString GetFontDataSys(Font font, const char *table, int offset, int size)\u0003Upp\u000EGETFONTDATASYS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000`\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0012RenderCharacterSys5void (FontGlyphConsumer &, double, double, int, Font)BUpp::RenderCharacterSys(FontGlyphConsumer&,double,double,int,Font)Tvoid RenderCharacterSys(FontGlyphConsumer& sw, double x, double y, int ch, Font fnt)\u0003Upp\u0012RENDERCHARACTERSYS\u0003Upp\u0003UPP\u0000\u0000end\u0000~\u001A\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.h","value":"datafõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGECLASS\u0000\nIMAGECLASS\nIMAGECLASS\u0000\nIMAGECLASS\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\tIMAGEFILE\u0000\tIMAGEFILE\tIMAGEFILE\u0000\tIMAGEFILE\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\aDisplay\fUpp::Display\fUpp::Display\aDisplay\u0003Upp\aDISPLAY\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000@(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.h:7:2)NUpp::Display::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.h:7:2)DUpp::Display::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.)\u0004enum\u0003Upp@(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DISPLAY.H:7:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0011\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0006CURSORNUpp::Display::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.h:7:2)\u0014Upp::Display::CURSOR\u0006CURSOR\u0003Upp\u0006CURSOR\fUpp::Display\fUPP::DISPLAY\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0005FOCUSNUpp::Display::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.h:7:2)\u0013Upp::Display::FOCUS\u0005FOCUS\u0003Upp\u0005FOCUS\fUpp::Display\fUPP::DISPLAY\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u0000\u0011\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0006SELECTNUpp::Display::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.h:7:2)\u0014Upp::Display::SELECT\u0006SELECT\u0003Upp\u0006SELECT\fUpp::Display\fUPP::DISPLAY\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\n\u0000\u0000\u0000\u0002\u0000\u0000\u0000\n\u0000\u0000\u0000\u0011\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\bREADONLYNUpp::Display::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.h:7:2)\u0016Upp::Display::READONLY\bREADONLY\u0003Upp\bREADONLY\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000H\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0001\u0000\u000FPaintBackgroundEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constTUpp::Display::PaintBackground(Draw&,const Rect&,const Value&,Color,Color,dword)constgvoid PaintBackground(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u000FPAINTBACKGROUND\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000;\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constJUpp::Display::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000.\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0001\u0000\nGetStdSize\u001ASize (const Value &) const+Upp::Display::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000=\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0001\u0000\tRatioSize$Size (const Value &, int, int) const2Upp::Display::RatioSize(const Value&,int,int)const4Size RatioSize(const Value& q, int cx, int cy) const\u0003Upp\tRATIOSIZE\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\b~Display\u0010void () noexcept\u0011Upp::Display::~()\n~Display()\u0003Upp\b~DISPLAY\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\bAttrText\rUpp::AttrText\rUpp::AttrText>AttrText : public ValueType<AttrText, 151, Moveable<AttrText>>\u0003Upp\bATTRTEXT\rUpp::AttrText\rUPP::ATTRTEXT\u000EUpp::ValueType\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0004text\aWString\u0013Upp::AttrText::text\fWString text\u0003Upp\u0004TEXT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0005value\u0005Value\u0014Upp::AttrText::value\vValue value\u0003Upp\u0005VALUE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\r\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0013Upp::AttrText::font\tFont font\u0003Upp\u0004FONT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\f\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0003ink\u0005Color\u0012Upp::AttrText::ink\tColor ink\u0003Upp\u0003INK\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\tnormalink\u0005Color\u0018Upp::AttrText::normalink\u000FColor normalink\u0003Upp\tNORMALINK\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0005paper\u0005Color\u0014Upp::AttrText::paper\vColor paper\u0003Upp\u0005PAPER\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\vnormalpaper\u0005Color\u001AUpp::AttrText::normalpaper\u0011Color normalpaper\u0003Upp\vNORMALPAPER\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0005align\u0003int\u0014Upp::AttrText::align\tint align\u0003Upp\u0005ALIGN\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\f\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0003img\u0005Image\u0012Upp::AttrText::img\tImage img\u0003Upp\u0003IMG\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u000F\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0006imgspc\u0003int\u0015Upp::AttrText::imgspc\nint imgspc\u0003Upp\u0006IMGSPC\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u001E\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0003Set\u0019AttrText &(const Value &) Upp::AttrText::Set(const Value&)\u001DAttrText& Set(const Value& v)\u0003Upp\u0003SET\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000J\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\toperator=\u0019AttrText &(const Value &)&Upp::AttrText::operator=(const Value&)\u0012AttrText& operator\u0003Upp\tOPERATOR=\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000Z\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0004Text\u001AAttrText &(const String &)\"Upp::AttrText::Text(const String&)!AttrText& Text(const String& txt)\u0003Upp\u0004TEXT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000N\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0004Text\u001BAttrText &(const WString &)#Upp::AttrText::Text(const WString&)\"AttrText& Text(const WString& txt)\u0003Upp\u0004TEXT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000b\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0004Text\u0018AttrText &(const char *) Upp::AttrText::Text(const char*)\u001FAttrText& Text(const char *txt)\u0003Upp\u0004TEXT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000K\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0003Ink\u0011AttrText &(Color)\u0019Upp::AttrText::Ink(Color)\u0016AttrText& Ink(Color c)\u0003Upp\u0003INK\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000Q\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\tNormalInk\u0011AttrText &(Color)\u001FUpp::AttrText::NormalInk(Color)\u001CAttrText& NormalInk(Color c)\u0003Upp\tNORMALINK\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000M\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0005Paper\u0011AttrText &(Color)\u001BUpp::AttrText::Paper(Color)\u0018AttrText& Paper(Color c)\u0003Upp\u0005PAPER\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000S\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\vNormalPaper\u0011AttrText &(Color)!Upp::AttrText::NormalPaper(Color)\u001EAttrText& NormalPaper(Color c)\u0003Upp\vNORMALPAPER\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000L\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\aSetFont\u0010AttrText &(Font)\u001CUpp::AttrText::SetFont(Font)\u0019AttrText& SetFont(Font f)\u0003Upp\aSETFONT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000P\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Bold\u0010AttrText &(bool)\u0019Upp::AttrText::Bold(bool)\u001DAttrText& Bold(bool b = true)\u0003Upp\u0004BOLD\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000R\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0006Italic\u0010AttrText &(bool)\u001BUpp::AttrText::Italic(bool)\u001FAttrText& Italic(bool b = true)\u0003Upp\u0006ITALIC\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000U\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\tUnderline\u0010AttrText &(bool)\u001EUpp::AttrText::Underline(bool)\"AttrText& Underline(bool b = true)\u0003Upp\tUNDERLINE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u0000U\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\tStrikeout\u0010AttrText &(bool)\u001EUpp::AttrText::Strikeout(bool)\"AttrText& Strikeout(bool b = true)\u0003Upp\tSTRIKEOUT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000M\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0005Align\u000FAttrText &(int)\u0019Upp::AttrText::Align(int)\u0016AttrText& Align(int a)\u0003Upp\u0005ALIGN\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000N\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0004Left\fAttrText &()\u0015Upp::AttrText::Left()\u0010AttrText& Left()\u0003Upp\u0004LEFT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000P\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0006Center\fAttrText &()\u0017Upp::AttrText::Center()\u0012AttrText& Center()\u0003Upp\u0006CENTER\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000O\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u0005Right\fAttrText &()\u0016Upp::AttrText::Right()\u0011AttrText& Right()\u0003Upp\u0005RIGHT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000Y\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\bSetImage\u001EAttrText &(const Image &, int))Upp::AttrText::SetImage(const Image&,int)/AttrText& SetImage(const Image& m, int spc = 4)\u0003Upp\bSETIMAGE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u001B\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\tSerialize\u000Fvoid (Stream &)!Upp::AttrText::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u001B\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\aJsonize\u000Fvoid (JsonIO &)\u001FUpp::AttrText::Jsonize(JsonIO&)\u0019void Jsonize(JsonIO& jio)\u0003Upp\aJSONIZE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0019\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0006Xmlize\u000Evoid (XmlIO &)\u001DUpp::AttrText::Xmlize(XmlIO&)\u0017void Xmlize(XmlIO& xio)\u0003Upp\u0006XMLIZE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000*\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\noperator==\u001Dbool (const AttrText &) const/Upp::AttrText::operator==(const AttrText&)const\rbool operator\u0003Upp\nOPERATOR==\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000K\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\noperator!=\u001Dbool (const AttrText &) const/Upp::AttrText::operator!=(const AttrText&)const\u000Ebool operator!\u0003Upp\nOPERATOR!=\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000U\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\fGetHashValue\u000Fhash_t () const\"Upp::AttrText::GetHashValue()const\u001Bhash_t GetHashValue() const\u0003Upp\fGETHASHVALUE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000I\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u000EIsNullInstance\rbool () const$Upp::AttrText::IsNullInstance()const\u001Bbool IsNullInstance() const\u0003Upp\u000EISNULLINSTANCE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000U\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\aSetNull\avoid ()\u0018Upp::AttrText::SetNull()\u000Evoid SetNull()\u0003Upp\aSETNULL\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000L\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\bToString\u000FString () const\u001EUpp::AttrText::ToString()const\u0017String ToString() const\u0003Upp\bTOSTRING\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000S\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\aCompare\u001Cint (const AttrText &) const,Upp::AttrText::Compare(const AttrText&)const$int Compare(const AttrText& x) const\u0003Upp\aCOMPARE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000M\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\vPolyCompare\u0019int (const Value &) const-Upp::AttrText::PolyCompare(const Value&)const%int PolyCompare(const Value& v) const\u0003Upp\vPOLYCOMPARE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0017\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u000Eoperator Value\u000EValue () const$Upp::AttrText::operator Value()const\u0016operator Value() const\u0003Upp\u000EOPERATOR VALUE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0019\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\bAttrText\u0014void (const Value &)%Upp::AttrText::AttrText(const Value&)\u0018AttrText(const Value& v)\u0003Upp\bATTRTEXT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000<\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\bAttrText\avoid ()\u0019Upp::AttrText::AttrText()\nAttrText()\u0003Upp\bATTRTEXT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\f\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init\avoid ()\u0015Upp::AttrText::Init()\vvoid Init()\u0003Upp\u0004INIT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000\u001B\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\nStdDisplay\u0011const Display &()\u0011Upp::StdDisplay()\u001Bconst Display& StdDisplay()\u0003Upp\nSTDDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000!\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0000\u0000\u0010StdCenterDisplay\u0011const Display &()\u0017Upp::StdCenterDisplay()!const Display& StdCenterDisplay()\u0003Upp\u0010STDCENTERDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000 \u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u000FStdRightDisplay\u0011const Display &()\u0016Upp::StdRightDisplay() const Display& StdRightDisplay()\u0003Upp\u000FSTDRIGHTDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u001D\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\fColorDisplay\u0011const Display &()\u0013Upp::ColorDisplay()\u001Dconst Display& ColorDisplay()\u0003Upp\fCOLORDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0000\u0000\u0000 \u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0000\u000FSizeTextDisplay\u0011const Display &()\u0016Upp::SizeTextDisplay() const Display& SizeTextDisplay()\u0003Upp\u000FSIZETEXTDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u001D\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\fImageDisplay\u0011const Display &()\u0013Upp::ImageDisplay()\u001Dconst Display& ImageDisplay()\u0003Upp\fIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0000\u0000\u0000Y\u0000\u0000\u0000#\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0000\u0000\u0012FittedImageDisplay\u0011const Display &()\u0019Upp::FittedImageDisplay()#const Display& FittedImageDisplay()\u0003Upp\u0012FITTEDIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000%\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0014CenteredImageDisplay\u0011const Display &()\u001BUpp::CenteredImageDisplay()%const Display& CenteredImageDisplay()\u0003Upp\u0014CENTEREDIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000.\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u001DCenteredHighlightImageDisplay\u0011const Display &()$Upp::CenteredHighlightImageDisplay().const Display& CenteredHighlightImageDisplay()\u0003Upp\u001DCENTEREDHIGHLIGHTIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0000\u0000\u0000\u001F\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\u000EDrawingDisplay\u0011const Display &()\u0015Upp::DrawingDisplay()\u001Fconst Display& DrawingDisplay()\u0003Upp\u000EDRAWINGDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000^\u0000\u0000\u0000\u0000\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0010ColorDisplayNull\u0015Upp::ColorDisplayNull\u0015Upp::ColorDisplayNull!ColorDisplayNull : public Display\u0003Upp\u0010COLORDISPLAYNULL\u0015Upp::ColorDisplayNull\u0015UPP::COLORDISPLAYNULL\fUpp::Display\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000A\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0010ColorDisplayNull\rvoid (String)/Upp::ColorDisplayNull::ColorDisplayNull(String)(ColorDisplayNull(String nulltext = Null)\u0003Upp\u0010COLORDISPLAYNULL\u0015Upp::ColorDisplayNull\u0015UPP::COLORDISPLAYNULL\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000;\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constSUpp::ColorDisplayNull::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0015Upp::ColorDisplayNull\u0015UPP::COLORDISPLAYNULL\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0000d\u0000\u0000\u0000\u0010\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\bnulltext\u0006String\u001FUpp::ColorDisplayNull::nulltext\u000FString nulltext\u0003Upp\bNULLTEXT\u0015Upp::ColorDisplayNull\u0015UPP::COLORDISPLAYNULL\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000g\u0000\u0000\u0000\u0000\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u000FDisplayWithIcon\u0014Upp::DisplayWithIcon\u0014Upp::DisplayWithIcon DisplayWithIcon : public Display\u0003Upp\u000FDISPLAYWITHICON\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\fUpp::Display\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u0000\u0017\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\adisplay\u000Fconst Display *\u001DUpp::DisplayWithIcon::display\u0016const Display *display\u0003Upp\aDISPLAY\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0000i\u0000\u0000\u0000\v\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0004icon\u0005Image\u001AUpp::DisplayWithIcon::icon\nImage icon\u0003Upp\u0004ICON\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u0000\v\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\u0004lspc\u0003int\u001AUpp::DisplayWithIcon::lspc\bint lspc\u0003Upp\u0004LSPC\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000H\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0001\u0000\u000FPaintBackgroundEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) const\\Upp::DisplayWithIcon::PaintBackground(Draw&,const Rect&,const Value&,Color,Color,dword)constgvoid PaintBackground(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u000FPAINTBACKGROUND\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0000\u0000\u0000;\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constRUpp::DisplayWithIcon::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0000p\u0000\u0000\u0000.\u0000\u0000\u0000p\u0000\u0000\u0000\u0000\u0001\u0000\nGetStdSize\u001ASize (const Value &) const3Upp::DisplayWithIcon::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000T\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\aSetIcon\u0019void (const Image &, int)/Upp::DisplayWithIcon::SetIcon(const Image&,int)+void SetIcon(const Image& img, int spc = 4)\u0003Upp\aSETICON\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u0000\u0000\u0000J\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\nSetDisplay\u0016void (const Display &)0Upp::DisplayWithIcon::SetDisplay(const Display&)!void SetDisplay(const Display& d)\u0003Upp\nSETDISPLAY\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000\\\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set*void (const Display &, const Image &, int):Upp::DisplayWithIcon::Set(const Display&,const Image&,int)7void Set(const Display& d, const Image& m, int spc = 4)\u0003Upp\u0003SET\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0012\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u000FDisplayWithIcon\avoid ()'Upp::DisplayWithIcon::DisplayWithIcon()\u0011DisplayWithIcon()\u0003Upp\u000FDISPLAYWITHICON\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tPaintRect\u000EUpp::PaintRect\u000EUpp::PaintRect\u001FPaintRect : Moveable<PaintRect>\u0003Upp\tPAINTRECT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0015\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0005value\u0005Value\u0015Upp::PaintRect::value\vValue value\u0003Upp\u0005VALUE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u0000\u0017\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\adisplay\u000Fconst Display *\u0017Upp::PaintRect::display\u0016const Display *display\u0003Upp\aDISPLAY\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005Paint6void (Draw &, const Rect &, Color, Color, dword) const?Upp::PaintRect::Paint(Draw&,const Rect&,Color,Color,dword)constlvoid Paint(Draw& w, const Rect& r, Color ink = SColorText, Color paper = SColorPaper, dword style = 0) const\u0003Upp\u0005PAINT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005Paint<void (Draw &, int, int, int, int, Color, Color, dword) constCUpp::PaintRect::Paint(Draw&,int,int,int,int,Color,Color,dword)const{void Paint(Draw& w, int x, int y, int cx, int cy, Color ink = SColorText, Color paper = SColorPaper, dword style = 0) const\u0003Upp\u0005PAINT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nGetStdSize\rSize () const!Upp::PaintRect::GetStdSize()const\u0017Size GetStdSize() const\u0003Upp\nGETSTDSIZE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tRatioSize\u0015Size (int, int) const'Upp::PaintRect::RatioSize(int,int)const$Size RatioSize(int cx, int cy) const\u0003Upp\tRATIOSIZE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tRatioSize\u0011Size (Size) const$Upp::PaintRect::RatioSize(Size)const\u001DSize RatioSize(Size sz) const\u0003Upp\tRATIOSIZE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nSetDisplay\u0016void (const Display &)*Upp::PaintRect::SetDisplay(const Display&)!void SetDisplay(const Display& d)\u0003Upp\nSETDISPLAY\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bSetValue\u0014void (const Value &)&Upp::PaintRect::SetValue(const Value&)\u001Dvoid SetValue(const Value& v)\u0003Upp\bSETVALUE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set%void (const Display &, const Value &)0Upp::PaintRect::Set(const Display&,const Value&)*void Set(const Display& d, const Value& v)\u0003Upp\u0003SET\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u0017Upp::PaintRect::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bGetValue\u0015const Value &() const\u001FUpp::PaintRect::GetValue()const\u001Dconst Value& GetValue() const\u0003Upp\bGETVALUE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nGetDisplay\u0017const Display &() const!Upp::PaintRect::GetDisplay()const!const Display& GetDisplay() const\u0003Upp\nGETDISPLAY\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\roperator bool\rbool () const$Upp::PaintRect::operator bool()const\u0015operator bool() const\u0003Upp\rOPERATOR BOOL\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tPaintRect\avoid ()\u001BUpp::PaintRect::PaintRect()\vPaintRect()\u0003Upp\tPAINTRECT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tPaintRect\u0016void (const Display &))Upp::PaintRect::PaintRect(const Display&)!PaintRect(const Display& display)\u0003Upp\tPAINTRECT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tPaintRect%void (const Display &, const Value &)6Upp::PaintRect::PaintRect(const Display&,const Value&)3PaintRect(const Display& display, const Value& val)\u0003Upp\tPAINTRECT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000end\u0000D\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_header.h","value":"data\u001Bõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_META\u0000\nIMAGE_META\nIMAGE_META\u0000\nIMAGE_META\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_SCAN\u0000\nIMAGE_SCAN\nIMAGE_SCAN\u0000\nIMAGE_SCAN\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\fIMAGE_PACKED\u0000\fIMAGE_PACKED\fIMAGE_PACKED\u0000\fIMAGE_PACKED\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\rPREMULTIPLIED\u0000\rPREMULTIPLIED\rPREMULTIPLIED\u0000\rPREMULTIPLIED\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0018\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000s\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_DATA\u0000\nIMAGE_DATA\nIMAGE_DATA\u0000\nIMAGE_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\t\u0000\u0000\u0000\b\u0000\u0000\u0000\t\u0000\u0000\u0000\u001C\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\aDrawImg\fUpp::DrawImg\fUpp::DrawImg\aDrawImg\u0003Upp\aDRAWIMG\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\u001D\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\bIMAGE_ID\u0000\bIMAGE_ID\bIMAGE_ID\u0000\bIMAGE_ID\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000D(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_header.h:16:2)RUpp::DrawImg::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_header.h:16:2)GUpp::DrawImg::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_header.)\u0004enum\u0003UppD(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\IML_HEADER.H:16:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0000\u0000\u0000\a\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0005COUNTRUpp::DrawImg::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_header.h:16:2)\u0013Upp::DrawImg::COUNT\u0005COUNT\u0003Upp\u0005COUNT\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0001\u0003Iml\fUpp::Iml &()\u0013Upp::DrawImg::Iml()\u0016static Upp::Iml& Iml()\u0003Upp\u0003IML\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000Z\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0001\nRegister__\avoid ()\u001AUpp::DrawImg::Register__()\u0018static void Register__()\u0003Upp\nREGISTER__\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000.\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0001\u0004Find\u0019int (const Upp::String &)&Upp::DrawImg::Find(const Upp::String&)%static int Find(const Upp::String& s)\u0003Upp\u0004FIND\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000'\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0001\u0004Find\u0012int (const char *)\u001FUpp::DrawImg::Find(const char*)\u001Estatic int Find(const char *s)\u0003Upp\u0004FIND\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000L\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0001\bGetCount\u0006int ()\u0018Upp::DrawImg::GetCount()\u0015static int GetCount()\u0003Upp\bGETCOUNT\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000J\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0001\u0005GetId\u0011Upp::String (int)\u0018Upp::DrawImg::GetId(int)\u001Fstatic Upp::String GetId(int i)\u0003Upp\u0005GETID\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u001E\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0003Get\u0010Upp::Image (int)\u0016Upp::DrawImg::Get(int)\u001Cstatic Upp::Image Get(int i)\u0003Upp\u0003GET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000&\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0001\u0003Get\u0019Upp::Image (const char *)\u001EUpp::DrawImg::Get(const char*)$static Upp::Image Get(const char *s)\u0003Upp\u0003GET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000-\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0001\u0003Get Upp::Image (const Upp::String &)%Upp::DrawImg::Get(const Upp::String&)+static Upp::Image Get(const Upp::String& s)\u0003Upp\u0003GET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000.\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0001\u0003Set\u001Evoid (int, const Upp::Image &)(Upp::DrawImg::Set(int,const Upp::Image&)+static void Set(int i, const Upp::Image& m)\u0003Upp\u0003SET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u00006\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0001\u0003Set'void (const char *, const Upp::Image &)0Upp::DrawImg::Set(const char*,const Upp::Image&)3static void Set(const char *s, const Upp::Image& m)\u0003Upp\u0003SET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000=\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0001\u0005Reset\avoid ()\u0015Upp::DrawImg::Reset()\u0013static void Reset()\u0003Upp\u0005RESET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000)\u0000\u0000\u0000\b\u0000\u0000\u0000)\u0000\u0000\u0000C\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000*\u0000\u0000\u0000\b\u0000\u0000\u0000*\u0000\u0000\u0000@\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\bIMAGE_ID\u0000\bIMAGE_ID\bIMAGE_ID\u0000\bIMAGE_ID\u0000\u0000\u0000\u0000end\u0000¡\r\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DrawImg.iml","value":"data\u0005\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\vI_threedotsRUpp::DrawImg::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_header.h:16:2)\u0019Upp::DrawImg::I_threedots\vI_threedots\u0003Upp\vI_THREEDOTS\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0001\tthreedots\rUpp::Image ()\u0019Upp::DrawImg::threedots()\u001Dstatic Upp::Image threedots()\u0003Upp\tTHREEDOTS\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0001\u0010DefaultDragImage\rUpp::Image () Upp::DrawImg::DefaultDragImage()$static Upp::Image DefaultDragImage()\u0003Upp\u0010DEFAULTDRAGIMAGE\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0012I_DefaultDragImageRUpp::DrawImg::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_header.h:16:2) Upp::DrawImg::I_DefaultDragImage\u0012I_DefaultDragImage\u0003Upp\u0012I_DEFAULTDRAGIMAGE\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000end\u0000\u0013\u0003\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Cham.h","value":"data@\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0006LookOp\vUpp::LookOp\vUpp::LookOp\venum LookOp\u0003Upp\u0006LOOKOP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\nLOOK_PAINT\vUpp::LookOp\u000FUpp::LOOK_PAINT\nLOOK_PAINT\u0003Upp\nLOOK_PAINT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\r\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\fLOOK_MARGINS\vUpp::LookOp\u0011Upp::LOOK_MARGINS\fLOOK_MARGINS\u0003Upp\fLOOK_MARGINS\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u000ELOOK_PAINTEDGE\vUpp::LookOp\u0013Upp::LOOK_PAINTEDGE\u000ELOOK_PAINTEDGE\u0003Upp\u000ELOOK_PAINTEDGE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\fLOOK_NOCACHE\vUpp::LookOp\u0011Upp::LOOK_NOCACHE\fLOOK_NOCACHE\u0003Upp\fLOOK_NOCACHE\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000=(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Cham.h:9:1)BUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Cham.h:9:1)8Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Cham.)\u0004enum\u0003Upp=(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\CHAM.H:9:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u001B\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0012CH_SCROLLBAR_IMAGEBUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Cham.h:9:1)\u0017Upp::CH_SCROLLBAR_IMAGE\u0012CH_SCROLLBAR_IMAGE\u0003Upp\u0012CH_SCROLLBAR_IMAGE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u001B\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0012CH_EDITFIELD_IMAGEBUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Cham.h:9:1)\u0017Upp::CH_EDITFIELD_IMAGE\u0012CH_EDITFIELD_IMAGE\u0003Upp\u0012CH_EDITFIELD_IMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000]\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\bChLookFnAvoid (Value (*)(Draw &, const Rect &, const Value &, int, Color))AUpp::ChLookFn(Value(*)(Draw&,const Rect&,const Value&,int,Color))Hvoid ChLookFn(Value (*fn)(Draw&, const Rect&, const Value&, int, Color))\u0003Upp\bCHLOOKFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000$\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\fAdjustColors\u0015Image (const Image &)\u001FUpp::AdjustColors(const Image&)$Image AdjustColors(const Image& img)\u0003Upp\fADJUSTCOLORS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000?\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\bOverride\u0019void (Iml &, Iml &, bool)\u001DUpp::Override(Iml&,Iml&,bool)=void Override(Iml& target, Iml& source, bool colored = false)\u0003Upp\bOVERRIDE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u00000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u000FColoredOverride\u0013void (Iml &, Iml &)\u001FUpp::ColoredOverride(Iml&,Iml&).void ColoredOverride(Iml& target, Iml& source)\u0003Upp\u000FCOLOREDOVERRIDE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\aChReset\avoid ()\u000EUpp::ChReset()\u000Evoid ChReset()\u0003Upp\aCHRESET\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\bChFinish\avoid ()\u000FUpp::ChFinish()\u000Fvoid ChFinish()\u0003Upp\bCHFINISH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000K\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\aChPaint1void (Draw &, const Rect &, const Value &, Color)2Upp::ChPaint(Draw&,const Rect&,const Value&,Color)Ivoid ChPaint(Draw& w, const Rect& r, const Value& look, Color ink = Null)\u0003Upp\aCHPAINT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000Z\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\aChPaint7void (Draw &, int, int, int, int, const Value &, Color)6Upp::ChPaint(Draw&,int,int,int,int,const Value&,Color)Xvoid ChPaint(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\aCHPAINT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000a\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u000EChPaintNoCache7void (Draw &, int, int, int, int, const Value &, Color)=Upp::ChPaintNoCache(Draw&,int,int,int,int,const Value&,Color)_void ChPaintNoCache(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\u000ECHPAINTNOCACHE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000O\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\vChPaintEdge1void (Draw &, const Rect &, const Value &, Color)6Upp::ChPaintEdge(Draw&,const Rect&,const Value&,Color)Mvoid ChPaintEdge(Draw& w, const Rect& r, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTEDGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000^\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\vChPaintEdge7void (Draw &, int, int, int, int, const Value &, Color):Upp::ChPaintEdge(Draw&,int,int,int,int,const Value&,Color)\\void ChPaintEdge(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTEDGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000O\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\vChPaintBody1void (Draw &, const Rect &, const Value &, Color)6Upp::ChPaintBody(Draw&,const Rect&,const Value&,Color)Mvoid ChPaintBody(Draw& w, const Rect& r, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTBODY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000^\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\vChPaintBody7void (Draw &, int, int, int, int, const Value &, Color):Upp::ChPaintBody(Draw&,int,int,int,int,const Value&,Color)\\void ChPaintBody(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTBODY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000#\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\tChMargins\u0014Rect (const Value &)\u001CUpp::ChMargins(const Value&)!Rect ChMargins(const Value& look)\u0003Upp\tCHMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u00002\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u000EDeflateMargins\u001Bvoid (Rect &, const Rect &)&Upp::DeflateMargins(Rect&,const Rect&)0void DeflateMargins(Rect& r, const Rect& margin)\u0003Upp\u000EDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u00003\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0010ChDeflateMargins\u001Cvoid (Rect &, const Value &))Upp::ChDeflateMargins(Rect&,const Value&)1void ChDeflateMargins(Rect& r, const Value& look)\u0003Upp\u0010CHDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000.\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u000EDeflateMargins\u001Bvoid (Size &, const Rect &)&Upp::DeflateMargins(Size&,const Rect&),void DeflateMargins(Size& sz, const Rect& m)\u0003Upp\u000EDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u00004\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0010ChDeflateMargins\u001Cvoid (Size &, const Value &))Upp::ChDeflateMargins(Size&,const Value&)2void ChDeflateMargins(Size& sz, const Value& look)\u0003Upp\u0010CHDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000-\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u000EInflateMargins\u001Bvoid (Rect &, const Rect &)&Upp::InflateMargins(Rect&,const Rect&)+void InflateMargins(Rect& r, const Rect& m)\u0003Upp\u000EINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u00003\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0010ChInflateMargins\u001Cvoid (Rect &, const Value &))Upp::ChInflateMargins(Rect&,const Value&)1void ChInflateMargins(Rect& r, const Value& look)\u0003Upp\u0010CHINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000.\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u000EInflateMargins\u001Bvoid (Size &, const Rect &)&Upp::InflateMargins(Size&,const Rect&),void InflateMargins(Size& sz, const Rect& m)\u0003Upp\u000EINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u00004\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0010ChInflateMargins\u001Cvoid (Size &, const Value &))Upp::ChInflateMargins(Size&,const Value&)2void ChInflateMargins(Size& sz, const Value& look)\u0003Upp\u0010CHINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0015\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\fChInvalidate\avoid ()\u0013Upp::ChInvalidate()\u0013void ChInvalidate()\u0003Upp\fCHINVALIDATE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0018\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u000FChIsInvalidated\abool ()\u0016Upp::ChIsInvalidated()\u0016bool ChIsInvalidated()\u0003Upp\u000FCHISINVALIDATED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000!\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0018IsLabelTextColorMismatch\abool ()\u001FUpp::IsLabelTextColorMismatch()\u001Fbool IsLabelTextColorMismatch()\u0003Upp\u0018ISLABELTEXTCOLORMISMATCH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0018\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u000FIsDarkColorFace\abool ()\u0016Upp::IsDarkColorFace()\u0016bool IsDarkColorFace()\u0003Upp\u000FISDARKCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\u001F\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\aChStyle\u0000\fUpp::ChStyle\u001Atemplate <class T> ChStyle\u0003Upp\aCHSTYLE\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\f\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0006status\u0004byte\u0014Upp::ChStyle::status\vbyte status\u0003Upp\u0006STATUS\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0010\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\nregistered\u0004byte\u0018Upp::ChStyle::registered\u000Fbyte registered\u0003Upp\nREGISTERED\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u000E\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\bstandard\u0003T *\u0016Upp::ChStyle::standard\vT *standard\u0003Upp\bSTANDARD\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u001A\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\bStandard\u0011const T &() const\u001DUpp::ChStyle::Standard()const\u0019const T& Standard() const\u0003Upp\bSTANDARD\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0017\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u0005Write\vT &() const\u001AUpp::ChStyle::Write()const\u0010T& Write() const\u0003Upp\u0005WRITE\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u001E\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0006Assign\u0010void (const T &)\u001EUpp::ChStyle::Assign(const T&)\u0019void Assign(const T& src)\u0003Upp\u0006ASSIGN\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000\n\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\nChStyle<T>\avoid ()\u0017Upp::ChStyle::ChStyle()\fChStyle<T>()\u0003Upp\nCHSTYLE<T>\fUpp::ChStyle\fUPP::CHSTYLE\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000;\u0000\u0000\u0000\b\u0000\u0000\u0000;\u0000\u0000\u00001\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\bCH_STYLE\u0000\bCH_STYLE\bCH_STYLE\u0000\bCH_STYLE\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000V\u0000\u0000\u0000\b\u0000\u0000\u0000V\u0000\u0000\u0000Q\u0000\u0000\u0000g\u0000\u0000\u0000\u0000\u0000\u0000\aCH_VAR0\u0000\aCH_VAR0\aCH_VAR0\u0000\aCH_VAR0\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000i\u0000\u0000\u0000\b\u0000\u0000\u0000i\u0000\u0000\u0000L\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0000\u0000\u0006CH_VAR\u0000\u0006CH_VAR\u0006CH_VAR\u0000\u0006CH_VAR\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u00002\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\aChColor\fUpp::ChColor\fUpp::ChColor\u001AChColor : ChStyle<ChColor>\u0003Upp\aCHCOLOR\fUpp::ChColor\fUPP::CHCOLOR\fUpp::ChStyle\u0000\u0006\u0000\u0000\u0000*\u0000\u0000\u0000k\u0000\u0000\u0000$\u0000\u0000\u0000k\u0000\u0000\u0000/\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0005value\u0005Color\u0013Upp::ChColor::value\vColor value\u0003Upp\u0005VALUE\fUpp::ChColor\fUPP::CHCOLOR\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000l\u0000\u0000\u0000\b\u0000\u0000\u0000l\u0000\u0000\u0000?\u0000\u0000\u0000l\u0000\u0000\u0000\u0000\u0000\u0000\bCH_COLOR\u0000\bCH_COLOR\bCH_COLOR\u0000\bCH_COLOR\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000,\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0005ChInt\nUpp::ChInt\nUpp::ChInt\u0016ChInt : ChStyle<ChInt>\u0003Upp\u0005CHINT\nUpp::ChInt\nUPP::CHINT\fUpp::ChStyle\u0000\u0006\u0000\u0000\u0000$\u0000\u0000\u0000n\u0000\u0000\u0000 \u0000\u0000\u0000n\u0000\u0000\u0000)\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0005value\u0003int\u0011Upp::ChInt::value\tint value\u0003Upp\u0005VALUE\nUpp::ChInt\nUPP::CHINT\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000o\u0000\u0000\u0000\b\u0000\u0000\u0000o\u0000\u0000\u00009\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0000\u0000\u0006CH_INT\u0000\u0006CH_INT\u0006CH_INT\u0000\u0006CH_INT\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000q\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\aChValue\fUpp::ChValue\fUpp::ChValue\u001AChValue : ChStyle<ChValue>\u0003Upp\aCHVALUE\fUpp::ChValue\fUPP::CHVALUE\fUpp::ChStyle\u0000\u0006\u0000\u0000\u0000*\u0000\u0000\u0000q\u0000\u0000\u0000$\u0000\u0000\u0000q\u0000\u0000\u0000/\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0005value\u0005Value\u0013Upp::ChValue::value\vValue value\u0003Upp\u0005VALUE\fUpp::ChValue\fUPP::CHVALUE\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000r\u0000\u0000\u0000\b\u0000\u0000\u0000r\u0000\u0000\u0000?\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\bCH_VALUE\u0000\bCH_VALUE\bCH_VALUE\u0000\bCH_VALUE\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u00002\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\aChImage\fUpp::ChImage\fUpp::ChImage\u001AChImage : ChStyle<ChImage>\u0003Upp\aCHIMAGE\fUpp::ChImage\fUPP::CHIMAGE\fUpp::ChStyle\u0000\u0006\u0000\u0000\u0000*\u0000\u0000\u0000t\u0000\u0000\u0000$\u0000\u0000\u0000t\u0000\u0000\u0000/\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0005value\u0005Image\u0013Upp::ChImage::value\vImage value\u0003Upp\u0005VALUE\fUpp::ChImage\fUPP::CHIMAGE\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000u\u0000\u0000\u0000\b\u0000\u0000\u0000u\u0000\u0000\u0000?\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000\u0000\bCH_IMAGE\u0000\bCH_IMAGE\bCH_IMAGE\u0000\bCH_IMAGE\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0000w\u0000\u0000\u0000Q\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\nChLookWith+Value (const Value &, const Image &, Point)0Upp::ChLookWith(const Value&,const Image&,Point)QValue ChLookWith(const Value& look, const Image& img, Point offset = Point(0, 0))\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000^\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\nChLookWith2Value (const Value &, const Image &, Color, Point)6Upp::ChLookWith(const Value&,const Image&,Color,Point)^Value ChLookWith(const Value& look, const Image& img, Color color, Point offset = Point(0, 0))\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0000y\u0000\u0000\u0000o\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\nChLookWith@Value (const Value &, const Image &, Color (*)(int), int, Point)BUpp::ChLookWith(const Value&,const Image&,Color(*)(int),int,Point)mValue ChLookWith(const Value& look, const Image& img, Color (*color)(int), int i, Point offset = Point(0, 0))\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000P\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\nChLookWith1void (Value *, const Image &, const Color *, int)5Upp::ChLookWith(Value*,const Image&,const Color*,int)Ovoid ChLookWith(Value *look, const Image& image, const Color *color, int n = 4)\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000E\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0011ChRegisterStyle__!void (byte &, byte &, void (*)())-Upp::ChRegisterStyle__(byte&,byte&,void(*)())Evoid ChRegisterStyle__(byte& state, byte& registered, void (*init)())\u0003Upp\u0011CHREGISTERSTYLE__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bChBorder%Value (const ColorF *, const Value &))Upp::ChBorder(const ColorF*,const Value&)FValue ChBorder(const ColorF *colors, const Value& face = SColorFace())\u0003Upp\bCHBORDER\u0003Upp\u0003UPP\u0000\u0000end\u0000(\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DDARasterizer.h","value":"data&\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\rDDARasterizer\u0012Upp::DDARasterizer\u0012Upp::DDARasterizer\rDDARasterizer\u0003Upp\rDDARASTERIZER\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\aSegment\u001BUpp::DDARasterizer::Segment\u001BUpp::DDARasterizer::Segment\u001BSegment : Moveable<Segment>\u0003Upp\aSEGMENT\u001BUpp::DDARasterizer::Segment\u001BUPP::DDARASTERIZER::SEGMENT\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0001l\u0003int\u001EUpp::DDARasterizer::Segment::l\u0005int l\u0003Upp\u0001L\u001BUpp::DDARasterizer::Segment\u001BUPP::DDARASTERIZER::SEGMENT\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0003\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0001h\u0003int\u001EUpp::DDARasterizer::Segment::h\u0005int h\u0003Upp\u0001H\u001BUpp::DDARasterizer::Segment\u001BUPP::DDARASTERIZER::SEGMENT\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0004\u0000\u0000\u0000\v\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0004flag\u0004bool!Upp::DDARasterizer::Segment::flag\tbool flag\u0003Upp\u0004FLAG\u001BUpp::DDARasterizer::Segment\u001BUPP::DDARASTERIZER::SEGMENT\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0006\u0000\u0000\u0000<\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\toperator<\u001Cbool (const Segment &) const;Upp::DDARasterizer::Segment::operator<(const Segment&)const&bool operator<(const Segment& b) const\u0003Upp\tOPERATOR<\u001BUpp::DDARasterizer::Segment\u001BUPP::DDARASTERIZER::SEGMENT\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0010\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\bSegments\u001CUpp::DDARasterizer::Segments\u001CUpp::DDARasterizer::Segments\bSegments\u0003Upp\bSEGMENTS\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0011\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0002cy\u0003int\u0016Upp::DDARasterizer::cy\u0006int cy\u0003Upp\u0002CY\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0013\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0004diry\u0003int\u0018Upp::DDARasterizer::diry\bint diry\u0003Upp\u0004DIRY\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0013\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0004dirx\u0003int\u0018Upp::DDARasterizer::dirx\bint dirx\u0003Upp\u0004DIRX\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0004pseg\rOne<Segments>\u0018Upp::DDARasterizer::pseg\u0012One<Segments> pseg\u0003Upp\u0004PSEG\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0002p0\u0005Point\u0016Upp::DDARasterizer::p0\bPoint p0\u0003Upp\u0002P0\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0002p1\u0005Point\u0016Upp::DDARasterizer::p1\bPoint p1\u0003Upp\u0002P1\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0002j1\u0005Point\u0016Upp::DDARasterizer::j1\bPoint j1\u0003Upp\u0002J1\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0002j2\u0005Point\u0016Upp::DDARasterizer::j2\bPoint j2\u0003Upp\u0002J2\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0002b1\u0005Point\u0016Upp::DDARasterizer::b1\bPoint b1\u0003Upp\u0002B1\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0002b2\u0005Point\u0016Upp::DDARasterizer::b2\bPoint b2\u0003Upp\u0002B2\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0005width\u0003int\u0019Upp::DDARasterizer::width\tint width\u0003Upp\u0005WIDTH\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0005close\u0004bool\u0019Upp::DDARasterizer::close\nbool close\u0003Upp\u0005CLOSE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000!\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0005AHorz\u0014void (int, int, int)&Upp::DDARasterizer::AHorz(int,int,int) void AHorz(int x, int y, int cx)\u0003Upp\u0005AHORZ\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000!\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0005AVert\u0014void (int, int, int)&Upp::DDARasterizer::AVert(int,int,int) void AVert(int x, int y, int cy)\u0003Upp\u0005AVERT\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000+\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0006DoLine\u0019void (Point, Point, bool),Upp::DDARasterizer::DoLine(Point,Point,bool)*void DoLine(Point p1, Point p2, bool last)\u0003Upp\u0006DOLINE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\aFatLine\fvoid (Point)\"Upp::DDARasterizer::FatLine(Point)\u0016void FatLine(Point p2)\u0003Upp\aFATLINE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000/\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0001\u0000\aPutHorz\u0014void (int, int, int)(Upp::DDARasterizer::PutHorz(int,int,int)\"void PutHorz(int x, int y, int cx)\u0003Upp\aPUTHORZ\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000/\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0001\u0000\aPutVert\u0014void (int, int, int)(Upp::DDARasterizer::PutVert(int,int,int)\"void PutVert(int x, int y, int cy)\u0003Upp\aPUTVERT\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000;\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\aGetDirx\fint () const\"Upp::DDARasterizer::GetDirx()const\u0013int GetDirx() const\u0003Upp\aGETDIRX\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000;\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\aGetDiry\fint () const\"Upp::DDARasterizer::GetDiry()const\u0013int GetDiry() const\u0003Upp\aGETDIRY\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u001D\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0004Move\u0016DDARasterizer &(Point)\u001FUpp::DDARasterizer::Move(Point)\u001CDDARasterizer& Move(Point p)\u0003Upp\u0004MOVE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\u001D\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0004Line\u0016DDARasterizer &(Point)\u001FUpp::DDARasterizer::Line(Point)\u001CDDARasterizer& Line(Point p)\u0003Upp\u0004LINE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0017\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0005Close\u0011DDARasterizer &()\u001BUpp::DDARasterizer::Close()\u0016DDARasterizer& Close()\u0003Upp\u0005CLOSE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0019\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\aPolygon\u0011DDARasterizer &()\u001DUpp::DDARasterizer::Polygon()\u0018DDARasterizer& Polygon()\u0003Upp\aPOLYGON\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u0016\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0004Fill\u0011DDARasterizer &()\u001AUpp::DDARasterizer::Fill()\u0015DDARasterizer& Fill()\u0003Upp\u0004FILL\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000L\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0005Width\u0014DDARasterizer &(int)\u001EUpp::DDARasterizer::Width(int) DDARasterizer& Width(int width_)\u0003Upp\u0005WIDTH\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u00004\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\aEllipse\"DDARasterizer &(const Rect &, int),Upp::DDARasterizer::Ellipse(const Rect&,int)3DDARasterizer& Ellipse(const Rect& rect, int width)\u0003Upp\aELLIPSE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u00008\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0002Cy\nvoid (int)\u001BUpp::DDARasterizer::Cy(int)\u0010void Cy(int cy_)\u0003Upp\u0002CY\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0010\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\rDDARasterizer\avoid ()#Upp::DDARasterizer::DDARasterizer()\u000FDDARasterizer()\u0003Upp\rDDARASTERIZER\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0019\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u000E~DDARasterizer\u0010void () noexcept\u0017Upp::DDARasterizer::~()\u0010~DDARasterizer()\u0003Upp\u000E~DDARASTERIZER\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000end\u0000\u0016\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SDraw.h","value":"data2\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0005SDraw\nUpp::SDraw\nUpp::SDraw\u001BSDraw : Draw, DDARasterizer\u0003Upp\u0005SDRAW\nUpp::SDraw\nUPP::SDRAW\u001CUpp::Draw;Upp::DDARasterizer\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\aGetInfo\u000Edword () const\u001AUpp::SDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u0015Upp::SDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000#\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)\u001FUpp::SDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000&\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0001\u0000\tClipoffOp\u0013bool (const Rect &)\"Upp::SDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)(Upp::SDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u001F\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0001\u0000\bOffsetOp\fvoid (Point)\u001BUpp::SDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000*\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)&Upp::SDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u0013Upp::SDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000/\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const*Upp::SDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000I\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0001\u0000\u000ESysDrawImageOp%void (int, int, const Image &, Color)6Upp::SDraw::SysDrawImageOp(int,int,const Image&,Color)@void SysDrawImageOp(int x, int y, const Image& img, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000Z\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0001\u0000\u000ESysDrawImageOp3void (int, int, const Image &, const Rect &, Color)BUpp::SDraw::SysDrawImageOp(int,int,const Image&,const Rect&,Color)Qvoid SysDrawImageOp(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000C\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)-Upp::SDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000p\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)JUpp::SDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000W\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)8Upp::SDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000P\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)6Upp::SDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000P\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)1Upp::SDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000å\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)nUpp::SDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)OUpp::SDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000+\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0001\u0000\aPutHorz\u0014void (int, int, int) Upp::SDraw::PutHorz(int,int,int)\"void PutHorz(int x, int y, int cx)\u0003Upp\aPUTHORZ\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000+\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0001\u0000\aPutVert\u0014void (int, int, int) Upp::SDraw::PutVert(int,int,int)\"void PutVert(int x, int y, int cy)\u0003Upp\aPUTVERT\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0002\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0005Cloff\u0011Upp::SDraw::Cloff\u0011Upp::SDraw::Cloff\u0005Cloff\u0003Upp\u0005CLOFF\u0011Upp::SDraw::Cloff\u0011UPP::SDRAW::CLOFF\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0004clip\fVector<Rect>\u0017Upp::SDraw::Cloff::clip\u0011Vector<Rect> clip\u0003Upp\u0004CLIP\u0011Upp::SDraw::Cloff\u0011UPP::SDRAW::CLOFF\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0006offset\u0005Point\u0019Upp::SDraw::Cloff::offset\fPoint offset\u0003Upp\u0006OFFSET\u0011Upp::SDraw::Cloff\u0011UPP::SDRAW::CLOFF\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000 \u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000O\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\voperator<<=\u0014void (const Cloff &),Upp::SDraw::Cloff::operator<<=(const Cloff&)\u000Fvoid operator<<\u0003Upp\vOPERATOR<<=\u0011Upp::SDraw::Cloff\u0011UPP::SDRAW::CLOFF\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0010\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\tpaintonly\u0004bool\u0015Upp::SDraw::paintonly\u000Ebool paintonly\u0003Upp\tPAINTONLY\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0013\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0005cloff\fArray<Cloff>\u0011Upp::SDraw::cloff\u0012Array<Cloff> cloff\u0003Upp\u0005CLOFF\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u000E\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\adocolor\u0005Color\u0013Upp::SDraw::docolor\rColor docolor\u0003Upp\aDOCOLOR\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000G\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0001\u0000\bPutImage)void (Point, const Image &, const Rect &)4Upp::SDraw::PutImage(Point,const Image&,const Rect&)9void PutImage(Point p, const Image& img, const Rect& src)\u0003Upp\bPUTIMAGE\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000P\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0001\u0000\bPutImage0void (Point, const Image &, const Rect &, Color):Upp::SDraw::PutImage(Point,const Image&,const Rect&,Color)Fvoid PutImage(Point p, const Image& img, const Rect& src, Color color)\u0003Upp\bPUTIMAGE\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u00006\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0001\u0000\aPutRect\u001Avoid (const Rect &, Color)&Upp::SDraw::PutRect(const Rect&,Color)(void PutRect(const Rect& r, Color color)\u0003Upp\aPUTRECT\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000X\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0001\u0000\vRenderGlyph*Image (Point, int, int, Font, Color, Size)6Upp::SDraw::RenderGlyph(Point,int,int,Font,Color,Size)OImage RenderGlyph(Point at, int angle, int chr, Font fnt, Color color, Size sz)\u0003Upp\vRENDERGLYPH\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000]\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\tGetOffset\u000EPoint () const\u001CUpp::SDraw::GetOffset()const\u0017Point GetOffset() const\u0003Upp\tGETOFFSET\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0019\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init\u0013void (const Rect &)\u001DUpp::SDraw::Init(const Rect&)\u0018void Init(const Rect& r)\u0003Upp\u0004INIT\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000J\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init'void (const Vector<Rect> &, int, Point))Upp::SDraw::Init(const Vector&,int,Point)Ivoid Init(const Vector<Rect>& rs, int height, Point offset = Point(0, 0))\u0003Upp\u0004INIT\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000T\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\tPaintOnly\avoid ()\u0017Upp::SDraw::PaintOnly()\u0010void PaintOnly()\u0003Upp\tPAINTONLY\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000U\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0005SDraw\avoid ()\u0013Upp::SDraw::SDraw()\aSDraw()\u0003Upp\u0005SDRAW\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\vSImageDraw1\u0010Upp::SImageDraw1\u0010Upp::SImageDraw1\u001ASImageDraw1 : public SDraw\u0003Upp\vSIMAGEDRAW1\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\nUpp::SDraw\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u000F\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0002ib\vImageBuffer\u0014Upp::SImageDraw1::ib\u000EImageBuffer ib\u0003Upp\u0002IB\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000A\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0001\u0000\bPutImage)void (Point, const Image &, const Rect &):Upp::SImageDraw1::PutImage(Point,const Image&,const Rect&)7void PutImage(Point p, const Image& m, const Rect& src)\u0003Upp\bPUTIMAGE\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u00002\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\aPutRect\u001Avoid (const Rect &, Color),Upp::SImageDraw1::PutRect(const Rect&,Color)(void PutRect(const Rect& r, Color color)\u0003Upp\aPUTRECT\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u0015\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0006Create\vvoid (Size)\u001EUpp::SImageDraw1::Create(Size)\u0014void Create(Size sz)\u0003Upp\u0006CREATE\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\nSImageDraw\u000FUpp::SImageDraw\u000FUpp::SImageDraw\u001FSImageDraw : public SImageDraw1\u0003Upp\nSIMAGEDRAW\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0010Upp::SImageDraw1\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0012\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0005alpha\vSImageDraw1\u0016Upp::SImageDraw::alpha\u0011SImageDraw1 alpha\u0003Upp\u0005ALPHA\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u000F\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\thas_alpha\u0004bool\u001AUpp::SImageDraw::has_alpha\u000Ebool has_alpha\u0003Upp\tHAS_ALPHA\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u000E\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0005Alpha\bDraw &()\u0018Upp::SImageDraw::Alpha()\rDraw& Alpha()\u0003Upp\u0005ALPHA\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0017\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u000Eoperator Image\u000EImage () const&Upp::SImageDraw::operator Image()const\u0016operator Image() const\u0003Upp\u000EOPERATOR IMAGE\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0014\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\nSImageDraw\vvoid (Size)!Upp::SImageDraw::SImageDraw(Size)\u0013SImageDraw(Size sz)\u0003Upp\nSIMAGEDRAW\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u001B\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0000\u0000\nSImageDraw\u000Fvoid (int, int)$Upp::SImageDraw::SImageDraw(int,int)\u001ASImageDraw(int cx, int cy)\u0003Upp\nSIMAGEDRAW\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000end\u0000ó#\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\iml_source.h","value":"data%õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_META\u0000\nIMAGE_META\nIMAGE_META\u0000\nIMAGE_META\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\rPREMULTIPLIED\u0000\rPREMULTIPLIED\rPREMULTIPLIED\u0000\rPREMULTIPLIED\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\bIMAGE_ID\u0000\bIMAGE_ID\bIMAGE_ID\u0000\bIMAGE_ID\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u001C\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000s\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_DATA\u0000\nIMAGE_DATA\nIMAGE_DATA\u0000\nIMAGE_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000V\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\u0019\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_SCAN\u0000\nIMAGE_SCAN\nIMAGE_SCAN\u0000\nIMAGE_SCAN\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u001D\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\fIMAGE_PACKED\u0000\fIMAGE_PACKED\fIMAGE_PACKED\u0000\fIMAGE_PACKED\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0010IMAGE_DATA_BEGIN\u0000\u0010IMAGE_DATA_BEGIN\u0010IMAGE_DATA_BEGIN\u0000\u0010IMAGE_DATA_BEGIN\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0017\u0000\u0000\u0000\b\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_SCAN\u0000\nIMAGE_SCAN\nIMAGE_SCAN\u0000\nIMAGE_SCAN\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\vIMAGE_BEGIN\u0000\vIMAGE_BEGIN\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0003Iml\fUpp::Iml &()\u0013Upp::DrawImg::Iml()\u000FUpp::Iml& Iml()\u0003Upp\u0003IML\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000\u001F\u0000\u0000\u0000\t\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\fIMAGE_PACKED\u0000\fIMAGE_PACKED\fIMAGE_PACKED\u0000\fIMAGE_PACKED\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000!\u0000\u0000\u0000\t\u0000\u0000\u0000!\u0000\u0000\u0000\u0018\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\bIMAGE_ID\u0000\bIMAGE_ID\bIMAGE_ID\u0000\bIMAGE_ID\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u00003\u0000\u0000\u0000\t\u0000\u0000\u00003\u0000\u0000\u0000\u0014\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\bIMAGE_ID\u0000\bIMAGE_ID\bIMAGE_ID\u0000\bIMAGE_ID\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u00004\u0000\u0000\u0000\t\u0000\u0000\u00004\u0000\u0000\u0000\u001B\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\fIMAGE_PACKED\u0000\fIMAGE_PACKED\fIMAGE_PACKED\u0000\fIMAGE_PACKED\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000;\u0000\u0000\u0000\t\u0000\u0000\u0000;\u0000\u0000\u0000=\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000<\u0000\u0000\u0000\t\u0000\u0000\u0000<\u0000\u0000\u0000t\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_DATA\u0000\nIMAGE_DATA\nIMAGE_DATA\u0000\nIMAGE_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000?\u0000\u0000\u0000\t\u0000\u0000\u0000?\u0000\u0000\u0000=\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000_\u0000\u0000\u0000\t\u0000\u0000\u0000_\u0000\u0000\u0000\u0019\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0010IMAGE_BEGIN_DATA\u0000\u0010IMAGE_BEGIN_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000`\u0000\u0000\u0000\t\u0000\u0000\u0000`\u0000\u0000\u0000\u001D\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u000EIMAGE_END_DATA\u0000\u000EIMAGE_END_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000a\u0000\u0000\u0000\t\u0000\u0000\u0000a\u0000\u0000\u0000t\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGE_DATA\u0000\nIMAGE_DATA\nIMAGE_DATA\u0000\nIMAGE_DATA\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000b\u0000\u0000\u0000\t\u0000\u0000\u0000b\u0000\u0000\u0000\u0014\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0000\u0000\bIMAGE_ID\u0000\bIMAGE_ID\bIMAGE_ID\u0000\bIMAGE_ID\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000e\u0000\u0000\u0000\t\u0000\u0000\u0000e\u0000\u0000\u0000+\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\rPREMULTIPLIED\u0000\rPREMULTIPLIED\rPREMULTIPLIED\u0000\rPREMULTIPLIED\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\t\u0000\u0000\u0000h\u0000\u0000\u0000\t\u0000\u0000\u0000h\u0000\u0000\u0000\u0016\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\rPREMULTIPLIED\u0000\rPREMULTIPLIED\rPREMULTIPLIED\u0000\rPREMULTIPLIED\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\u0010Upp::Image (int)\u0016Upp::DrawImg::Get(int)\u0015Upp::Image Get(int i)\u0003Upp\u0003GET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\u0019Upp::Image (const char *)\u001EUpp::DrawImg::Get(const char*)\u001DUpp::Image Get(const char *s)\u0003Upp\u0003GET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get Upp::Image (const Upp::String &)%Upp::DrawImg::Get(const Upp::String&)$Upp::Image Get(const Upp::String& s)\u0003Upp\u0003GET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Find\u0019int (const Upp::String &)&Upp::DrawImg::Find(const Upp::String&)\u001Eint Find(const Upp::String& s)\u0003Upp\u0004FIND\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Find\u0012int (const char *)\u001FUpp::DrawImg::Find(const char*)\u0017int Find(const char *s)\u0003Upp\u0004FIND\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set\u001Evoid (int, const Upp::Image &)(Upp::DrawImg::Set(int,const Upp::Image&)$void Set(int i, const Upp::Image& m)\u0003Upp\u0003SET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set'void (const char *, const Upp::Image &)0Upp::DrawImg::Set(const char*,const Upp::Image&),void Set(const char *s, const Upp::Image& m)\u0003Upp\u0003SET\fUpp::DrawImg\fUPP::DRAWIMG\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fDrawImg__Reg\u0011Upp::DrawImg__Reg\u0011Upp::DrawImg__Reg\fDrawImg__Reg\u0003Upp\fDRAWIMG__REG\u0011Upp::DrawImg__Reg\u0011UPP::DRAWIMG__REG\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fDrawImg__Reg\avoid ()!Upp::DrawImg__Reg::DrawImg__Reg()\u000EDrawImg__Reg()\u0003Upp\fDRAWIMG__REG\u0011Upp::DrawImg__Reg\u0011UPP::DRAWIMG__REG\u0000\u0000\t\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\rDrawImg___Reg\fDrawImg__Reg\u0012Upp::DrawImg___Reg!static DrawImg__Reg DrawImg___Reg\u0003Upp\rDRAWIMG___REG\u0003Upp\u0003UPP\u0000\u0000end\u0000m\u000F\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Font.cpp","value":"dataSõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\tsFontLock\vStaticMutex\u000EUpp::sFontLock\u0015StaticMutex sFontLock\u0003Upp\tSFONTLOCK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000+\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\aReplace\u0018bool (Font, int, Font &)\u001CUpp::Replace(Font,int,Font&)+bool Replace(Font fnt, int chr, Font& rfnt)\u0003Upp\aREPLACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0003Std\rvoid (Font &)\u000FUpp::Std(Font&)\u0014void Std(Font& font)\u0003Upp\u0003STD\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\v\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\vStdFontSize\u0004Size\u0016Upp::Font::StdFontSize\u0010Size StdFontSize\u0003Upp\vSTDFONTSIZE\tUpp::Font\tUPP::FONT\u0000\u0000\t\u0000\u0000\u0000\v\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\bAStdFont\u0004Font\u0013Upp::Font::AStdFont\rFont AStdFont\u0003Upp\bASTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\t\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0001\fs__sF0_19_fn\avoid ()\u0013Upp::s__sF0_19_fn()\u001Astatic void s__sF0_19_fn()\u0003Upp\fS__SF0_19_FN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\t\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0001\ts__sF0_19\rUpp::Callinit\u000EUpp::s__sF0_19cstatic Upp::Callinit s__sF0_19(s__sF0_19_fn, \"C:\\\\Users\\\\sblo\\\\ai-upp\\\\uppsrc\\\\Draw\\\\Font.cpp\", 19)\u0003Upp\tS__SF0_19\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0001\fs__sF0_19_fn\avoid ()\u0013Upp::s__sF0_19_fn()\u001Astatic void s__sF0_19_fn()\u0003Upp\fS__SF0_19_FN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0001\nsListValid\u0004bool\u000FUpp::sListValid\u0016static bool sListValid\u0003Upp\nSLISTVALID\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0012InvalidateFontList\avoid ()\u0019Upp::InvalidateFontList()\u0019void InvalidateFontList()\u0003Upp\u0012INVALIDATEFONTLIST\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\bFaceList\u0014Vector<FaceInfo> &()\u0015Upp::Font::FaceList()\u001CVector<FaceInfo>& FaceList()\u0003Upp\bFACELIST\tUpp::Font\tUPP::FONT\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\nsInitFonts\avoid ()\u0011Upp::sInitFonts()\u0011void sInitFonts()\u0003Upp\nSINITFONTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0001\fs__sF0_46_fn\avoid ()\u0013Upp::s__sF0_46_fn()\u001Astatic void s__sF0_46_fn()\u0003Upp\fS__SF0_46_FN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\t\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0001\ts__sF0_46\rUpp::Callinit\u000EUpp::s__sF0_46cstatic Upp::Callinit s__sF0_46(s__sF0_46_fn, \"C:\\\\Users\\\\sblo\\\\ai-upp\\\\uppsrc\\\\Draw\\\\Font.cpp\", 46)\u0003Upp\tS__SF0_46\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\t\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0001\fs__sF0_46_fn\avoid ()\u0013Upp::s__sF0_46_fn()\u001Astatic void s__sF0_46_fn()\u0003Upp\fS__SF0_46_FN\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\fGetFaceCount\u0006int ()\u0019Upp::Font::GetFaceCount()\u0012int GetFaceCount()\u0003Upp\fGETFACECOUNT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\vGetFaceName\fString (int)\u001BUpp::Font::GetFaceName(int)\u001DString GetFaceName(int index)\u0003Upp\vGETFACENAME\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\vGetFaceInfo\vdword (int)\u001BUpp::Font::GetFaceInfo(int)\u001Cdword GetFaceInfo(int index)\u0003Upp\vGETFACEINFO\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\aSetFace!void (int, const String &, dword)+Upp::Font::SetFace(int,const String&,dword)7void SetFace(int index, const String& name, dword info)\u0003Upp\aSETFACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\aSetFace\u001Avoid (int, const String &)%Upp::Font::SetFace(int,const String&)+void SetFace(int index, const String& name)\u0003Upp\aSETFACE\tUpp::Font\tUPP::FONT\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\nFontFilter\tint (int)\u0014Upp::FontFilter(int)\u0015int FontFilter(int c)\u0003Upp\nFONTFILTER\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0011FindFaceNameIndex\u0014int (const String &)+Upp::Font::FindFaceNameIndex(const String&))int FindFaceNameIndex(const String& name)\u0003Upp\u0011FINDFACENAMEINDEX\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\vSyncStdFont\avoid ()\u0018Upp::Font::SyncStdFont()\u0012void SyncStdFont()\u0003Upp\vSYNCSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\t\u0000\u0000\u0000\a\u0000\u0000\u0000|\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000\u0000\u0000\u0018\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u000EwhenSetStdFont\nvoid (*)()\u0013Upp::whenSetStdFont\u0018void (*whenSetStdFont)()\u0003Upp\u000EWHENSETSTDFONT\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vSetStdFont0\vvoid (Font)\u001CUpp::Font::SetStdFont0(Font)\u001Bvoid SetStdFont0(Font font)\u0003Upp\vSETSTDFONT0\tUpp::Font\tUPP::FONT\u0000\u0000\t\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0011std_font_override\u0004bool\u001CUpp::Font::std_font_override\u0016bool std_font_override\u0003Upp\u0011STD_FONT_OVERRIDE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000ESetDefaultFont\vvoid (Font)\u001FUpp::Font::SetDefaultFont(Font)\u001Evoid SetDefaultFont(Font font)\u0003Upp\u000ESETDEFAULTFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\nSetStdFont\vvoid (Font)\u001BUpp::Font::SetStdFont(Font)\u001Avoid SetStdFont(Font font)\u0003Upp\nSETSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000®\u0000\u0000\u0000\u0001\u0000\u0000\vInitStdFont\avoid ()\u0018Upp::Font::InitStdFont()\u0012void InitStdFont()\u0003Upp\vINITSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000°\u0000\u0000\u0000\u0000\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\nGetStdFont\aFont ()\u0017Upp::Font::GetStdFont()\u0011Font GetStdFont()\u0003Upp\nGETSTDFONT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000¶\u0000\u0000\u0000\u0000\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u000EGetStdFontSize\aSize ()\u001BUpp::Font::GetStdFontSize()\u0015Size GetStdFontSize()\u0003Upp\u000EGETSTDFONTSIZE\tUpp::Font\tUPP::FONT\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\aStdFont\aFont ()\u000EUpp::StdFont()\u000EFont StdFont()\u0003Upp\aSTDFONT\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Á\u0000\u0000\u0000\u0000\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\nRealizeStd\avoid ()\u0017Upp::Font::RealizeStd()\u0011void RealizeStd()\u0003Upp\nREALIZESTD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\tGetHeight\fint () const\u001BUpp::Font::GetHeight()const\u0015int GetHeight() const\u0003Upp\tGETHEIGHT\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\vGetFaceName\u000FString () const\u001DUpp::Font::GetFaceName()const\u001AString GetFaceName() const\u0003Upp\vGETFACENAME\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000×\u0000\u0000\u0000\u0000\u0000\u0000\u0000×\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\vGetFaceInfo\u000Edword () const\u001DUpp::Font::GetFaceInfo()const\u0019dword GetFaceInfo() const\u0003Upp\vGETFACEINFO\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000à\u0000\u0000\u0000\u0001\u0000\u0000\bFaceName\u0016Font &(const String &)\"Upp::Font::FaceName(const String&)\"Font& FaceName(const String& name)\u0003Upp\bFACENAME\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000â\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\tSerialize\u000Fvoid (Stream &)\u001DUpp::Font::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0001\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\fGetTextFlags\u000FString () const\u001EUpp::Font::GetTextFlags()const\u001BString GetTextFlags() const\u0003Upp\fGETTEXTFLAGS\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000%\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u000EParseTextFlags\u0013void (const char *)&Upp::Font::ParseTextFlags(const char*)\"void ParseTextFlags(const char *s)\u0003Upp\u000EPARSETEXTFLAGS\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000@\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0000\u0000\u000EGetFaceNameStd\u000FString () const Upp::Font::GetFaceNameStd()const\u001DString GetFaceNameStd() const\u0003Upp\u000EGETFACENAMESTD\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0001\u0000\u0000\u0001\u0000\u0000\u0000[\u0001\u0000\u0000\u0001\u0000\u0000\aJsonize\u000Fvoid (JsonIO &)\u001BUpp::Font::Jsonize(JsonIO&)\u0019void Jsonize(JsonIO& jio)\u0003Upp\aJSONIZE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000\u0000\u0000]\u0001\u0000\u0000\u0001\u0000\u0000\u0000p\u0001\u0000\u0000\u0001\u0000\u0000\u0006Xmlize\u000Evoid (XmlIO &)\u0019Upp::Font::Xmlize(XmlIO&)\u0017void Xmlize(XmlIO& xio)\u0003Upp\u0006XMLIZE\tUpp::Font\tUPP::FONT\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000s\u0001\u0000\u0000\u0000\u0000\u0000\u0000r\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0001\u0000\u0000\bAsString\u0015String (const Font &)\u001AUpp::AsString(const Font&)5template<> String AsString<class Font>(const Font& f)\u0003Upp\bASSTRING\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tCharEntry\u000EUpp::CharEntry\u000EUpp::CharEntry\tCharEntry\u0003Upp\tCHARENTRY\u000EUpp::CharEntry\u000EUPP::CHARENTRY\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004font\u0005int64\u0014Upp::CharEntry::font\nint64 font\u0003Upp\u0004FONT\u000EUpp::CharEntry\u000EUPP::CHARENTRY\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004info\tGlyphInfo\u0014Upp::CharEntry::info\u000EGlyphInfo info\u0003Upp\u0004INFO\u000EUpp::CharEntry\u000EUPP::CHARENTRY\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0003chr\u0005wchar\u0013Upp::CharEntry::chr\twchar chr\u0003Upp\u0003CHR\u000EUpp::CharEntry\u000EUPP::CHARENTRY\u0000\u0000\t\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000Ffc_cache_global\u0010CharEntry[16384]\u0014Upp::fc_cache_global CharEntry fc_cache_global[16384]\u0003Upp\u000FFC_CACHE_GLOBAL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tGlyphHash\u0012hash_t (Font, int)\u0018Upp::GlyphHash(Font,int)$hash_t GlyphHash(Font font, int chr)\u0003Upp\tGLYPHHASH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\vIsNormal_nc\u0010bool (Font, int)\u001AUpp::IsNormal_nc(Font,int)$bool IsNormal_nc(Font font, int chr)\u0003Upp\vISNORMAL_NC\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000Á\u0001\u0000\u0000\u0001\u0000\u0000\u000EGlyphInfoMaker\u0013Upp::GlyphInfoMaker\u0013Upp::GlyphInfoMaker\u001BGlyphInfoMaker : ValueMaker\u0003Upp\u000EGLYPHINFOMAKER\u0013Upp::GlyphInfoMaker\u0013UPP::GLYPHINFOMAKER\u000FUpp::ValueMaker\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0019Upp::GlyphInfoMaker::font\tFont font\u0003Upp\u0004FONT\u0013Upp::GlyphInfoMaker\u0013UPP::GLYPHINFOMAKER\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0003chr\u0003int\u0018Upp::GlyphInfoMaker::chr\aint chr\u0003Upp\u0003CHR\u0013Upp::GlyphInfoMaker\u0013UPP::GLYPHINFOMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000¢\u0001\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const\u001FUpp::GlyphInfoMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0013Upp::GlyphInfoMaker\u0013UPP::GLYPHINFOMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000£\u0001\u0000\u0000\u0001\u0000\u0000\u0000£\u0001\u0000\u0000\u0002\u0000\u0000\u0000À\u0001\u0000\u0000\u0001\u0001\u0000\u0004Make\u0013int (Value &) const&Upp::GlyphInfoMaker::Make(Value&)const\u001Dint Make(Value& object) const\u0003Upp\u0004MAKE\u0013Upp::GlyphInfoMaker\u0013UPP::GLYPHINFOMAKER\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000Ã\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ã\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0001\u0000\u0000\rGetGlyphEntry\u001DCharEntry (Font, int, hash_t)#Upp::GetGlyphEntry(Font,int,hash_t)8CharEntry GetGlyphEntry(Font font, int chr, hash_t hash)\u0003Upp\rGETGLYPHENTRY\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0017\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0001\u0000\u0000$\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0001\u0000\u0000\bfc_cache\u000ECharEntry[512]\rUpp::fc_cache$thread_local CharEntry fc_cache[512]\u0003Upp\bFC_CACHE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000Î\u0001\u0000\u0000\u0000\u0000\u0000\u0000Î\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ö\u0001\u0000\u0000\u0001\u0000\u0000\fGetGlyphInfo\u0015GlyphInfo (Font, int)\u001BUpp::GetGlyphInfo(Font,int)*GlyphInfo GetGlyphInfo(Font font, int chr)\u0003Upp\fGETGLYPHINFO\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000Ø\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ø\u0001\u0000\u0000\u0001\u0000\u0000\u0000Û\u0001\u0000\u0000\u0001\u0000\u0000\tFontEntry\u000EUpp::FontEntry\u000EUpp::FontEntry\tFontEntry\u0003Upp\tFONTENTRY\u000EUpp::FontEntry\u000EUPP::FONTENTRY\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000Ù\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0001\u0000\u0000\u0014\u0000\u0000\u0000Ù\u0001\u0000\u0000\u0001\u0000\u0000\u0004info\u000ECommonFontInfo\u0014Upp::FontEntry::info\u0013CommonFontInfo info\u0003Upp\u0004INFO\u000EUpp::FontEntry\u000EUPP::FONTENTRY\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0014\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0001\u0000\u0000\u0004font\u0005int64\u0014Upp::FontEntry::font\nint64 font\u0003Upp\u0004FONT\u000EUpp::FontEntry\u000EUPP::FONTENTRY\u0000\u0000\t\u0000\u0000\u0000\u0017\u0000\u0000\u0000Ý\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ý\u0001\u0000\u0000#\u0000\u0000\u0000Ý\u0001\u0000\u0000\u0001\u0000\u0000\bfi_cache\rFontEntry[63]\rUpp::fi_cache#thread_local FontEntry fi_cache[63]\u0003Upp\bFI_CACHE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0016\u0000\u0000\u0000ß\u0001\u0000\u0000\u0000\u0000\u0000\u0000ß\u0001\u0000\u0000\u0001\u0000\u0000\u0000ê\u0001\u0000\u0000\u0001\u0000\u0000\vGetFontInfo\u001Cconst CommonFontInfo &(Font)\u0016Upp::GetFontInfo(Font),const CommonFontInfo& GetFontInfo(Font font)\u0003Upp\vGETFONTINFO\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0013\u0000\u0000\u0000ì\u0001\u0000\u0000\u0000\u0000\u0000\u0000ì\u0001\u0000\u0000'\u0000\u0000\u0000ì\u0001\u0000\u0000\u0001\u0000\u0000\nlastFiFont\u0005int64\u000FUpp::lastFiFont\u001Dthread_local int64 lastFiFont\u0003Upp\nLASTFIFONT\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u001C\u0000\u0000\u0000í\u0001\u0000\u0000\u0000\u0000\u0000\u0000í\u0001\u0000\u0000(\u0000\u0000\u0000í\u0001\u0000\u0000\u0001\u0000\u0000\flastFontInfo\u000ECommonFontInfo\u0011Upp::lastFontInfo(thread_local CommonFontInfo lastFontInfo\u0003Upp\fLASTFONTINFO\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0013\u0000\u0000\u0000î\u0001\u0000\u0000\u0000\u0000\u0000\u0000î\u0001\u0000\u0000(\u0000\u0000\u0000î\u0001\u0000\u0000\u0001\u0000\u0000\vlastStdFont\u0005int64\u0010Upp::lastStdFont\u001Ethread_local int64 lastStdFont\u0003Upp\vLASTSTDFONT\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000ð\u0001\u0000\u0000\u0000\u0000\u0000\u0000ð\u0001\u0000\u0000\u0001\u0000\u0000\u0000û\u0001\u0000\u0000\u0001\u0000\u0000\u0002Fi\u001Econst CommonFontInfo &() const\u0014Upp::Font::Fi()const const CommonFontInfo& Fi() const\u0003Upp\u0002FI\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000ý\u0001\u0000\u0000\u0000\u0000\u0000\u0000ý\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\bIsNormal\u0010bool (int) const\u001DUpp::Font::IsNormal(int)const\u001Bbool IsNormal(int ch) const\u0003Upp\bISNORMAL\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0002\u0000\u0000\u0001\u0000\u0000\nIsComposed\u0010bool (int) const\u001FUpp::Font::IsComposed(int)const\u001Dbool IsComposed(int ch) const\u0003Upp\nISCOMPOSED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\a\u0002\u0000\u0000\u0000\u0000\u0000\u0000\a\u0002\u0000\u0000\u0001\u0000\u0000\u0000\n\u0002\u0000\u0000\u0001\u0000\u0000\nIsReplaced\u0010bool (int) const\u001FUpp::Font::IsReplaced(int)const\u001Dbool IsReplaced(int ch) const\u0003Upp\nISREPLACED\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\f\u0002\u0000\u0000\u0000\u0000\u0000\u0000\f\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0002\u0000\u0000\u0001\u0000\u0000\tIsMissing\u0010bool (int) const\u001EUpp::Font::IsMissing(int)const\u001Cbool IsMissing(int ch) const\u0003Upp\tISMISSING\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0011\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0002\u0000\u0000\u0001\u0000\u0000\aHasChar\u000Fint (int) const\u001CUpp::Font::HasChar(int)const\u0019int HasChar(int ch) const\u0003Upp\aHASCHAR\tUpp::Font\tUPP::FONT\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0016\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0002\u0000\u0000\u0001\u0000\u0000\fGlyphMetrics\u001Dvoid (GlyphInfo &, Font, int)&Upp::GlyphMetrics(GlyphInfo&,Font,int)3void GlyphMetrics(GlyphInfo& f, Font font, int chr)\u0003Upp\fGLYPHMETRICS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000!\u0002\u0000\u0000\u0000\u0000\u0000\u0000!\u0002\u0000\u0000\u0001\u0000\u0000\u00001\u0002\u0000\u0000\u0001\u0000\u0000\u000FGetGlyphMetrics\u0015GlyphInfo (Font, int)\u001EUpp::GetGlyphMetrics(Font,int)-GlyphInfo GetGlyphMetrics(Font font, int chr)\u0003Upp\u000FGETGLYPHMETRICS\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00003\u0002\u0000\u0000\u0000\u0000\u0000\u00003\u0002\u0000\u0000\u0001\u0000\u0000\u00005\u0002\u0000\u0000\u0001\u0000\u0000\bGetWidth\u000Fint (int) const\u001DUpp::Font::GetWidth(int)const\u0019int GetWidth(int c) const\u0003Upp\bGETWIDTH\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00007\u0002\u0000\u0000\u0000\u0000\u0000\u00007\u0002\u0000\u0000\u0001\u0000\u0000\u00009\u0002\u0000\u0000\u0001\u0000\u0000\fGetLeftSpace\u000Fint (int) const!Upp::Font::GetLeftSpace(int)const\u001Dint GetLeftSpace(int c) const\u0003Upp\fGETLEFTSPACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000;\u0002\u0000\u0000\u0000\u0000\u0000\u0000;\u0002\u0000\u0000\u0001\u0000\u0000\u0000=\u0002\u0000\u0000\u0001\u0000\u0000\rGetRightSpace\u000Fint (int) const\"Upp::Font::GetRightSpace(int)const\u001Eint GetRightSpace(int c) const\u0003Upp\rGETRIGHTSPACE\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000?\u0002\u0000\u0000\u0000\u0000\u0000\u0000?\u0002\u0000\u0000\u0001\u0000\u0000\u0000D\u0002\u0000\u0000\u0001\u0000\u0000\aGetData%String (const char *, int, int) const,Upp::Font::GetData(const char*,int,int)constRString GetData(const char *table = 0, int offset = 0, int size = 2147483647) const\u0003Upp\aGETDATA\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000F\u0002\u0000\u0000\u0000\u0000\u0000\u0000F\u0002\u0000\u0000\u0001\u0000\u0000\u0000J\u0002\u0000\u0000\u0001\u0000\u0000\u0006Render5void (FontGlyphConsumer &, double, double, int) const<Upp::Font::Render(FontGlyphConsumer&,double,double,int)constDvoid Render(FontGlyphConsumer& sw, double x, double y, int ch) const\u0003Upp\u0006RENDER\tUpp::Font\tUPP::FONT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000L\u0002\u0000\u0000\u0000\u0000\u0000\u0000L\u0002\u0000\u0000\u0001\u0000\u0000\u0000Q\u0002\u0000\u0000\u0001\u0000\u0000\u0004Info\u0011FontInfo () const\u0016Upp::Font::Info()const\u0015FontInfo Info() const\u0003Upp\u0004INFO\tUpp::Font\tUPP::FONT\u0000\u0000end\u0000\"/\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Fonts.i","value":"data\u0001end\u0000\t\u0000\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp","value":"data.õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000A(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:7:1)FUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:7:1):Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.)\u0004enum\u0003UppA(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\FONTCR.CPP:7:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\aCG_NONEFUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:7:1)\fUpp::CG_NONE\aCG_NONE\u0003Upp\aCG_NONE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\nCG_CAPITALFUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:7:1)\u000FUpp::CG_CAPITAL\nCG_CAPITAL\u0003Upp\nCG_CAPITAL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\t\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\bCG_SMALLFUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:7:1)\rUpp::CG_SMALL\bCG_SMALL\u0003Upp\bCG_SMALL\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000B(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)GUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1):Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.)\u0004enum\u0003UppB(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\FONTCR.CPP:13:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0010\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\bCG_GRAVEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\rUpp::CG_GRAVE\bCG_GRAVE\u0003Upp\bCG_GRAVE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\bCG_ACUTEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\rUpp::CG_ACUTE\bCG_ACUTE\u0003Upp\bCG_ACUTE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\nCG_CEDILLAGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u000FUpp::CG_CEDILLA\nCG_CEDILLA\u0003Upp\nCG_CEDILLA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\tCG_MACRONGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u000EUpp::CG_MACRON\tCG_MACRON\u0003Upp\tCG_MACRON\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\rCG_CIRCUMFLEXGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0012Upp::CG_CIRCUMFLEX\rCG_CIRCUMFLEX\u0003Upp\rCG_CIRCUMFLEX\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\bCG_TILDEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\rUpp::CG_TILDE\bCG_TILDE\u0003Upp\bCG_TILDE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\fCG_DOT_ABOVEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0011Upp::CG_DOT_ABOVE\fCG_DOT_ABOVE\u0003Upp\fCG_DOT_ABOVE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\tCG_OGONEKGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u000EUpp::CG_OGONEK\tCG_OGONEK\u0003Upp\tCG_OGONEK\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\tCG_STROKEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u000EUpp::CG_STROKE\tCG_STROKE\u0003Upp\tCG_STROKE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\bCG_BREVEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\rUpp::CG_BREVE\bCG_BREVE\u0003Upp\bCG_BREVE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\bCG_CARONGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\rUpp::CG_CARON\bCG_CARON\u0003Upp\bCG_CARON\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\rCG_MIDDLE_DOTGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0012Upp::CG_MIDDLE_DOT\rCG_MIDDLE_DOT\u0003Upp\rCG_MIDDLE_DOT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u000FCG_DOUBLE_ACUTEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0014Upp::CG_DOUBLE_ACUTE\u000FCG_DOUBLE_ACUTE\u0003Upp\u000FCG_DOUBLE_ACUTE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\fCG_DIAERESISGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0011Upp::CG_DIAERESIS\fCG_DIAERESIS\u0003Upp\fCG_DIAERESIS\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\rCG_RING_ABOVEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0012Upp::CG_RING_ABOVE\rCG_RING_ABOVE\u0003Upp\rCG_RING_ABOVE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\nCG_COMMA_TGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u000FUpp::CG_COMMA_T\nCG_COMMA_T\u0003Upp\nCG_COMMA_T\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\vCG_COMMA_URGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0010Upp::CG_COMMA_UR\vCG_COMMA_UR\u0003Upp\vCG_COMMA_UR\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\r\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\fCG_COMMA_URIGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCR.cpp:13:1)\u0011Upp::CG_COMMA_URI\fCG_COMMA_URI\u0003Upp\fCG_COMMA_URI\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0006CGInfo\vUpp::CGInfo\vUpp::CGInfo\u0006CGInfo\u0003Upp\u0006CGINFO\vUpp::CGInfo\vUPP::CGINFO\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\v\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0004type\u0004byte\u0011Upp::CGInfo::type\tbyte type\u0003Upp\u0004TYPE\vUpp::CGInfo\vUPP::CGINFO\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\f\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0005ascii\u0004char\u0012Upp::CGInfo::ascii\nchar ascii\u0003Upp\u0005ASCII\vUpp::CGInfo\vUPP::CGINFO\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\v\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0004mark\u0005wchar\u0011Upp::CGInfo::mark\nwchar mark\u0003Upp\u0004MARK\vUpp::CGInfo\vUPP::CGINFO\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\agc_info\u0012struct CGInfo[128]\fUpp::gc_info\u0013CGInfo gc_info[128]\u0003Upp\aGC_INFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000©\u0000\u0000\u0000\u0000\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\aCompose!bool (Font, int, ComposedGlyph &)%Upp::Compose(Font,int,ComposedGlyph&)3bool Compose(Font font, int chr, ComposedGlyph& cg)\u0003Upp\aCOMPOSE\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000ä\u0000\u0000\u0000\u0000\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\u0006sRFace\vUpp::sRFace\vUpp::sRFace\u0006sRFace\u0003Upp\u0006SRFACE\vUpp::sRFace\vUPP::SRFACE\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000\u0011\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\u0004name\fconst char *\u0011Upp::sRFace::name\u0010const char *name\u0003Upp\u0004NAME\vUpp::sRFace\vUPP::SRFACE\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000æ\u0000\u0000\u0000\u0010\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\u0006panose\bbyte[10]\u0013Upp::sRFace::panose\u000Fbyte panose[10]\u0003Upp\u0006PANOSE\vUpp::sRFace\vUPP::SRFACE\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ç\u0000\u0000\u0000\u0012\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\bcoverage\bdword[8]\u0015Upp::sRFace::coverage\u0011dword coverage[8]\u0003Upp\bCOVERAGE\vUpp::sRFace\vUPP::SRFACE\u0000\u0000\t\u0000\u0000\u0000\u0002\u0000\u0000\u0000è\u0000\u0000\u0000\u0000\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\u0011sFontReplacements\u0012struct sRFace[103]\u0016Upp::sFontReplacements\u001AsRFace sFontReplacements[]\u0003Upp\u0011SFONTREPLACEMENTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ì\u0000\u0000\u0000\u0000\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\bReadCmap5bool (const char *, int, Event<int, int, int>, dword)*Upp::ReadCmap(const char*,int,Event,dword)Vbool ReadCmap(const char *ptr, int count, Event<int, int, int> range, dword flags = 0)\u0003Upp\bREADCMAP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00008\u0001\u0000\u0000\u0001\u0000\u0000\bReadCmap(bool (Font, Event<int, int, int>, dword)\u001FUpp::ReadCmap(Font,Event,dword)Ebool ReadCmap(Font font, Event<int, int, int> range, dword flags = 0)\u0003Upp\bREADCMAP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000:\u0001\u0000\u0000\u0000\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0000\u0000\u000FGetPanoseNumber\u0013bool (Font, byte *) Upp::GetPanoseNumber(Font,byte*)-bool GetPanoseNumber(Font font, byte *panose)\u0003Upp\u000FGETPANOSENUMBER\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000D\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0001\u0000\u0000\u0001\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\u0017sFontMetricsReplacement\u001CUpp::sFontMetricsReplacement\u001CUpp::sFontMetricsReplacement\u0017sFontMetricsReplacement\u0003Upp\u0017SFONTMETRICSREPLACEMENT\u001CUpp::sFontMetricsReplacement\u001CUPP::SFONTMETRICSREPLACEMENT\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000E\u0001\u0000\u0000\t\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\u0003src\u0004Font!Upp::sFontMetricsReplacement::src\bFont src\u0003Upp\u0003SRC\u001CUpp::sFontMetricsReplacement\u001CUPP::SFONTMETRICSREPLACEMENT\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000F\u0001\u0000\u0000\t\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u0003dst\u0004Font!Upp::sFontMetricsReplacement::dst\bFont dst\u0003Upp\u0003DST\u001CUpp::sFontMetricsReplacement\u001CUPP::SFONTMETRICSREPLACEMENT\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u0000\n\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\u0004mdst\u0004Font\"Upp::sFontMetricsReplacement::mdst\tFont mdst\u0003Upp\u0004MDST\u001CUpp::sFontMetricsReplacement\u001CUPP::SFONTMETRICSREPLACEMENT\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0001\u0000\u0000\u0001\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u000EPanoseDistance\u0014int (byte *, byte *) Upp::PanoseDistance(byte*,byte*)$int PanoseDistance(byte *a, byte *b)\u0003Upp\u000EPANOSEDISTANCE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000^\u0001\u0000\u0000\u0000\u0000\u0000\u0000^\u0001\u0000\u0000\u0001\u0000\u0000\u0000ë\u0001\u0000\u0000\u0001\u0000\u0000\aReplace\u0018bool (Font, int, Font &)\u001CUpp::Replace(Font,int,Font&)+bool Replace(Font fnt, int chr, Font& rfnt)\u0003Upp\aREPLACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000í\u0001\u0000\u0000\u0000\u0000\u0000\u0000í\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0002\u0000\u0000\u0001\u0000\u0000\u0011GetFontDataSysSys.String (Stream &, int, const char *, int, int)7Upp::GetFontDataSysSys(Stream&,int,const char*,int,int)XString GetFontDataSysSys(Stream& in, int fonti, const char *table, int offset, int size)\u0003Upp\u0011GETFONTDATASYSSYS\u0003Upp\u0003UPP\u0000\u0000end\u0000\u0006\u001D\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontWin32.cpp","value":"data\u0018õ\u0001\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000\u000F\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\u0012\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\u0014\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\tFONTCACHE\u0000\tFONTCACHE\tFONTCACHE\u0000\tFONTCACHE\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\nHFontEntry\u000FUpp::HFontEntry\u000FUpp::HFontEntry\nHFontEntry\u0003Upp\nHFONTENTRY\u000FUpp::HFontEntry\u000FUPP::HFONTENTRY\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\r\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0015Upp::HFontEntry::font\tFont font\u0003Upp\u0004FONT\u000FUpp::HFontEntry\u000FUPP::HFONTENTRY\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0005hfont\u0005HFONT\u0016Upp::HFontEntry::hfont\vHFONT hfont\u0003Upp\u0005HFONT\u000FUpp::HFontEntry\u000FUPP::HFONTENTRY\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0005angle\u0003int\u0016Upp::HFontEntry::angle\tint angle\u0003Upp\u0005ANGLE\u000FUpp::HFontEntry\u000FUPP::HFONTENTRY\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\fGetWin32Font\u0011HFONT (Font, int)\u001BUpp::GetWin32Font(Font,int)'HFONT GetWin32Font(Font fnt, int angle)\u0003Upp\fGETWIN32FONT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0001\u0015Win32_GetGlyphIndices'void (HDC, LPCWSTR, int, LPWORD, DWORD)8Upp::Win32_GetGlyphIndices(HDC,LPCWSTR,int,LPWORD,DWORD)Rstatic void Win32_GetGlyphIndices(HDC hdc, LPCWSTR s, int n, LPWORD r, DWORD flag)\u0003Upp\u0015WIN32_GETGLYPHINDICES\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u000EGetFontInfoSys\u0015CommonFontInfo (Font)\u0019Upp::GetFontInfoSys(Font)(CommonFontInfo GetFontInfoSys(Font font)\u0003Upp\u000EGETFONTINFOSYS\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000$\u0000\u0000\u0000q\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000\u0000\u0000)\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0001\u0005sList\u001DVectorMap<String, FaceInfo> *\nUpp::sList)static VectorMap<String, FaceInfo> *sList\u0003Upp\u0005SLIST\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0014\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\rWin32_AddFace:int (const LOGFONTW *, const TEXTMETRICW *, dword, LPARAM)CUpp::Win32_AddFace(const LOGFONTW*,const TEXTMETRICW*,dword,LPARAM)`static int Win32_AddFace(const LOGFONTW *logfont, const TEXTMETRICW *, dword type, LPARAM param)\u0003Upp\rWIN32_ADDFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u000EWin32_EnumFace\u0017int (HDC, const char *)$Upp::Win32_EnumFace(HDC,const char*)4static int Win32_EnumFace(HDC hdc, const char *face)\u0003Upp\u000EWIN32_ENUMFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0001\u000FWin32_ForceFace&void (HDC, const char *, const char *)1Upp::Win32_ForceFace(HDC,const char*,const char*)Istatic void Win32_ForceFace(HDC hdc, const char *face, const char *aface)\u0003Upp\u000FWIN32_FORCEFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000§\u0000\u0000\u0000\u0000\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\u000EGetAllFacesSys\u0013Vector<FaceInfo> ()\u0015Upp::GetAllFacesSys()!Vector<FaceInfo> GetAllFacesSys()\u0003Upp\u000EGETALLFACESSYS\u0003Upp\u0003UPP\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000¹\u0000\u0000\u0000\b\u0000\u0000\u0000¹\u0000\u0000\u0000\u0019\u0000\u0000\u0000¹\u0000\u0000\u0000\u0000\u0000\u0000\u000EGLYPHINFOCACHE\u0000\u000EGLYPHINFOCACHE\u000EGLYPHINFOCACHE\u0000\u000EGLYPHINFOCACHE\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\n\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0013GetUnicodeGlyphInfo\u0017GlyphInfo (Font, wchar)$Upp::GetUnicodeGlyphInfo(Font,wchar)1GlyphInfo GetUnicodeGlyphInfo(Font fnt, wchar ch)\u0003Upp\u0013GETUNICODEGLYPHINFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\a\u0001\u0000\u0000\u0000\u0000\u0000\u0000\a\u0001\u0000\u0000\u0001\u0000\u0000\u0000Q\u0001\u0000\u0000\u0001\u0000\u0000\u000FGetGlyphInfoSys\u0015GlyphInfo (Font, int)\u001EUpp::GetGlyphInfoSys(Font,int)-GlyphInfo GetGlyphInfoSys(Font font, int chr)\u0003Upp\u000FGETGLYPHINFOSYS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000S\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0001\u0000\u0000\u0001\u0000\u0000\u0000i\u0001\u0000\u0000\u0001\u0000\u0000\u000EGetFontDataSys%String (Font, const char *, int, int)-Upp::GetFontDataSys(Font,const char*,int,int)IString GetFontDataSys(Font font, const char *table, int offset, int size)\u0003Upp\u000EGETFONTDATASYS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000k\u0001\u0000\u0000\u0000\u0000\u0000\u0000k\u0001\u0000\u0000\u0001\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\tfx_to_dbl\u0016double (const FIXED &)\u001CUpp::fx_to_dbl(const FIXED&) double fx_to_dbl(const FIXED& p)\u0003Upp\tFX_TO_DBL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000o\u0001\u0000\u0000\u0000\u0000\u0000\u0000o\u0001\u0000\u0000\u0001\u0000\u0000\u0000q\u0001\u0000\u0000\u0001\u0000\u0000\tfx_to_dbl(Pointf (const Pointf &, const POINTFX &),Upp::fx_to_dbl(const Pointf&,const POINTFX&)4Pointf fx_to_dbl(const Pointf& pp, const POINTFX& p)\u0003Upp\tFX_TO_DBL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000s\u0001\u0000\u0000\u0000\u0000\u0000\u0000s\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000ERenderCharPathFvoid (const char *, unsigned int, FontGlyphConsumer &, double, double)NUpp::RenderCharPath(const char*,unsigned int,FontGlyphConsumer&,double,double)kvoid RenderCharPath(const char *gbuf, unsigned int total_size, FontGlyphConsumer& sw, double xx, double yy)\u0003Upp\u000ERENDERCHARPATH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000±\u0001\u0000\u0000\u0001\u0000\u0000\u0012RenderCharacterSys5void (FontGlyphConsumer &, double, double, int, Font)BUpp::RenderCharacterSys(FontGlyphConsumer&,double,double,int,Font)Tvoid RenderCharacterSys(FontGlyphConsumer& sw, double x, double y, int ch, Font fnt)\u0003Upp\u0012RENDERCHARACTERSYS\u0003Upp\u0003UPP\u0000\u0000end\u0000\u000F\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontFc.cpp","value":"data\u0003õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000end\u0000\u0000\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCoco.mm","value":"data\u0003õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000end\u0000\u0000\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\FontCocoNOMM.cpp","value":"data\u0003õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000end\u0000\u0000\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Draw.cpp","value":"dataõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0013\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u001C\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0001\tsDrawLock\vStaticMutex\u000EUpp::sDrawLock\u001Cstatic StaticMutex sDrawLock\u0003Upp\tSDRAWLOCK\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\t\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0001\ts__sF4_11\rUpp::Callinit\u000EUpp::s__sF4_11cstatic Upp::Callinit s__sF4_11(s__sF4_11_fn, \"C:\\\\Users\\\\sblo\\\\ai-upp\\\\uppsrc\\\\Draw\\\\Draw.cpp\", 11)\u0003Upp\tS__SF4_11\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\t\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0001\fs__sF4_11_fn\avoid ()\u0013Upp::s__sF4_11_fn()\u001Astatic void s__sF4_11_fn()\u0003Upp\fS__SF4_11_FN\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0001\u0000\rGetDefaultInk\u000EColor () const\u001FUpp::Draw::GetDefaultInk()const\u001BColor GetDefaultInk() const\u0003Upp\rGETDEFAULTINK\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0006SinCos\u001Evoid (int, double &, double &)&Upp::Draw::SinCos(int,double&,double&)2void SinCos(int angle, double& sina, double& cosa)\u0003Upp\u0006SINCOS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0019\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0010\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0005~Draw\u0010void () noexcept\u000EUpp::Draw::~()\a~Draw()\u0003Upp\u0005~DRAW\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0010GetPixelsPerInch\rSize () const\"Upp::Draw::GetPixelsPerInch()const\u001DSize GetPixelsPerInch() const\u0003Upp\u0010GETPIXELSPERINCH\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\nGetPageMMs\rSize () const\u001CUpp::Draw::GetPageMMs()const\u0017Size GetPageMMs() const\u0003Upp\nGETPAGEMMS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\nGetNativeX\u000Fint (int) const\u001FUpp::Draw::GetNativeX(int)const\u001Bint GetNativeX(int x) const\u0003Upp\nGETNATIVEX\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\nGetNativeY\u000Fint (int) const\u001FUpp::Draw::GetNativeY(int)const\u001Bint GetNativeY(int y) const\u0003Upp\nGETNATIVEY\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0006Native\u0019void (int &, int &) const!Upp::Draw::Native(int&,int&)const!void Native(int& x, int& y) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0006Native\u0014void (Point &) const\u001EUpp::Draw::Native(Point&)const\u001Bvoid Native(Point& p) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0006Native\u0013void (Size &) const\u001DUpp::Draw::Native(Size&)const\u001Bvoid Native(Size& sz) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0006Native\u0013void (Rect &) const\u001DUpp::Draw::Native(Rect&)const\u001Avoid Native(Rect& r) const\u0003Upp\u0006NATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\tEnterDraw\avoid ()\u0010Upp::EnterDraw()\u0010void EnterDraw()\u0003Upp\tENTERDRAW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\tLeaveDraw\avoid ()\u0010Upp::LeaveDraw()\u0010void LeaveDraw()\u0003Upp\tLEAVEDRAW\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0001\u0000\vGetPageSize\rSize () const\u001DUpp::Draw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0001\u0000\fGetPaintRect\rRect () const\u001EUpp::Draw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000\u0019\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0001\u0000\tStartPage\avoid ()\u0016Upp::Draw::StartPage()\u0010void StartPage()\u0003Upp\tSTARTPAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0000\u0000\u0000\u0017\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0001\u0000\aEndPage\avoid ()\u0014Upp::Draw::EndPage()\u000Evoid EndPage()\u0003Upp\aENDPAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0000w\u0000\u0000\u0000R\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0001\u0000\fGetNativeDpi\rSize () const\u001EUpp::Draw::GetNativeDpi()const\u0019Size GetNativeDpi() const\u0003Upp\fGETNATIVEDPI\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u001B\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0001\u0000\vBeginNative\avoid ()\u0018Upp::Draw::BeginNative()\u0012void BeginNative()\u0003Upp\vBEGINNATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0000y\u0000\u0000\u0000\u0019\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0001\u0000\tEndNative\avoid ()\u0016Upp::Draw::EndNative()\u0010void EndNative()\u0003Upp\tENDNATIVE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000-\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0001\u0000\rGetCloffLevel\fint () const\u001FUpp::Draw::GetCloffLevel()const\u0019int GetCloffLevel() const\u0003Upp\rGETCLOFFLEVEL\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000(\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0001\u0000\u0006Escape\u0015void (const String &) Upp::Draw::Escape(const String&)\u001Fvoid Escape(const String& data)\u0003Upp\u0006ESCAPE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u000ESysDrawImageOp%void (int, int, const Image &, Color)5Upp::Draw::SysDrawImageOp(int,int,const Image&,Color)@void SysDrawImageOp(int x, int y, const Image& img, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u000ESysDrawImageOp3void (int, int, const Image &, const Rect &, Color)AUpp::Draw::SysDrawImageOp(int,int,const Image&,const Rect&,Color)Qvoid SysDrawImageOp(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)FUpp::Draw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000·\u0000\u0000\u0000\u0000\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\bDrawRect\u001Avoid (const Rect &, Color)&Upp::Draw::DrawRect(const Rect&,Color),void DrawRect(const Rect& rect, Color color)\u0003Upp\bDRAWRECT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\bDrawRect void (int, int, int, int, Color)*Upp::Draw::DrawRect(int,int,int,int,Color)8void DrawRect(int x, int y, int cx, int cy, Color color)\u0003Upp\bDRAWRECT\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Á\u0000\u0000\u0000\u0000\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage6void (int, int, int, int, const Image &, const Rect &)>Upp::Draw::DrawImage(int,int,int,int,const Image&,const Rect&)Ovoid DrawImage(int x, int y, int cx, int cy, const Image& img, const Rect& src)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage(void (int, int, int, int, const Image &)2Upp::Draw::DrawImage(int,int,int,int,const Image&)>void DrawImage(int x, int y, int cx, int cy, const Image& img)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage=void (int, int, int, int, const Image &, const Rect &, Color)DUpp::Draw::DrawImage(int,int,int,int,const Image&,const Rect&,Color)\\void DrawImage(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage/void (int, int, int, int, const Image &, Color)8Upp::Draw::DrawImage(int,int,int,int,const Image&,Color)Kvoid DrawImage(int x, int y, int cx, int cy, const Image& img, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000×\u0000\u0000\u0000\u0000\u0000\u0000\u0000×\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage0void (const Rect &, const Image &, const Rect &):Upp::Draw::DrawImage(const Rect&,const Image&,const Rect&)@void DrawImage(const Rect& r, const Image& img, const Rect& src)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage\"void (const Rect &, const Image &).Upp::Draw::DrawImage(const Rect&,const Image&)/void DrawImage(const Rect& r, const Image& img)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage7void (const Rect &, const Image &, const Rect &, Color)@Upp::Draw::DrawImage(const Rect&,const Image&,const Rect&,Color)Mvoid DrawImage(const Rect& r, const Image& img, const Rect& src, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000ç\u0000\u0000\u0000\u0000\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage)void (const Rect &, const Image &, Color)4Upp::Draw::DrawImage(const Rect&,const Image&,Color)<void DrawImage(const Rect& r, const Image& img, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000í\u0000\u0000\u0000\u0000\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage,void (int, int, const Image &, const Rect &)6Upp::Draw::DrawImage(int,int,const Image&,const Rect&)?void DrawImage(int x, int y, const Image& img, const Rect& src)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage\u001Evoid (int, int, const Image &)*Upp::Draw::DrawImage(int,int,const Image&).void DrawImage(int x, int y, const Image& img)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000ù\u0000\u0000\u0000\u0000\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\tDrawImage3void (int, int, const Image &, const Rect &, Color)<Upp::Draw::DrawImage(int,int,const Image&,const Rect&,Color)Lvoid DrawImage(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0000\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\tDrawImage%void (int, int, const Image &, Color)0Upp::Draw::DrawImage(int,int,const Image&,Color);void DrawImage(int x, int y, const Image& img, Color color)\u0003Upp\tDRAWIMAGE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\bDrawData7void (int, int, int, int, const String &, const char *)>Upp::Draw::DrawData(int,int,int,int,const String&,const char*)Qvoid DrawData(int x, int y, int cx, int cy, const String& data, const char *type)\u0003Upp\bDRAWDATA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\v\u0001\u0000\u0000\u0000\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\bDrawData1void (const Rect &, const String &, const char *):Upp::Draw::DrawData(const Rect&,const String&,const char*)Bvoid DrawData(const Rect& r, const String& data, const char *type)\u0003Upp\bDRAWDATA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0001\u0000\u0000\bDrawLine\u001Fvoid (Point, Point, int, Color)*Upp::Draw::DrawLine(Point,Point,int,Color)Lvoid DrawLine(Point p1, Point p2, int width = 0, Color color = DefaultInk())\u0003Upp\bDRAWLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0001\u0000\u0000\bDrawLine%void (int, int, int, int, int, Color).Upp::Draw::DrawLine(int,int,int,int,int,Color)Xvoid DrawLine(int x1, int y1, int x2, int y2, int width = 0, Color color = DefaultInk())\u0003Upp\bDRAWLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000\u0010DrawPolyPolyline>void (const Point *, int, const int *, int, int, Color, Color)LUpp::Draw::DrawPolyPolyline(const Point*,int,const int*,int,int,Color,Color)ÿ¡\u0000\u0000\u0000void DrawPolyPolyline(const Point *vertices, int vertex_count, const int *counts, int count_count, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\u0010DRAWPOLYPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\"\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u0010DrawPolyPolylineDvoid (const Vector<Point> &, const Vector<int> &, int, Color, Color)HUpp::Draw::DrawPolyPolyline(const Vector&,const Vector&,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolyline(const Vector<Point>& vertices, const Vector<int>& counts, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\u0010DRAWPOLYPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000*\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000\fDrawPolyline,void (const Point *, int, int, Color, Color)9Upp::Draw::DrawPolyline(const Point*,int,int,Color,Color)rvoid DrawPolyline(const Point *vertices, int count, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\fDRAWPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00000\u0001\u0000\u0000\u0000\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\fDrawPolyline/void (const Vector<Point> &, int, Color, Color)6Upp::Draw::DrawPolyline(const Vector&,int,Color,Color)ovoid DrawPolyline(const Vector<Point>& vertices, int width = 0, Color color = DefaultInk(), Color doxor = Null)\u0003Upp\fDRAWPOLYLINE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u00006\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0001\u0000\u0000\u0001\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\u0013DrawPolyPolyPolygon_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)kUpp::Draw::DrawPolyPolyPolygon(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿ*\u0001\u0000\u0000void DrawPolyPolyPolygon(const Point *vertices, int vertex_count, const int *subpolygon_counts, int subpolygon_count_count, const int *disjunct_polygon_counts, int disjunct_polygon_count_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u0013DRAWPOLYPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0000\u0000\u0000A\u0001\u0000\u0000\u0001\u0000\u0000\u0000K\u0001\u0000\u0000\u0001\u0000\u0000\u0013DrawPolyPolyPolygonhvoid (const Vector<Point> &, const Vector<int> &, const Vector<int> &, Color, int, Color, uint64, Color)fUpp::Draw::DrawPolyPolyPolygon(const Vector&,const Vector&,const Vector&,Color,int,Color,uint64,Color)ÿò\u0000\u0000\u0000void DrawPolyPolyPolygon(const Vector<Point>& vertices, const Vector<int>& subpolygon_counts, const Vector<int>& disjunct_polygon_counts, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u0013DRAWPOLYPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0001\u0000\u0000\u0000T\u0001\u0000\u0000\u0001\u0000\u0000\u000FDrawPolyPolygonMvoid (const Point *, int, const int *, int, Color, int, Color, uint64, Color)XUpp::Draw::DrawPolyPolygon(const Point*,int,const int*,int,Color,int,Color,uint64,Color)ÿà\u0000\u0000\u0000void DrawPolyPolygon(const Point *vertices, int vertex_count, const int *subpolygon_counts, int subpolygon_count_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u000FDRAWPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000V\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0001\u0000\u0000\u0001\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u000FDrawPolyPolygonSvoid (const Vector<Point> &, const Vector<int> &, Color, int, Color, uint64, Color)TUpp::Draw::DrawPolyPolygon(const Vector&,const Vector&,Color,int,Color,uint64,Color)ÿÂ\u0000\u0000\u0000void DrawPolyPolygon(const Vector<Point>& vertices, const Vector<int>& subpolygon_counts, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\u000FDRAWPOLYPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000^\u0001\u0000\u0000\u0000\u0000\u0000\u0000^\u0001\u0000\u0000\u0001\u0000\u0000\u0000f\u0001\u0000\u0000\u0001\u0000\u0000\fDrawPolygonsMvoid (const Point *, int, const int *, int, Color, int, Color, uint64, Color)UUpp::Draw::DrawPolygons(const Point*,int,const int*,int,Color,int,Color,uint64,Color)ÿ×\u0000\u0000\u0000void DrawPolygons(const Point *vertices, int vertex_count, const int *polygon_counts, int polygon_count_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\fDRAWPOLYGONS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000h\u0001\u0000\u0000\u0000\u0000\u0000\u0000h\u0001\u0000\u0000\u0001\u0000\u0000\u0000n\u0001\u0000\u0000\u0001\u0000\u0000\fDrawPolygonsSvoid (const Vector<Point> &, const Vector<int> &, Color, int, Color, uint64, Color)QUpp::Draw::DrawPolygons(const Vector&,const Vector&,Color,int,Color,uint64,Color)ÿ¼\u0000\u0000\u0000void DrawPolygons(const Vector<Point>& vertices, const Vector<int>& polygon_counts, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\fDRAWPOLYGONS\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000p\u0001\u0000\u0000\u0000\u0000\u0000\u0000p\u0001\u0000\u0000\u0001\u0000\u0000\u0000u\u0001\u0000\u0000\u0001\u0000\u0000\vDrawPolygon;void (const Point *, int, Color, int, Color, uint64, Color)EUpp::Draw::DrawPolygon(const Point*,int,Color,int,Color,uint64,Color)ÿ¢\u0000\u0000\u0000void DrawPolygon(const Point *vertices, int vertex_count, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\vDRAWPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000w\u0001\u0000\u0000\u0000\u0000\u0000\u0000w\u0001\u0000\u0000\u0001\u0000\u0000\u0000{\u0001\u0000\u0000\u0001\u0000\u0000\vDrawPolygon>void (const Vector<Point> &, Color, int, Color, uint64, Color)BUpp::Draw::DrawPolygon(const Vector&,Color,int,Color,uint64,Color)ÿ\u0000\u0000\u0000void DrawPolygon(const Vector<Point>& vertices, Color color = DefaultInk(), int width = 0, Color outline = Null, uint64 pattern = 0, Color doxor = Null)\u0003Upp\vDRAWPOLYGON\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000\u0000}\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\vDrawEllipse,void (int, int, int, int, Color, int, Color)7Upp::Draw::DrawEllipse(int,int,int,int,Color,int,Color)yvoid DrawEllipse(int x, int y, int cx, int cy, Color color = DefaultInk(), int pen = Null, Color pencolor = DefaultInk())\u0003Upp\vDRAWELLIPSE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\vDrawEllipse&void (const Rect &, Color, int, Color)3Upp::Draw::DrawEllipse(const Rect&,Color,int,Color)jvoid DrawEllipse(const Rect& r, Color color = DefaultInk(), int pen = Null, Color pencolor = DefaultInk())\u0003Upp\vDRAWELLIPSE\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aDrawArc-void (const Rect &, Point, Point, int, Color)5Upp::Draw::DrawArc(const Rect&,Point,Point,int,Color)_void DrawArc(const Rect& rc, Point start, Point end, int width = 0, Color color = DefaultInk())\u0003Upp\aDRAWARC\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0006Offset\u000Fvoid (int, int)\u001AUpp::Draw::Offset(int,int)\u0019void Offset(int x, int y)\u0003Upp\u0006OFFSET\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004Clip\u0019bool (int, int, int, int) Upp::Draw::Clip(int,int,int,int)'bool Clip(int x, int y, int cx, int cy)\u0003Upp\u0004CLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aClipoff\u0019bool (int, int, int, int)#Upp::Draw::Clipoff(int,int,int,int)*bool Clipoff(int x, int y, int cx, int cy)\u0003Upp\aCLIPOFF\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\vExcludeClip\u0019bool (int, int, int, int)'Upp::Draw::ExcludeClip(int,int,int,int).bool ExcludeClip(int x, int y, int cx, int cy)\u0003Upp\vEXCLUDECLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000 \u0001\u0000\u0000\u0000\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000\u0000£\u0001\u0000\u0000\u0001\u0000\u0000\rIntersectClip\u0019bool (int, int, int, int))Upp::Draw::IntersectClip(int,int,int,int)0bool IntersectClip(int x, int y, int cx, int cy)\u0003Upp\rINTERSECTCLIP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000¥\u0001\u0000\u0000\u0000\u0000\u0000\u0000¥\u0001\u0000\u0000\u0001\u0000\u0000\u0000¨\u0001\u0000\u0000\u0001\u0000\u0000\nIsPainting\u001Fbool (int, int, int, int) const+Upp::Draw::IsPainting(int,int,int,int)const3bool IsPainting(int x, int y, int cx, int cy) const\u0003Upp\nISPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\t\u0000\u0000\u0000\u000F\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0000\u0000\u0000ª\u0001\u0000\u0000X\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0001\u0005sIgfn;void (*)(ImageBuffer &, const Painting &, Size, Point, int)\nUpp::sIgfnEstatic void (*sIgfn)(ImageBuffer&, const Painting&, Size, Point, int)\u0003Upp\u0005SIGFN\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000#\u0000\u0000\u0000ª\u0001\u0000\u0000\u0016\u0000\u0000\u0000ª\u0001\u0000\u0000%\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0002ib\rImageBuffer &\u0002ib\u000FImageBuffer& ib\u0000\u0002IB\u0000\u0000\u0000\u0000\n\u0000\u0000\u00007\u0000\u0000\u0000ª\u0001\u0000\u0000'\u0000\u0000\u0000ª\u0001\u0000\u00009\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0002pw\u0010const Painting &\u0002pw\u0012const Painting& pw\u0000\u0002PW\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000@\u0000\u0000\u0000ª\u0001\u0000\u0000;\u0000\u0000\u0000ª\u0001\u0000\u0000B\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0002sz\u0004Size\u0002sz\aSize sz\u0000\u0002SZ\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000J\u0000\u0000\u0000ª\u0001\u0000\u0000D\u0000\u0000\u0000ª\u0001\u0000\u0000M\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0003pos\u0005Point\u0003pos\tPoint pos\u0000\u0003POS\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000S\u0000\u0000\u0000ª\u0001\u0000\u0000O\u0000\u0000\u0000ª\u0001\u0000\u0000W\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0004mode\u0003int\u0004mode\bint mode\u0000\u0004MODE\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u000F\u0000\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000«\u0001\u0000\u0000B\u0000\u0000\u0000«\u0001\u0000\u0000\u0001\u0000\u0001\u0005sIwfn-void (*)(ImageBuffer &, const Drawing &, int)\nUpp::sIwfn7static void (*sIwfn)(ImageBuffer&, const Drawing&, int)\u0003Upp\u0005SIWFN\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000#\u0000\u0000\u0000«\u0001\u0000\u0000\u0016\u0000\u0000\u0000«\u0001\u0000\u0000%\u0000\u0000\u0000«\u0001\u0000\u0000\u0001\u0000\u0000\u0002ib\rImageBuffer &\u0002ib\u000FImageBuffer& ib\u0000\u0002IB\u0000\u0000\u0000\u0000\n\u0000\u0000\u00006\u0000\u0000\u0000«\u0001\u0000\u0000'\u0000\u0000\u0000«\u0001\u0000\u00007\u0000\u0000\u0000«\u0001\u0000\u0000\u0001\u0000\u0000\u0001p\u000Fconst Drawing &\u0001p\u0010const Drawing& p\u0000\u0001P\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000=\u0000\u0000\u0000«\u0001\u0000\u00009\u0000\u0000\u0000«\u0001\u0000\u0000A\u0000\u0000\u0000«\u0001\u0000\u0000\u0001\u0000\u0000\u0004mode\u0003int\u0004mode\bint mode\u0000\u0004MODE\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u000F\u0000\u0000\u0000¬\u0001\u0000\u0000\u0000\u0000\u0000\u0000¬\u0001\u0000\u0000Q\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0001\u0003sRG-Image (*)(Point, int, int, Font, Color, Size)\bUpp::sRG7static Image (*sRG)(Point, int, int, Font, Color, Size)\u0003Upp\u0003SRG\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000\u001A\u0000\u0000\u0000¬\u0001\u0000\u0000\u0014\u0000\u0000\u0000¬\u0001\u0000\u0000\u001C\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0002at\u0005Point\u0002at\bPoint at\u0000\u0002AT\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\"\u0000\u0000\u0000¬\u0001\u0000\u0000\u001E\u0000\u0000\u0000¬\u0001\u0000\u0000'\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0005angle\u0003int\u0005angle\tint angle\u0000\u0005ANGLE\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000-\u0000\u0000\u0000¬\u0001\u0000\u0000)\u0000\u0000\u0000¬\u0001\u0000\u00000\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0003chr\u0003int\u0003chr\aint chr\u0000\u0003CHR\u0000\u0000\u0000\u0000\n\u0000\u0000\u00007\u0000\u0000\u0000¬\u0001\u0000\u00002\u0000\u0000\u0000¬\u0001\u0000\u0000:\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0003fnt\u0004Font\u0003fnt\bFont fnt\u0000\u0003FNT\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000B\u0000\u0000\u0000¬\u0001\u0000\u0000<\u0000\u0000\u0000¬\u0001\u0000\u0000G\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0005color\u0005Color\u0005color\vColor color\u0000\u0005COLOR\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000N\u0000\u0000\u0000¬\u0001\u0000\u0000I\u0000\u0000\u0000¬\u0001\u0000\u0000P\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0002sz\u0004Size\u0002sz\aSize sz\u0000\u0002SZ\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000®\u0001\u0000\u0000\u0000\u0000\u0000\u0000®\u0001\u0000\u0000\u0001\u0000\u0000\u0000µ\u0001\u0000\u0000\u0001\u0000\u0000\u0015RegisterPaintingFns__ÿ \u0000\u0000\u0000void (void (*)(ImageBuffer &, const Painting &, Size, Point, int), void (*)(ImageBuffer &, const Drawing &, int), Image (*)(Point, int, int, Font, Color, Size))ÿ¡\u0000\u0000\u0000Upp::RegisterPaintingFns__(void(*)(ImageBuffer&,const Painting&,Size,Point,int),void(*)(ImageBuffer&,const Drawing&,int),Image(*)(Point,int,int,Font,Color,Size))ÿ·\u0000\u0000\u0000void RegisterPaintingFns__(void (*ig)(ImageBuffer&, const Painting&, Size, Point, int), void (*iw)(ImageBuffer&, const Drawing&, int), Image (*rg)(Point, int, int, Font, Color, Size))\u0003Upp\u0015REGISTERPAINTINGFNS__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000·\u0001\u0000\u0000\u0000\u0000\u0000\u0000·\u0001\u0000\u0000\u0001\u0000\u0000\u0000º\u0001\u0000\u0000\u0001\u0000\u0000\nHasPainter\abool ()\u0011Upp::HasPainter()\u0011bool HasPainter()\u0003Upp\nHASPAINTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000¼\u0001\u0000\u0000\u0000\u0000\u0000\u0000¼\u0001\u0000\u0000\u0001\u0000\u0000\u0000¿\u0001\u0000\u0000\u0001\u0000\u0000\u0014RenderGlyphByPainter*Image (Point, int, int, Font, Color, Size)8Upp::RenderGlyphByPainter(Point,int,int,Font,Color,Size)XImage RenderGlyphByPainter(Point at, int angle, int chr, Font fnt, Color color, Size sz)\u0003Upp\u0014RENDERGLYPHBYPAINTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Á\u0001\u0000\u0000\u0000\u0000\u0000\u0000Á\u0001\u0000\u0000\u0001\u0000\u0000\u0000Å\u0001\u0000\u0000\u0001\u0000\u0000\u0010PaintImageBuffer8void (ImageBuffer &, const Painting &, Size, Point, int)BUpp::PaintImageBuffer(ImageBuffer&,const Painting&,Size,Point,int)jvoid PaintImageBuffer(ImageBuffer& ib, const Painting& p, Size sz, Point pos, int mode = MODE_ANTIALIASED)\u0003Upp\u0010PAINTIMAGEBUFFER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0001\u0000\u0000\u0010PaintImageBuffer+void (ImageBuffer &, const Painting &, int)7Upp::PaintImageBuffer(ImageBuffer&,const Painting&,int)Vvoid PaintImageBuffer(ImageBuffer& ib, const Painting& p, int mode = MODE_ANTIALIASED)\u0003Upp\u0010PAINTIMAGEBUFFER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0001\u0000\u0000\u0001\u0000\u0000\u0010PaintImageBuffer*void (ImageBuffer &, const Drawing &, int)6Upp::PaintImageBuffer(ImageBuffer&,const Drawing&,int)Vvoid PaintImageBuffer(ImageBuffer& ib, const Drawing& iw, int mode = MODE_ANTIALIASED)\u0003Upp\u0010PAINTIMAGEBUFFER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000Ò\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ò\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0001\u0000\u0000\u0001\u0000\u0000\tAsDrawing\u001ADrawing (const Painting &)\u001FUpp::AsDrawing(const Painting&)%Drawing AsDrawing(const Painting& pw)\u0003Upp\tASDRAWING\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0001\u0000\u0000\u0000ð\u0001\u0000\u0000\u0001\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)6Upp::Draw::DrawPaintingOp(const Rect&,const Painting&);void DrawPaintingOp(const Rect& target, const Painting& pw)\u0003Upp\u000EDRAWPAINTINGOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000ò\u0001\u0000\u0000\u0000\u0000\u0000\u0000ò\u0001\u0000\u0000\u0001\u0000\u0000\u0000õ\u0001\u0000\u0000\u0001\u0000\u0000\fDrawPainting+void (int, int, int, int, const Painting &)8Upp::Draw::DrawPainting(int,int,int,int,const Painting&)Cvoid DrawPainting(int x, int y, int cx, int cy, const Painting& ig)\u0003Upp\fDRAWPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000÷\u0001\u0000\u0000\u0000\u0000\u0000\u0000÷\u0001\u0000\u0000\u0001\u0000\u0000\u0000û\u0001\u0000\u0000\u0001\u0000\u0000\fDrawPainting!void (int, int, const Painting &)0Upp::Draw::DrawPainting(int,int,const Painting&)3void DrawPainting(int x, int y, const Painting& iw)\u0003Upp\fDRAWPAINTING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000ÿ\u0001\u0000\u0000\u0000\u0000\u0000\u0000ÿ\u0001\u0000\u0000/\u0000\u0000\u0000ÿ\u0001\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000Edword () const\u001CUpp::NilDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u00008\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\vGetPageSize\rSize () const Upp::NilDraw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u0017Upp::NilDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u0015Upp::NilDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0002\u0000\u0000\"\u0000\u0000\u0000\u0003\u0002\u0000\u0000\u0001\u0001\u0000\bOffsetOp\fvoid (Point)\u001DUpp::NilDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0004\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0002\u0000\u00005\u0000\u0000\u0000\u0004\u0002\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)!Upp::NilDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0005\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0002\u0000\u00008\u0000\u0000\u0000\u0005\u0002\u0000\u0000\u0001\u0001\u0000\tClipoffOp\u0013bool (const Rect &)$Upp::NilDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0006\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0002\u0000\u0000<\u0000\u0000\u0000\u0006\u0002\u0000\u0000\u0001\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)(Upp::NilDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\a\u0002\u0000\u0000\u0000\u0000\u0000\u0000\a\u0002\u0000\u0000>\u0000\u0000\u0000\a\u0002\u0000\u0000\u0001\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)*Upp::NilDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\b\u0002\u0000\u0000\u0000\u0000\u0000\u0000\b\u0002\u0000\u0000A\u0000\u0000\u0000\b\u0002\u0000\u0000\u0001\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const,Upp::NilDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\t\u0002\u0000\u0000\u0000\u0000\u0000\u0000\t\u0002\u0000\u0000?\u0000\u0000\u0000\t\u0002\u0000\u0000\u0001\u0001\u0000\fGetPaintRect\rRect () const!Upp::NilDraw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0002\u0000\u0000\u0000\u0000\u0000\u0000\n\u0002\u0000\u0000F\u0000\u0000\u0000\n\u0002\u0000\u0000\u0001\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)/Upp::NilDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\v\u0002\u0000\u0000\u0000\u0000\u0000\u0000\v\u0002\u0000\u0000j\u0000\u0000\u0000\v\u0002\u0000\u0000\u0001\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)IUpp::NilDraw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\f\u0002\u0000\u0000\u0000\u0000\u0000\u0000\f\u0002\u0000\u0000]\u0000\u0000\u0000\f\u0002\u0000\u0000\u0001\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)CUpp::NilDraw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0002\u0000\u0000\u0000\u0000\u0000\u0000\r\u0002\u0000\u0000S\u0000\u0000\u0000\r\u0002\u0000\u0000\u0001\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)3Upp::NilDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000E\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0002\u0000\u0000\u0000\u0000\u0000\u000E\u0002\u0000\u0000\u0001\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)QUpp::NilDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000F\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0002\u0000\u0000è\u0000\u0000\u0000\u000F\u0002\u0000\u0000\u0001\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)pUpp::NilDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0002\u0000\u0000Z\u0000\u0000\u0000\u0010\u0002\u0000\u0000\u0001\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color):Upp::NilDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0011\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0002\u0000\u0000S\u0000\u0000\u0000\u0011\u0002\u0000\u0000\u0001\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)8Upp::NilDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0012\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0002\u0000\u0000s\u0000\u0000\u0000\u0012\u0002\u0000\u0000\u0001\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)LUpp::NilDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0013\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0002\u0000\u0000D\u0000\u0000\u0000\u0013\u0002\u0000\u0000\u0001\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)7Upp::NilDraw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0014\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0002\u0000\u0000F\u0000\u0000\u0000\u0014\u0002\u0000\u0000\u0001\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)9Upp::NilDraw::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\fUpp::NilDraw\fUPP::NILDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0016\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0002\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000Edword () const\u001EUpp::DrawProxy::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001B\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0002\u0000\u0000\u0001\u0001\u0000\vGetPageSize\rSize () const\"Upp::DrawProxy::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000 \u0002\u0000\u0000\u0000\u0000\u0000\u0000 \u0002\u0000\u0000\u0001\u0000\u0000\u0000#\u0002\u0000\u0000\u0001\u0001\u0000\tStartPage\avoid ()\u001BUpp::DrawProxy::StartPage()\u0010void StartPage()\u0003Upp\tSTARTPAGE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000%\u0002\u0000\u0000\u0000\u0000\u0000\u0000%\u0002\u0000\u0000\u0001\u0000\u0000\u0000(\u0002\u0000\u0000\u0001\u0001\u0000\aEndPage\avoid ()\u0019Upp::DrawProxy::EndPage()\u000Evoid EndPage()\u0003Upp\aENDPAGE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000*\u0002\u0000\u0000\u0000\u0000\u0000\u0000*\u0002\u0000\u0000\u0001\u0000\u0000\u0000-\u0002\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u0019Upp::DrawProxy::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000/\u0002\u0000\u0000\u0000\u0000\u0000\u0000/\u0002\u0000\u0000\u0001\u0000\u0000\u00002\u0002\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u0017Upp::DrawProxy::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00004\u0002\u0000\u0000\u0000\u0000\u0000\u00004\u0002\u0000\u0000\u0001\u0000\u0000\u00007\u0002\u0000\u0000\u0001\u0001\u0000\bOffsetOp\fvoid (Point)\u001FUpp::DrawProxy::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00009\u0002\u0000\u0000\u0000\u0000\u0000\u00009\u0002\u0000\u0000\u0001\u0000\u0000\u0000<\u0002\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)#Upp::DrawProxy::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000>\u0002\u0000\u0000\u0000\u0000\u0000\u0000>\u0002\u0000\u0000\u0001\u0000\u0000\u0000A\u0002\u0000\u0000\u0001\u0001\u0000\tClipoffOp\u0013bool (const Rect &)&Upp::DrawProxy::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000C\u0002\u0000\u0000\u0000\u0000\u0000\u0000C\u0002\u0000\u0000\u0001\u0000\u0000\u0000F\u0002\u0000\u0000\u0001\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)*Upp::DrawProxy::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000H\u0002\u0000\u0000\u0000\u0000\u0000\u0000H\u0002\u0000\u0000\u0001\u0000\u0000\u0000K\u0002\u0000\u0000\u0001\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &),Upp::DrawProxy::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000M\u0002\u0000\u0000\u0000\u0000\u0000\u0000M\u0002\u0000\u0000\u0001\u0000\u0000\u0000P\u0002\u0000\u0000\u0001\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const.Upp::DrawProxy::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000R\u0002\u0000\u0000\u0000\u0000\u0000\u0000R\u0002\u0000\u0000\u0001\u0000\u0000\u0000U\u0002\u0000\u0000\u0001\u0001\u0000\fGetPaintRect\rRect () const#Upp::DrawProxy::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000W\u0002\u0000\u0000\u0000\u0000\u0000\u0000W\u0002\u0000\u0000\u0001\u0000\u0000\u0000Z\u0002\u0000\u0000\u0001\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)1Upp::DrawProxy::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\\\u0002\u0000\u0000\u0000\u0000\u0000\u0000\\\u0002\u0000\u0000\u0001\u0000\u0000\u0000_\u0002\u0000\u0000\u0001\u0001\u0000\u000ESysDrawImageOp%void (int, int, const Image &, Color):Upp::DrawProxy::SysDrawImageOp(int,int,const Image&,Color)@void SysDrawImageOp(int x, int y, const Image& img, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000a\u0002\u0000\u0000\u0000\u0000\u0000\u0000a\u0002\u0000\u0000\u0001\u0000\u0000\u0000d\u0002\u0000\u0000\u0001\u0001\u0000\u000ESysDrawImageOp3void (int, int, const Image &, const Rect &, Color)FUpp::DrawProxy::SysDrawImageOp(int,int,const Image&,const Rect&,Color)Qvoid SysDrawImageOp(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000f\u0002\u0000\u0000\u0000\u0000\u0000\u0000f\u0002\u0000\u0000\u0001\u0000\u0000\u0000i\u0002\u0000\u0000\u0001\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)KUpp::DrawProxy::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000k\u0002\u0000\u0000\u0000\u0000\u0000\u0000k\u0002\u0000\u0000\u0001\u0000\u0000\u0000n\u0002\u0000\u0000\u0001\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)EUpp::DrawProxy::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000p\u0002\u0000\u0000\u0000\u0000\u0000\u0000p\u0002\u0000\u0000\u0001\u0000\u0000\u0000s\u0002\u0000\u0000\u0001\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)5Upp::DrawProxy::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000u\u0002\u0000\u0000\u0000\u0000\u0000\u0000u\u0002\u0000\u0000\u0001\u0000\u0000\u0000y\u0002\u0000\u0000\u0001\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)SUpp::DrawProxy::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000{\u0002\u0000\u0000\u0000\u0000\u0000\u0000{\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)rUpp::DrawProxy::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)<Upp::DrawProxy::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color):Upp::DrawProxy::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)NUpp::DrawProxy::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)9Upp::DrawProxy::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &);Upp::DrawProxy::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\fGetNativeDpi\rSize () const#Upp::DrawProxy::GetNativeDpi()const\u0019Size GetNativeDpi() const\u0003Upp\fGETNATIVEDPI\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¡\u0002\u0000\u0000\u0000\u0000\u0000\u0000¡\u0002\u0000\u0000\u0001\u0000\u0000\u0000¤\u0002\u0000\u0000\u0001\u0001\u0000\vBeginNative\avoid ()\u001DUpp::DrawProxy::BeginNative()\u0012void BeginNative()\u0003Upp\vBEGINNATIVE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¦\u0002\u0000\u0000\u0000\u0000\u0000\u0000¦\u0002\u0000\u0000\u0001\u0000\u0000\u0000©\u0002\u0000\u0000\u0001\u0001\u0000\tEndNative\avoid ()\u001BUpp::DrawProxy::EndNative()\u0010void EndNative()\u0003Upp\tENDNATIVE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000«\u0002\u0000\u0000\u0001\u0000\u0000\u0000®\u0002\u0000\u0000\u0001\u0001\u0000\rGetCloffLevel\fint () const$Upp::DrawProxy::GetCloffLevel()const\u0019int GetCloffLevel() const\u0003Upp\rGETCLOFFLEVEL\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000°\u0002\u0000\u0000\u0000\u0000\u0000\u0000°\u0002\u0000\u0000\u0001\u0000\u0000\u0000³\u0002\u0000\u0000\u0001\u0001\u0000\u0006Escape\u0015void (const String &)%Upp::DrawProxy::Escape(const String&)\u001Fvoid Escape(const String& data)\u0003Upp\u0006ESCAPE\u000EUpp::DrawProxy\u000EUPP::DRAWPROXY\u0000\u0000end\u0000Ø}\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DrawText.cpp","value":"data\u0013õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\vTextUnicode'WString (const char *, int, byte, Font)+Upp::TextUnicode(const char*,int,byte,Font)=WString TextUnicode(const char *s, int n, byte cs, Font font)\u0003Upp\vTEXTUNICODE\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextABvoid (int, int, int, const wchar *, Font, Color, int, const int *)HUpp::Draw::DrawTextA(int,int,int,const wchar*,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const wchar *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextA=void (int, int, const wchar *, Font, Color, int, const int *)DUpp::Draw::DrawTextA(int,int,const wchar*,Font,Color,int,const int*)ÿ\u007F\u0000\u0000\u0000void DrawTextA(int x, int y, const wchar *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¢\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextA?void (int, int, int, const WString &, Font, Color, const int *)FUpp::Draw::DrawTextA(int,int,int,const WString&,Font,Color,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const WString& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000¤\u0000\u0000\u0000\u0000\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextA:void (int, int, const WString &, Font, Color, const int *)BUpp::Draw::DrawTextA(int,int,const WString&,Font,Color,const int*)uvoid DrawTextA(int x, int y, const WString& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextAGvoid (int, int, int, const char *, byte, Font, Color, int, const int *)LUpp::Draw::DrawTextA(int,int,int,const char*,byte,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const char *text, byte charset, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextABvoid (int, int, const char *, byte, Font, Color, int, const int *)HUpp::Draw::DrawTextA(int,int,const char*,byte,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, const char *text, byte charset, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000¹\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextAAvoid (int, int, int, const char *, Font, Color, int, const int *)GUpp::Draw::DrawTextA(int,int,int,const char*,Font,Color,int,const int*)ÿ\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const char *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextA<void (int, int, const char *, Font, Color, int, const int *)CUpp::Draw::DrawTextA(int,int,const char*,Font,Color,int,const int*)~void DrawTextA(int x, int y, const char *text, Font font = StdFont(), Color ink = DefaultInk(), int n = -1, const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextA>void (int, int, int, const String &, Font, Color, const int *)EUpp::Draw::DrawTextA(int,int,int,const String&,Font,Color,const int*)ÿ\u007F\u0000\u0000\u0000void DrawTextA(int x, int y, int angle, const String& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Í\u0000\u0000\u0000\u0000\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\tDrawTextA9void (int, int, const String &, Font, Color, const int *)AUpp::Draw::DrawTextA(int,int,const String&,Font,Color,const int*)tvoid DrawTextA(int x, int y, const String& text, Font font = StdFont(), Color ink = DefaultInk(), const int *dx = 0)\u0003Upp\tDRAWTEXTA\tUpp::Draw\tUPP::DRAW\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\vGetTextSize\u001FSize (const wchar *, Font, int)'Upp::GetTextSize(const wchar*,Font,int):Size GetTextSize(const wchar *text, Font font, int n = -1)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ç\u0000\u0000\u0000\u0000\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\vGetTextSize\u001CSize (const WString &, Font)%Upp::GetTextSize(const WString&,Font)0Size GetTextSize(const WString& text, Font font)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ì\u0000\u0000\u0000\u0000\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0000\u0000\vGetTextSize$Size (const char *, byte, Font, int)+Upp::GetTextSize(const char*,byte,Font,int)GSize GetTextSize(const char *text, byte charset, Font font, int n = -1)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ô\u0000\u0000\u0000\u0001\u0000\u0000\vGetTextSize\u001ESize (const char *, Font, int)&Upp::GetTextSize(const char*,Font,int)9Size GetTextSize(const char *text, Font font, int n = -1)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ö\u0000\u0000\u0000\u0000\u0000\u0000\u0000ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\vGetTextSize\u001BSize (const String &, Font)$Upp::GetTextSize(const String&,Font)/Size GetTextSize(const String& text, Font font)\u0003Upp\vGETTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000end\u0000¼\u0012\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DrawData.cpp","value":"data\nõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000'\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0003Map\u001DVectorMap<String, void *> &()\u0016Upp::DataDrawer::Map() VectorMap<String, void *>& Map()\u0003Upp\u0003MAP\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\t\u0000\u0000\u0000\u001D\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000(\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0001\vsDataDrawer\u0015StaticCriticalSection\u0010Upp::sDataDrawer(static StaticCriticalSection sDataDrawer\u0003Upp\vSDATADRAWER\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\tAddFormat\u001Cvoid (const char *, Factory)/Upp::DataDrawer::AddFormat(const char*,Factory)/void AddFormat(const char *id, Factory factory)\u0003Upp\tADDFORMAT\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create One<DataDrawer> (const String &)&Upp::DataDrawer::Create(const String&)(One<DataDrawer> Create(const String& id)\u0003Upp\u0006CREATE\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\rIsWhiteColumn\u0019bool (const Image &, int)$Upp::IsWhiteColumn(const Image&,int))bool IsWhiteColumn(const Image& m, int x)\u0003Upp\rISWHITECOLUMN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0010DrawImageBandRLE+void (Draw &, int, int, const Image &, int)5Upp::DrawImageBandRLE(Draw&,int,int,const Image&,int)Fvoid DrawImageBandRLE(Draw& w, int x, int y, const Image& m, int minp)\u0003Upp\u0010DRAWIMAGEBANDRLE\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)@Upp::Draw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0019\u0000\u0000\u0000\f\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0000\u0000\u0000\u001C\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\v~DataDrawer\u0010void () noexcept\u0014Upp::DataDrawer::~()\r~DataDrawer()\u0003Upp\v~DATADRAWER\u000FUpp::DataDrawer\u000FUPP::DATADRAWER\u0000\u0000end\u0000u\u0006\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp","value":"datai\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000B(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)GUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1);Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.)\u0004enum\u0003UppB(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\DRAWING.CPP:5:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000 \u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\rDRAWING_BEGINGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0012Upp::DRAWING_BEGIN\rDRAWING_BEGIN\u0003Upp\rDRAWING_BEGIN\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000 \u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u000EDRAWING_OFFSETGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0013Upp::DRAWING_OFFSET\u000EDRAWING_OFFSET\u0003Upp\u000EDRAWING_OFFSET\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000 \u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\fDRAWING_CLIPGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0011Upp::DRAWING_CLIP\fDRAWING_CLIP\u0003Upp\fDRAWING_CLIP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000 \u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u000FDRAWING_CLIPOFFGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0014Upp::DRAWING_CLIPOFF\u000FDRAWING_CLIPOFF\u0003Upp\u000FDRAWING_CLIPOFF\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000 \u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0013DRAWING_EXCLUDECLIPGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0018Upp::DRAWING_EXCLUDECLIP\u0013DRAWING_EXCLUDECLIP\u0003Upp\u0013DRAWING_EXCLUDECLIP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000 \u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0015DRAWING_INTERSECTCLIPGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u001AUpp::DRAWING_INTERSECTCLIP\u0015DRAWING_INTERSECTCLIP\u0003Upp\u0015DRAWING_INTERSECTCLIP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000 \u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\vDRAWING_ENDGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0010Upp::DRAWING_END\vDRAWING_END\u0003Upp\vDRAWING_END\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000 \u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0010DRAWING_DRAWRECTGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0015Upp::DRAWING_DRAWRECT\u0010DRAWING_DRAWRECT\u0003Upp\u0010DRAWING_DRAWRECT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000 \u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0011DRAWING_DRAWIMAGEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0016Upp::DRAWING_DRAWIMAGE\u0011DRAWING_DRAWIMAGE\u0003Upp\u0011DRAWING_DRAWIMAGE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000!\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0015DRAWING_DRAWMONOIMAGEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u001AUpp::DRAWING_DRAWMONOIMAGE\u0015DRAWING_DRAWMONOIMAGE\u0003Upp\u0015DRAWING_DRAWMONOIMAGE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000!\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0013DRAWING_DRAWDRAWINGGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0018Upp::DRAWING_DRAWDRAWING\u0013DRAWING_DRAWDRAWING\u0003Upp\u0013DRAWING_DRAWDRAWING\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000!\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0010DRAWING_DRAWLINEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0015Upp::DRAWING_DRAWLINE\u0010DRAWING_DRAWLINE\u0003Upp\u0010DRAWING_DRAWLINE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000!\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0013DRAWING_DRAWELLIPSEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0018Upp::DRAWING_DRAWELLIPSE\u0013DRAWING_DRAWELLIPSE\u0003Upp\u0013DRAWING_DRAWELLIPSE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000!\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0010DRAWING_DRAWTEXTGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0015Upp::DRAWING_DRAWTEXT\u0010DRAWING_DRAWTEXT\u0003Upp\u0010DRAWING_DRAWTEXT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000!\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u000FDRAWING_DRAWARCGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0014Upp::DRAWING_DRAWARC\u000FDRAWING_DRAWARC\u0003Upp\u000FDRAWING_DRAWARC\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000!\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0018DRAWING_DRAWPOLYPOLYLINEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u001DUpp::DRAWING_DRAWPOLYPOLYLINE\u0018DRAWING_DRAWPOLYPOLYLINE\u0003Upp\u0018DRAWING_DRAWPOLYPOLYLINE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000!\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u001BDRAWING_DRAWPOLYPOLYPOLYGONGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1) Upp::DRAWING_DRAWPOLYPOLYPOLYGON\u001BDRAWING_DRAWPOLYPOLYPOLYGON\u0003Upp\u001BDRAWING_DRAWPOLYPOLYPOLYGON\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000!\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0010DRAWING_DRAWDATAGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0015Upp::DRAWING_DRAWDATA\u0010DRAWING_DRAWDATA\u0003Upp\u0010DRAWING_DRAWDATA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000!\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0014DRAWING_DRAWPAINTINGGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0019Upp::DRAWING_DRAWPAINTING\u0014DRAWING_DRAWPAINTING\u0003Upp\u0014DRAWING_DRAWPAINTING\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000!\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u000EDRAWING_ESCAPEGUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Drawing.cpp:5:1)\u0013Upp::DRAWING_ESCAPE\u000EDRAWING_ESCAPE\u0003Upp\u000EDRAWING_ESCAPE\u0003Upp\u0003UPP\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u001C\u0000\u0000\u0000\b\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0001\u0012StreamUnpackPoints\u001Dvoid (Stream &, Point *, int)+Upp::StreamUnpackPoints(Stream&,Point*,int)Estatic void StreamUnpackPoints(Stream& stream, Point *out, int count)\u0003Upp\u0012STREAMUNPACKPOINTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0001\u0010StreamPackPoints#void (Stream &, const Point *, int)/Upp::StreamPackPoints(Stream&,const Point*,int)Hstatic void StreamPackPoints(Stream& stream, const Point *in, int count)\u0003Upp\u0010STREAMPACKPOINTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0001\u0010StreamUnpackInts\u001Bvoid (Stream &, int *, int)'Upp::StreamUnpackInts(Stream&,int*,int)Astatic void StreamUnpackInts(Stream& stream, int *out, int count)\u0003Upp\u0010STREAMUNPACKINTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0001\u000EStreamPackInts!void (Stream &, const int *, int)+Upp::StreamPackInts(Stream&,const int*,int)Dstatic void StreamPackInts(Stream& stream, const int *in, int count)\u0003Upp\u000ESTREAMPACKINTS\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\tDrawingOp\rStream &(int) Upp::DrawingDraw::DrawingOp(int)\u001BStream& DrawingOp(int code)\u0003Upp\tDRAWINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000Edword () const Upp::DrawingDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000p\u0000\u0000\u0000\u0000\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0001\u0000\vGetPageSize\rSize () const$Upp::DrawingDraw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0001\u0000\fGetPaintRect\rRect () const%Upp::DrawingDraw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u001BUpp::DrawingDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\bOffsetOp\fvoid (Point)!Upp::DrawingDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)%Upp::DrawingDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\tClipoffOp\u0013bool (const Rect &)(Upp::DrawingDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u0019Upp::DrawingDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &),Upp::DrawingDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &).Upp::DrawingDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000¡\u0000\u0000\u0000\u0000\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const0Upp::DrawingDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)3Upp::DrawingDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000¬\u0000\u0000\u0000\u0000\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)MUpp::DrawingDraw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000³\u0000\u0000\u0000\u0000\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)GUpp::DrawingDraw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000º\u0000\u0000\u0000\u0000\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0001\u0000\u0006Escape\u0015void (const String &)'Upp::DrawingDraw::Escape(const String&)\u001Fvoid Escape(const String& data)\u0003Upp\u0006ESCAPE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000À\u0000\u0000\u0000\u0000\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &);Upp::DrawingDraw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)=Upp::DrawingDraw::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)7Upp::DrawingDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)UUpp::DrawingDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)tUpp::DrawingDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿ\a\u0001\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int subpolygon_count_count, const int *disjunct_polygon_counts, int disjunct_polygon_count_count, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000õ\u0000\u0000\u0000\u0001\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)<Upp::DrawingDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000÷\u0000\u0000\u0000\u0000\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)>Upp::DrawingDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000þ\u0000\u0000\u0000\u0000\u0000\u0000\u0000þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)PUpp::DrawingDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\tGetResult\nDrawing ()\u001DUpp::DrawingDraw::GetResult()\u0013Drawing GetResult()\u0003Upp\tGETRESULT\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0002\u0000\u0000\u0000\r\u0000\u0000\u0000\"\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\nDrawingPos\u0015Upp::Draw::DrawingPos\u0015Upp::Draw::DrawingPos\u001FDraw::DrawingPos : StringStream\u0003Upp\nDRAWINGPOS\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0011Upp::StringStream\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0000#\u0001\u0000\u0000\u000F\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0006source\u0004Size\u001DUpp::Draw::DrawingPos::source\vSize source\u0003Upp\u0006SOURCE\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\u0000$\u0001\u0000\u0000\u000F\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\u0006target\u0004Size\u001DUpp::Draw::DrawingPos::target\vSize target\u0003Upp\u0006TARGET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u0000%\u0001\u0000\u0000\u000F\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u0006srcoff\u0005Point\u001DUpp::Draw::DrawingPos::srcoff\fPoint srcoff\u0003Upp\u0006SRCOFF\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000\u000F\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0006trgoff\u0005Point\u001DUpp::Draw::DrawingPos::trgoff\fPoint trgoff\u0003Upp\u0006TRGOFF\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u0000\u0012\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u0003stk\rVector<Point>\u001AUpp::Draw::DrawingPos::stk\u0011Vector<Point> stk\u0003Upp\u0003STK\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000R\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\bIdentity\rbool () const&Upp::Draw::DrawingPos::Identity()const\u0015bool Identity() const\u0003Upp\bIDENTITY\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000,\u0001\u0000\u0000\u0001\u0000\u0000\u0000,\u0001\u0000\u0000\u0018\u0000\u0000\u0000,\u0001\u0000\u0000\u0000\u0000\u0000\u0004GetX\u000Fint (int) const%Upp::Draw::DrawingPos::GetX(int)const\u0015int GetX(int x) const\u0003Upp\u0004GETX\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u0000\u0018\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000\u0000\u0004GetY\u000Fint (int) const%Upp::Draw::DrawingPos::GetY(int)const\u0015int GetY(int y) const\u0003Upp\u0004GETY\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000\u0000.\u0001\u0000\u0000\u001A\u0000\u0000\u0000.\u0001\u0000\u0000\u0000\u0000\u0000\u0005GetCx\u000Fint (int) const&Upp::Draw::DrawingPos::GetCx(int)const\u0017int GetCx(int cx) const\u0003Upp\u0005GETCX\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u0000/\u0001\u0000\u0000\u001A\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0005GetCy\u000Fint (int) const&Upp::Draw::DrawingPos::GetCy(int)const\u0017int GetCy(int cy) const\u0003Upp\u0005GETCY\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u00000\u0001\u0000\u0000\u0018\u0000\u0000\u00000\u0001\u0000\u0000\u0000\u0000\u0000\u0004GetW\u000Fint (int) const%Upp::Draw::DrawingPos::GetW(int)const\u0015int GetW(int w) const\u0003Upp\u0004GETW\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u001E\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000\u0000\u0003Get\u0016Point (int, int) const(Upp::Draw::DrawingPos::Get(int,int)const\u001DPoint Get(int x, int y) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u0019\u0000\u0000\u00002\u0001\u0000\u0000\u0000\u0000\u0000\u0003Get\u0013Point (Point) const&Upp::Draw::DrawingPos::Get(Point)const\u0018Point Get(Point p) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\u00003\u0001\u0000\u0000\u001F\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u0000\u0000\u0003Get\u0019Rect (const Rect &) const,Upp::Draw::DrawingPos::Get(const Rect&)const\u001DRect Get(const Rect& r) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00004\u0001\u0000\u0000.\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u0003Get\u001FRect (int, int, int, int) const0Upp::Draw::DrawingPos::Get(int,int,int,int)const,Rect Get(int x, int y, int cx, int cy) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00006\u0001\u0000\u0000\u0001\u0000\u0000\u00006\u0001\u0000\u0000K\u0000\u0000\u00006\u0001\u0000\u0000\u0001\u0000\u0000\noperator()\u0016Point (int, int) const/Upp::Draw::DrawingPos::operator()(int,int)const$Point operator()(int x, int y) const\u0003Upp\nOPERATOR()\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\u00007\u0001\u0000\u0000H\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\noperator()\u0013Point (Point) const-Upp::Draw::DrawingPos::operator()(Point)const\u001FPoint operator()(Point p) const\u0003Upp\nOPERATOR()\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00008\u0001\u0000\u0000\u0001\u0000\u0000\u00008\u0001\u0000\u0000H\u0000\u0000\u00008\u0001\u0000\u0000\u0001\u0000\u0000\noperator()\u0019Rect (const Rect &) const3Upp::Draw::DrawingPos::operator()(const Rect&)const$Rect operator()(const Rect& r) const\u0003Upp\nOPERATOR()\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u00009\u0001\u0000\u0000\u0001\u0000\u0000\u00009\u0001\u0000\u0000S\u0000\u0000\u00009\u0001\u0000\u0000\u0001\u0000\u0000\noperator()\u001FRect (int, int, int, int) const7Upp::Draw::DrawingPos::operator()(int,int,int,int)const3Rect operator()(int x, int y, int cx, int cy) const\u0003Upp\nOPERATOR()\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\u0000;\u0001\u0000\u0000F\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\nTransformX\u0012void (int &) const,Upp::Draw::DrawingPos::TransformX(int&)const\u001Dvoid TransformX(int& x) const\u0003Upp\nTRANSFORMX\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0000<\u0001\u0000\u0000F\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\nTransformY\u0012void (int &) const,Upp::Draw::DrawingPos::TransformY(int&)const\u001Dvoid TransformY(int& y) const\u0003Upp\nTRANSFORMY\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\u0000=\u0001\u0000\u0000F\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\nTransformW\u0012void (int &) const,Upp::Draw::DrawingPos::TransformW(int&)const\u001Dvoid TransformW(int& w) const\u0003Upp\nTRANSFORMW\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u0000>\u0001\u0000\u0000W\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\tTransform\u0019void (int &, int &) const0Upp::Draw::DrawingPos::Transform(int&,int&)const$void Transform(int& x, int& y) const\u0003Upp\tTRANSFORM\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\u0000?\u0001\u0000\u0000E\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\tTransform\u0014void (Point &) const-Upp::Draw::DrawingPos::Transform(Point&)const\u001Evoid Transform(Point& p) const\u0003Upp\tTRANSFORM\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\u0000@\u0001\u0000\u0000E\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\tTransform\u0013void (Rect &) const,Upp::Draw::DrawingPos::Transform(Rect&)const\u001Dvoid Transform(Rect& r) const\u0003Upp\tTRANSFORM\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0000\u0000\u0000B\u0001\u0000\u0000\u0010\u0000\u0000\u0000B\u0001\u0000\u0000\u0000\u0000\u0000\aGetRect\aRect () Upp::Draw::DrawingPos::GetRect()\u000ERect GetRect()\u0003Upp\aGETRECT\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000D\u0001\u0000\u0000\u0001\u0000\u0000\u0000D\u0001\u0000\u0000\r\u0000\u0000\u0000D\u0001\u0000\u0000\u0000\u0000\u0000\u0004Push\avoid ()\u001DUpp::Draw::DrawingPos::Push()\vvoid Push()\u0003Upp\u0004PUSH\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000E\u0001\u0000\u0000\f\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\u0003Pop\avoid ()\u001CUpp::Draw::DrawingPos::Pop()\nvoid Pop()\u0003Upp\u0003POP\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u00005\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\nDrawingPos\u0015void (const String &)0Upp::Draw::DrawingPos::DrawingPos(const String&)\u001DDrawingPos(const String& src)\u0003Upp\nDRAWINGPOS\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0001\u0000\u0000\u0001\u0000\u0000\u0000N\u0001\u0000\u0000\u0001\u0000\u0000\u0004Push\avoid ()\u001DUpp::Draw::DrawingPos::Push()\vvoid Push()\u0003Upp\u0004PUSH\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000P\u0001\u0000\u0000\u0000\u0000\u0000\u0000P\u0001\u0000\u0000\u0001\u0000\u0000\u0000T\u0001\u0000\u0000\u0001\u0000\u0000\u0003Pop\avoid ()\u001CUpp::Draw::DrawingPos::Pop()\nvoid Pop()\u0003Upp\u0003POP\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000V\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0001\u0000\u0000\u0001\u0000\u0000\u0000[\u0001\u0000\u0000\u0001\u0000\u0000\aGetRect\aRect () Upp::Draw::DrawingPos::GetRect()\u000ERect GetRect()\u0003Upp\aGETRECT\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000\u0000\u0000]\u0001\u0000\u0000\u0001\u0000\u0000\u0000_\u0001\u0000\u0000\u0001\u0000\u0000\u0004GetX\u000Fint (int) const%Upp::Draw::DrawingPos::GetX(int)const\u0015int GetX(int x) const\u0003Upp\u0004GETX\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000a\u0001\u0000\u0000\u0000\u0000\u0000\u0000a\u0001\u0000\u0000\u0001\u0000\u0000\u0000c\u0001\u0000\u0000\u0001\u0000\u0000\u0004GetY\u000Fint (int) const%Upp::Draw::DrawingPos::GetY(int)const\u0015int GetY(int y) const\u0003Upp\u0004GETY\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000e\u0001\u0000\u0000\u0000\u0000\u0000\u0000e\u0001\u0000\u0000\u0001\u0000\u0000\u0000g\u0001\u0000\u0000\u0001\u0000\u0000\u0005GetCx\u000Fint (int) const&Upp::Draw::DrawingPos::GetCx(int)const\u0017int GetCx(int cx) const\u0003Upp\u0005GETCX\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000i\u0001\u0000\u0000\u0000\u0000\u0000\u0000i\u0001\u0000\u0000\u0001\u0000\u0000\u0000k\u0001\u0000\u0000\u0001\u0000\u0000\u0005GetCy\u000Fint (int) const&Upp::Draw::DrawingPos::GetCy(int)const\u0017int GetCy(int cy) const\u0003Upp\u0005GETCY\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\u0000o\u0001\u0000\u0000\u0001\u0000\u0000\u0004GetW\u000Fint (int) const%Upp::Draw::DrawingPos::GetW(int)const\u0015int GetW(int w) const\u0003Upp\u0004GETW\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000q\u0001\u0000\u0000\u0000\u0000\u0000\u0000q\u0001\u0000\u0000\u0001\u0000\u0000\u0000s\u0001\u0000\u0000\u0001\u0000\u0000\u0003Get\u0016Point (int, int) const(Upp::Draw::DrawingPos::Get(int,int)const\u001DPoint Get(int x, int y) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000u\u0001\u0000\u0000\u0000\u0000\u0000\u0000u\u0001\u0000\u0000\u0001\u0000\u0000\u0000w\u0001\u0000\u0000\u0001\u0000\u0000\u0003Get\u0013Point (Point) const&Upp::Draw::DrawingPos::Get(Point)const\u0018Point Get(Point p) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000y\u0001\u0000\u0000\u0000\u0000\u0000\u0000y\u0001\u0000\u0000\u0001\u0000\u0000\u0000{\u0001\u0000\u0000\u0001\u0000\u0000\u0003Get\u0019Rect (const Rect &) const,Upp::Draw::DrawingPos::Get(const Rect&)const\u001DRect Get(const Rect& r) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000\u0000}\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0001\u0000\u0000\u0003Get\u001FRect (int, int, int, int) const0Upp::Draw::DrawingPos::Get(int,int,int,int)const,Rect Get(int x, int y, int cx, int cy) const\u0003Upp\u0003GET\u0015Upp::Draw::DrawingPos\u0015UPP::DRAW::DRAWINGPOS\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000h\u0002\u0000\u0000\u0001\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)4Upp::Draw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0001\u0000\u0000\u0000l\u0002\u0000\u0000\u0001\u0000\u0000\vDrawDrawing*void (int, int, int, int, const Drawing &)6Upp::Draw::DrawDrawing(int,int,int,int,const Drawing&)@void DrawDrawing(int x, int y, int cx, int cy, const Drawing& w)\u0003Upp\vDRAWDRAWING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000n\u0002\u0000\u0000\u0000\u0000\u0000\u0000n\u0002\u0000\u0000\u0001\u0000\u0000\u0000r\u0002\u0000\u0000\u0001\u0000\u0000\vDrawDrawing void (int, int, const Drawing &).Upp::Draw::DrawDrawing(int,int,const Drawing&)1void DrawDrawing(int x, int y, const Drawing& iw)\u0003Upp\vDRAWDRAWING\tUpp::Draw\tUPP::DRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000t\u0002\u0000\u0000\u0000\u0000\u0000\u0000t\u0002\u0000\u0000\u0001\u0000\u0000\u0000v\u0002\u0000\u0000\u0001\u0000\u0000\u0006Create\u0015void (int, int, bool)&Upp::DrawingDraw::Create(int,int,bool).void Create(int cx, int cy, bool dots_ = true)\u0003Upp\u0006CREATE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000x\u0002\u0000\u0000\u0000\u0000\u0000\u0000x\u0002\u0000\u0000\u0001\u0000\u0000\u0000~\u0002\u0000\u0000\u0001\u0000\u0000\u0006Create\u0011void (Size, bool)#Upp::DrawingDraw::Create(Size,bool)'void Create(Size sz, bool dots_ = true)\u0003Upp\u0006CREATE\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\vDrawingDraw\avoid ()\u001FUpp::DrawingDraw::DrawingDraw()\rDrawingDraw()\u0003Upp\vDRAWINGDRAW\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\vDrawingDraw\u0011void (Size, bool)(Upp::DrawingDraw::DrawingDraw(Size,bool)'DrawingDraw(Size sz, bool dots_ = true)\u0003Upp\vDRAWINGDRAW\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\vDrawingDraw\u0015void (int, int, bool)+Upp::DrawingDraw::DrawingDraw(int,int,bool).DrawingDraw(int cx, int cy, bool dots_ = true)\u0003Upp\vDRAWINGDRAW\u0010Upp::DrawingDraw\u0010UPP::DRAWINGDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\tRatioSize\u0015Size (int, int) const%Upp::Drawing::RatioSize(int,int)const$Size RatioSize(int cx, int cy) const\u0003Upp\tRATIOSIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0006Append\u0010void (Drawing &)\u001EUpp::Drawing::Append(Drawing&)\u0018void Append(Drawing& dw)\u0003Upp\u0006APPEND\fUpp::Drawing\fUPP::DRAWING\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000£\u0002\u0000\u0000\u0001\u0000\u0000\tSerialize\u000Fvoid (Stream &) Upp::Drawing::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\fUpp::Drawing\fUPP::DRAWING\u0000\u0000end\u0000P\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageAnyDraw.cpp","value":"data#\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000Edword () const!Upp::ImageAnyDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0001\u0000\vGetPageSize\rSize () const%Upp::ImageAnyDraw::GetPageSize()const\u0018Size GetPageSize() const\u0003Upp\vGETPAGESIZE\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u001CUpp::ImageAnyDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u001AUpp::ImageAnyDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0001\u0000\bOffsetOp\fvoid (Point)\"Upp::ImageAnyDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)&Upp::ImageAnyDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0001\u0000\tClipoffOp\u0013bool (const Rect &))Upp::ImageAnyDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)-Upp::ImageAnyDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)/Upp::ImageAnyDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const1Upp::ImageAnyDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0001\u0000\fGetPaintRect\rRect () const&Upp::ImageAnyDraw::GetPaintRect()const\u0019Rect GetPaintRect() const\u0003Upp\fGETPAINTRECT\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)4Upp::ImageAnyDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)NUpp::ImageAnyDraw::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0001\u0000\nDrawDataOp7void (int, int, int, int, const String &, const char *)HUpp::ImageAnyDraw::DrawDataOp(int,int,int,int,const String&,const char*)Qvoid DrawDataOp(int x, int y, int cx, int cy, const String& data, const char *id)\u0003Upp\nDRAWDATAOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)8Upp::ImageAnyDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)VUpp::ImageAnyDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)uUpp::ImageAnyDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000]\u0000\u0000\u0000\u0000\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)?Upp::ImageAnyDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)=Upp::ImageAnyDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000g\u0000\u0000\u0000\u0000\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)QUpp::ImageAnyDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0001\u0000\rDrawDrawingOp$void (const Rect &, const Drawing &)<Upp::ImageAnyDraw::DrawDrawingOp(const Rect&,const Drawing&)8void DrawDrawingOp(const Rect& target, const Drawing& w)\u0003Upp\rDRAWDRAWINGOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)>Upp::ImageAnyDraw::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& w)\u0003Upp\u000EDRAWPAINTINGOP\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\t\u0000\u0000\u0000\b\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0000w\u0000\u0000\u0000\"\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0010sCreateImageDraw\u000FDraw *(*)(Size)\u0015Upp::sCreateImageDraw\u001FDraw *(*sCreateImageDraw)(Size)\u0003Upp\u0010SCREATEIMAGEDRAW\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000\u001F\u0000\u0000\u0000w\u0000\u0000\u0000\u001A\u0000\u0000\u0000w\u0000\u0000\u0000!\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0002sz\u0004Size\u0002sz\aSize sz\u0000\u0002SZ\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\b\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000#\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0011sExtractImageDraw\u0011Image (*)(Draw *)\u0016Upp::sExtractImageDraw\"Image (*sExtractImageDraw)(Draw *)\u0003Upp\u0011SEXTRACTIMAGEDRAW\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000!\u0000\u0000\u0000x\u0000\u0000\u0000\u001B\u0000\u0000\u0000x\u0000\u0000\u0000\"\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0001w\u0006Draw *\u0001w\aDraw *w\u0000\u0001W\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0013ImageAnyDrawPainter)void (Draw *(*)(Size), Image (*)(Draw *))8Upp::ImageAnyDrawPainter(Draw*(*)(Size),Image(*)(Draw*))>void ImageAnyDrawPainter(Draw *(*f)(Size), Image (*e)(Draw *))\u0003Upp\u0013IMAGEANYDRAWPAINTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0012ImageAnyDrawSystem)void (Draw *(*)(Size), Image (*)(Draw *))7Upp::ImageAnyDrawSystem(Draw*(*)(Size),Image(*)(Draw*))=void ImageAnyDrawSystem(Draw *(*f)(Size), Image (*e)(Draw *))\u0003Upp\u0012IMAGEANYDRAWSYSTEM\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vIsAvailable\abool () Upp::ImageAnyDraw::IsAvailable()\u0012bool IsAvailable()\u0003Upp\vISAVAILABLE\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init\vvoid (Size)\u001DUpp::ImageAnyDraw::Init(Size)\u0012void Init(Size sz)\u0003Upp\u0004INIT\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u001A\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000Eoperator Image\u000EImage () const(Upp::ImageAnyDraw::operator Image()const\u0016operator Image() const\u0003Upp\u000EOPERATOR IMAGE\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fImageAnyDraw\vvoid (Size)%Upp::ImageAnyDraw::ImageAnyDraw(Size)\u0015ImageAnyDraw(Size sz)\u0003Upp\fIMAGEANYDRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0018\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\fImageAnyDraw\u000Fvoid (int, int)(Upp::ImageAnyDraw::ImageAnyDraw(int,int)\u001CImageAnyDraw(int cx, int cy)\u0003Upp\fIMAGEANYDRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000\u0019\u0000\u0000\u0000\u000E\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\r~ImageAnyDraw\u0010void () noexcept\u0016Upp::ImageAnyDraw::~()\u000F~ImageAnyDraw()\u0003Upp\r~IMAGEANYDRAW\u0011Upp::ImageAnyDraw\u0011UPP::IMAGEANYDRAW\u0000\u0000end\u0000É\u001C\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DrawUtil.cpp","value":"dataBõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\vAddNotEmpty)void (Vector<Rect> &, int, int, int, int))Upp::AddNotEmpty(Vector&,int,int,int,int)Pvoid AddNotEmpty(Vector<Rect>& result, int left, int right, int top, int bottom)\u0003Upp\vADDNOTEMPTY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\bSubtract1bool (const Rect &, const Rect &, Vector<Rect> &).Upp::Subtract(const Rect&,const Rect&,Vector&)Cbool Subtract(const Rect& r, const Rect& sub, Vector<Rect>& result)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\bSubtract9bool (const Vector<Rect> &, const Rect &, Vector<Rect> &)0Upp::Subtract(const Vector&,const Rect&,Vector&)Lbool Subtract(const Vector<Rect>& rr, const Rect& sub, Vector<Rect>& result)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\bSubtract9Vector<Rect> (const Vector<Rect> &, const Rect &, bool &).Upp::Subtract(const Vector&,const Rect&,bool&)MVector<Rect> Subtract(const Vector<Rect>& rr, const Rect& sub, bool& changed)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\bSubtract#void (Vector<Rect> &, const Rect &)\"Upp::Subtract(Vector&,const Rect&)0void Subtract(Vector<Rect>& rr, const Rect& sub)\u0003Upp\bSUBTRACT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0005Union#void (Vector<Rect> &, const Rect &)\u001FUpp::Union(Vector&,const Rect&)-void Union(Vector<Rect>& rr, const Rect& add)\u0003Upp\u0005UNION\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\tIntersect9Vector<Rect> (const Vector<Rect> &, const Rect &, bool &)/Upp::Intersect(const Vector&,const Rect&,bool&)KVector<Rect> Intersect(const Vector<Rect>& b, const Rect& a, bool& changed)\u0003Upp\tINTERSECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\fIntersection1Vector<Rect> (const Vector<Rect> &, const Rect &),Upp::Intersection(const Vector&,const Rect&)?Vector<Rect> Intersection(const Vector<Rect>& b, const Rect& a)\u0003Upp\fINTERSECTION\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u000EAddRefreshRect+void (Vector<Rect> &, const Rect &, double)/Upp::AddRefreshRect(Vector&,const Rect&,double)Qvoid AddRefreshRect(Vector<Rect>& invalid, const Rect& _r, double ctolerance = 2)\u0003Upp\u000EADDREFRESHRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fDrawFatFrame-void (Draw &, int, int, int, int, Color, int)2Upp::DrawFatFrame(Draw&,int,int,int,int,Color,int)Lvoid DrawFatFrame(Draw& w, int x, int y, int cx, int cy, Color color, int n)\u0003Upp\fDRAWFATFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fDrawFatFrame'void (Draw &, const Rect &, Color, int).Upp::DrawFatFrame(Draw&,const Rect&,Color,int)=void DrawFatFrame(Draw& w, const Rect& r, Color color, int n)\u0003Upp\fDRAWFATFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tDrawFrame=void (Draw &, int, int, int, int, Color, Color, Color, Color)=Upp::DrawFrame(Draw&,int,int,int,int,Color,Color,Color,Color){void DrawFrame(Draw& w, int x, int y, int cx, int cy, Color leftcolor, Color topcolor, Color rightcolor, Color bottomcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tDrawFrame7void (Draw &, const Rect &, Color, Color, Color, Color)9Upp::DrawFrame(Draw&,const Rect&,Color,Color,Color,Color)lvoid DrawFrame(Draw& w, const Rect& r, Color leftcolor, Color topcolor, Color rightcolor, Color bottomcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tDrawFrame/void (Draw &, int, int, int, int, Color, Color)1Upp::DrawFrame(Draw&,int,int,int,int,Color,Color)avoid DrawFrame(Draw& w, int x, int y, int cx, int cy, Color topleftcolor, Color bottomrightcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¡\u0000\u0000\u0000\u0000\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\tDrawFrame)void (Draw &, const Rect &, Color, Color)-Upp::DrawFrame(Draw&,const Rect&,Color,Color)Rvoid DrawFrame(Draw& w, const Rect& r, Color topleftcolor, Color bottomrightcolor)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\tDrawFrame(void (Draw &, int, int, int, int, Color)+Upp::DrawFrame(Draw&,int,int,int,int,Color)Bvoid DrawFrame(Draw& w, int x, int y, int cx, int cy, Color color)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ª\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\tDrawFrame\"void (Draw &, const Rect &, Color)'Upp::DrawFrame(Draw&,const Rect&,Color)3void DrawFrame(Draw& w, const Rect& r, Color color)\u0003Upp\tDRAWFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000®\u0000\u0000\u0000\u0000\u0000\u0000\u0000®\u0000\u0000\u0000\u0001\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\nDrawBorder1void (Draw &, int, int, int, int, const ColorF *)4Upp::DrawBorder(Draw&,int,int,int,int,const ColorF*)Gvoid DrawBorder(Draw& w, int x, int y, int cx, int cy, const ColorF *c)\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¾\u0000\u0000\u0000\u0000\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\nDrawBorder+void (Draw &, const Rect &, const ColorF *)0Upp::DrawBorder(Draw&,const Rect&,const ColorF*)8void DrawBorder(Draw& w, const Rect& r, const ColorF *c)\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000Â\u0000\u0000\u0000\u0000\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\vBlackBorder\u0010const ColorF *()\u0012Upp::BlackBorder()\u001Bconst ColorF *BlackBorder()\u0003Upp\vBLACKBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\vWhiteBorder\u0010const ColorF *()\u0012Upp::WhiteBorder()\u001Bconst ColorF *WhiteBorder()\u0003Upp\vWHITEBORDER\u0003Upp\u0003UPP\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000Ô\u0000\u0000\u0000\b\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0018\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0000\u0000\u0000\nSColorEdge\u0000\nSColorEdge\nSColorEdge\u0000\nSCOLOREDGE\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u000FDefButtonBorder\u0010const ColorF *()\u0016Upp::DefButtonBorder()\u001Fconst ColorF *DefButtonBorder()\u0003Upp\u000FDEFBUTTONBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\fButtonBorder\u0010const ColorF *()\u0013Upp::ButtonBorder()\u001Cconst ColorF *ButtonBorder()\u0003Upp\fBUTTONBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0010EdgeButtonBorder\u0010const ColorF *()\u0017Upp::EdgeButtonBorder() const ColorF *EdgeButtonBorder()\u0003Upp\u0010EDGEBUTTONBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000õ\u0000\u0000\u0000\u0000\u0000\u0000\u0000õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\u0010ButtonPushBorder\u0010const ColorF *()\u0017Upp::ButtonPushBorder() const ColorF *ButtonPushBorder()\u0003Upp\u0010BUTTONPUSHBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0000\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0001\u0000\u0000\u0001\u0000\u0000\vInsetBorder\u0010const ColorF *()\u0012Upp::InsetBorder()\u001Bconst ColorF *InsetBorder()\u0003Upp\vINSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0001\u0000\u0000\fOutsetBorder\u0010const ColorF *()\u0013Upp::OutsetBorder()\u001Cconst ColorF *OutsetBorder()\u0003Upp\fOUTSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0010ThinOutsetBorder\u0010const ColorF *()\u0017Upp::ThinOutsetBorder() const ColorF *ThinOutsetBorder()\u0003Upp\u0010THINOUTSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u000FThinInsetBorder\u0010const ColorF *()\u0016Upp::ThinInsetBorder()\u001Fconst ColorF *ThinInsetBorder()\u0003Upp\u000FTHININSETBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\nDrawBorder6void (Draw &, int, int, int, int, const ColorF *(*)())9Upp::DrawBorder(Draw&,int,int,int,int,const ColorF*(*)())Vvoid DrawBorder(Draw& w, int x, int y, int cx, int cy, const ColorF *(*colors_ltrd)())\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000*\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\nDrawBorder0void (Draw &, const Rect &, const ColorF *(*)())5Upp::DrawBorder(Draw&,const Rect&,const ColorF*(*)())Gvoid DrawBorder(Draw& w, const Rect& r, const ColorF *(*colors_ltrd)())\u0003Upp\nDRAWBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\u0011DrawRectMinusRect0void (Draw &, const Rect &, const Rect &, Color);Upp::DrawRectMinusRect(Draw&,const Rect&,const Rect&,Color)Qvoid DrawRectMinusRect(Draw& w, const Rect& rect, const Rect& inner, Color color)\u0003Upp\u0011DRAWRECTMINUSRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\bDrawRect6void (Draw &, int, int, int, int, const Image &, bool)6Upp::DrawRect(Draw&,int,int,int,int,const Image&,bool)Wvoid DrawRect(Draw& w, int x, int y, int cx, int cy, const Image& img, bool ra = false)\u0003Upp\bDRAWRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000H\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\u0000K\u0001\u0000\u0000\u0001\u0000\u0000\bDrawRect0void (Draw &, const Rect &, const Image &, bool)2Upp::DrawRect(Draw&,const Rect&,const Image&,bool)Nvoid DrawRect(Draw& w, const Rect& rect, const Image& img, bool ralgn = false)\u0003Upp\bDRAWRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0001\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\fDrawDragLine@void (Draw &, bool, int, int, int, int, const int *, Color, int)BUpp::DrawDragLine(Draw&,bool,int,int,int,int,const int*,Color,int)svoid DrawDragLine(Draw& w, bool horz, int x, int y, int len, int n, const int *pattern, Color color, int animation)\u0003Upp\fDRAWDRAGLINE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000o\u0001\u0000\u0000\u0000\u0000\u0000\u0000o\u0001\u0000\u0000\u0001\u0000\u0000\u0000w\u0001\u0000\u0000\u0001\u0000\u0000\rDrawDragFrame9void (Draw &, const Rect &, int, const int *, Color, int)>Upp::DrawDragFrame(Draw&,const Rect&,int,const int*,Color,int)avoid DrawDragFrame(Draw& w, const Rect& r, int n, const int *pattern, Color color, int animation)\u0003Upp\rDRAWDRAGFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000y\u0001\u0000\u0000\u0000\u0000\u0000\u0000y\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\rDrawDragFrame1void (Draw &, const Rect &, int, int, Color, int)7Upp::DrawDragFrame(Draw&,const Rect&,int,int,Color,int)Zvoid DrawDragFrame(Draw& w, const Rect& r, int n, int pattern, Color color, int animation)\u0003Upp\rDRAWDRAGFRAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tDrawTiles0void (Draw &, int, int, int, int, const Image &)2Upp::DrawTiles(Draw&,int,int,int,int,const Image&)Gvoid DrawTiles(Draw& w, int x, int y, int cx, int cy, const Image& img)\u0003Upp\tDRAWTILES\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tDrawTiles*void (Draw &, const Rect &, const Image &).Upp::DrawTiles(Draw&,const Rect&,const Image&);void DrawTiles(Draw& w, const Rect& rect, const Image& img)\u0003Upp\tDRAWTILES\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0012DrawHighlightImage9void (Draw &, int, int, const Image &, bool, bool, Color)CUpp::DrawHighlightImage(Draw&,int,int,const Image&,bool,bool,Color)ÿ\u0000\u0000\u0000void DrawHighlightImage(Draw& w, int x, int y, const Image& img, bool highlight = true, bool enabled = true, Color maskcolor = SColorPaper)\u0003Upp\u0012DRAWHIGHLIGHTIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000¤\u0001\u0000\u0000\u0001\u0000\u0000\rGradientColor\u001EColor (Color, Color, int, int)'Upp::GradientColor(Color,Color,int,int)5Color GradientColor(Color fc, Color tc, int i, int n)\u0003Upp\rGRADIENTCOLOR\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¦\u0001\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000\u0001\u0000\u0000\u0000Î\u0001\u0000\u0000\u0001\u0000\u0000\u000FPaintButtonRectUvoid (Draw &, Rect &, Color, Color, Color, Color, Color &, Color &, Color &, Color &)UUpp::PaintButtonRect(Draw&,Rect&,Color,Color,Color,Color,Color&,Color&,Color&,Color&)ÿ \u0000\u0000\u0000void PaintButtonRect(Draw& w, Rect& r, Color left, Color top, Color right, Color bottom, Color& topleft, Color& topright, Color& bottomleft, Color& bottomright)\u0003Upp\u000FPAINTBUTTONRECT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ð\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ð\u0001\u0000\u0000\u0001\u0000\u0000\u0000D\u0002\u0000\u0000\u0001\u0000\u0000\fDrawXPButton\u0018void (Draw &, Rect, int)!Upp::DrawXPButton(Draw&,Rect,int),void DrawXPButton(Draw& w, Rect r, int type)\u0003Upp\fDRAWXPBUTTON\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u001A\u0000\u0000\u0000F\u0002\u0000\u0000\u0000\u0000\u0000\u0000F\u0002\u0000\u0000\u001E\u0000\u0000\u0000F\u0002\u0000\u0000\u0001\u0000\u0001\u0004sPdf\u0012DrawingToPdfFnType\tUpp::sPdf\u001Estatic DrawingToPdfFnType sPdf\u0003Upp\u0004SPDF\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0019\u0000\u0000\u0000G\u0002\u0000\u0000\u0000\u0000\u0000\u0000G\u0002\u0000\u0000\u001E\u0000\u0000\u0000G\u0002\u0000\u0000\u0001\u0000\u0001\u0005sJpeg\u0011PdfDrawJPEGFnType\nUpp::sJpeg\u001Estatic PdfDrawJPEGFnType sJpeg\u0003Upp\u0005SJPEG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000I\u0002\u0000\u0000\u0000\u0000\u0000\u0000I\u0002\u0000\u0000\u0001\u0000\u0000\u0000M\u0002\u0000\u0000\u0001\u0000\u0000\u0011SetDrawingToPdfFn,void (DrawingToPdfFnType, PdfDrawJPEGFnType)<Upp::SetDrawingToPdfFn(DrawingToPdfFnType,PdfDrawJPEGFnType)Fvoid SetDrawingToPdfFn(DrawingToPdfFnType Pdf, PdfDrawJPEGFnType Jpeg)\u0003Upp\u0011SETDRAWINGTOPDFFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0013\u0000\u0000\u0000O\u0002\u0000\u0000\u0000\u0000\u0000\u0000O\u0002\u0000\u0000\u0001\u0000\u0000\u0000R\u0002\u0000\u0000\u0001\u0000\u0000\u0011GetDrawingToPdfFn\u0015DrawingToPdfFnType ()\u0018Upp::GetDrawingToPdfFn()&DrawingToPdfFnType GetDrawingToPdfFn()\u0003Upp\u0011GETDRAWINGTOPDFFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000T\u0002\u0000\u0000\u0000\u0000\u0000\u0000T\u0002\u0000\u0000\u0001\u0000\u0000\u0000W\u0002\u0000\u0000\u0001\u0000\u0000\u0010GetPdfDrawJPEGFn\u0014PdfDrawJPEGFnType ()\u0017Upp::GetPdfDrawJPEGFn()$PdfDrawJPEGFnType GetPdfDrawJPEGFn()\u0003Upp\u0010GETPDFDRAWJPEGFN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0013\u0000\u0000\u0000Y\u0002\u0000\u0000\u0000\u0000\u0000\u0000Y\u0002\u0000\u0000\u0019\u0000\u0000\u0000Y\u0002\u0000\u0000\u0001\u0000\u0001\u0006sIsJPG\vIsJPGFnType\vUpp::sIsJPG\u0019static IsJPGFnType sIsJPG\u0003Upp\u0006SISJPG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000[\u0002\u0000\u0000\u0000\u0000\u0000\u0000[\u0002\u0000\u0000\u0001\u0000\u0000\u0000^\u0002\u0000\u0000\u0001\u0000\u0000\nSetIsJPGFn\u0012void (IsJPGFnType)\u001CUpp::SetIsJPGFn(IsJPGFnType)\"void SetIsJPGFn(IsJPGFnType isjpg)\u0003Upp\nSETISJPGFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000`\u0002\u0000\u0000\u0000\u0000\u0000\u0000`\u0002\u0000\u0000\u0001\u0000\u0000\u0000c\u0002\u0000\u0000\u0001\u0000\u0000\nGetIsJPGFn\u000EIsJPGFnType ()\u0011Upp::GetIsJPGFn()\u0018IsJPGFnType GetIsJPGFn()\u0003Upp\nGETISJPGFN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\b\u0000\u0000\u0000e\u0002\u0000\u0000\u0000\u0000\u0000\u0000e\u0002\u0000\u0000]\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\frender_glyph6Image (*)(int, int, Font, int, int, int, Color, Color)\u0011Upp::render_glyphBImage (*render_glyph)(int, int, Font, int, int, int, Color, Color)\u0003Upp\fRENDER_GLYPH\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000\u001A\u0000\u0000\u0000e\u0002\u0000\u0000\u0016\u0000\u0000\u0000e\u0002\u0000\u0000\u001C\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0002cx\u0003int\u0002cx\u0006int cx\u0000\u0002CX\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\"\u0000\u0000\u0000e\u0002\u0000\u0000\u001E\u0000\u0000\u0000e\u0002\u0000\u0000#\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0001x\u0003int\u0001x\u0005int x\u0000\u0001X\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000*\u0000\u0000\u0000e\u0002\u0000\u0000%\u0000\u0000\u0000e\u0002\u0000\u0000.\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0004font\tFont font\u0000\u0004FONT\u0000\u0000\u0000\u0000\n\u0000\u0000\u00004\u0000\u0000\u0000e\u0002\u0000\u00000\u0000\u0000\u0000e\u0002\u0000\u00007\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0003chr\u0003int\u0003chr\aint chr\u0000\u0003CHR\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000=\u0000\u0000\u0000e\u0002\u0000\u00009\u0000\u0000\u0000e\u0002\u0000\u0000?\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0002py\u0003int\u0002py\u0006int py\u0000\u0002PY\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000E\u0000\u0000\u0000e\u0002\u0000\u0000A\u0000\u0000\u0000e\u0002\u0000\u0000H\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0003pcy\u0003int\u0003pcy\aint pcy\u0000\u0003PCY\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000P\u0000\u0000\u0000e\u0002\u0000\u0000J\u0000\u0000\u0000e\u0002\u0000\u0000R\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0002fg\u0005Color\u0002fg\bColor fg\u0000\u0002FG\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000Z\u0000\u0000\u0000e\u0002\u0000\u0000T\u0000\u0000\u0000e\u0002\u0000\u0000\\\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0002bg\u0005Color\u0002bg\bColor bg\u0000\u0002BG\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000g\u0002\u0000\u0000\u0000\u0000\u0000\u0000g\u0002\u0000\u0000\u0001\u0000\u0000\u0000r\u0002\u0000\u0000\u0001\u0000\u0000\vRenderGlyph3Image (int, int, Font, int, int, int, Color, Color)6Upp::RenderGlyph(int,int,Font,int,int,int,Color,Color)YImage RenderGlyph(int cx, int x, Font font, int chr, int py, int pcy, Color fg, Color bg)\u0003Upp\vRENDERGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000t\u0002\u0000\u0000\u0000\u0000\u0000\u0000t\u0002\u0000\u0000\u0001\u0000\u0000\u0000w\u0002\u0000\u0000\u0001\u0000\u0000\u000ESetRenderGlyph=void (Image (*)(int, int, Font, int, int, int, Color, Color))CUpp::SetRenderGlyph(Image(*)(int,int,Font,int,int,int,Color,Color))Lvoid SetRenderGlyph(Image (*f)(int, int, Font, int, int, int, Color, Color))\u0003Upp\u000ESETRENDERGLYPH\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\a\u0000\u0000\u0000~\u0002\u0000\u0000\u0000\u0000\u0000\u0000~\u0002\u0000\u0000'\u0000\u0000\u0000~\u0002\u0000\u0000\u0001\u0000\u0000\u0015restore_gl_viewport__\nvoid (*)()\u001AUpp::restore_gl_viewport__\u001Fvoid (*restore_gl_viewport__)()\u0003Upp\u0015RESTORE_GL_VIEWPORT__\u0003Upp\u0003UPP\u0000\u0000end\u0000r0\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DrawTextUtil.cpp","value":"data\u0006\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0010DrawTextEllipsisKvoid (Draw &, int, int, int, const wchar *, const char *, Font, Color, int)PUpp::DrawTextEllipsis(Draw&,int,int,int,const wchar*,const char*,Font,Color,int)ÿ\u0000\u0000\u0000void DrawTextEllipsis(Draw& w, int x, int y, int cx, const wchar *text, const char *ellipsis, Font font = StdFont(), Color ink = SColorText(), int n = -1)\u0003Upp\u0010DRAWTEXTELLIPSIS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0010DrawTextEllipsisJvoid (Draw &, int, int, int, const char *, const char *, Font, Color, int)OUpp::DrawTextEllipsis(Draw&,int,int,int,const char*,const char*,Font,Color,int)ÿ\u0000\u0000\u0000void DrawTextEllipsis(Draw& w, int x, int y, int cx, const char *text, const char *ellipsis, Font font = StdFont(), Color ink = SColorText(), int n = -1)\u0003Upp\u0010DRAWTEXTELLIPSIS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\rGetTLTextSize\u001ASize (const wchar *, Font)%Upp::GetTLTextSize(const wchar*,Font)<Size GetTLTextSize(const wchar *text, Font font = StdFont())\u0003Upp\rGETTLTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u000FGetTLTextHeight\u0019int (const wchar *, Font)'Upp::GetTLTextHeight(const wchar*,Font):int GetTLTextHeight(const wchar *s, Font font = StdFont())\u0003Upp\u000FGETTLTEXTHEIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\nDrawTLText=void (Draw &, int, int, int, const wchar *, Font, Color, int)>Upp::DrawTLText(Draw&,int,int,int,const wchar*,Font,Color,int)ÿ\u0000\u0000\u0000void DrawTLText(Draw& draw, int x, int y, int cx, const wchar *text, Font font = StdFont(), Color ink = SColorText(), int accesskey = 0)\u0003Upp\nDRAWTLTEXT\u0003Upp\u0003UPP\u0000\u0000end\u0000ú\u0005\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Display.cpp","value":"dataVõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\nIMAGECLASS\u0000\nIMAGECLASS\nIMAGECLASS\u0000\nIMAGECLASS\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000$\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\tIMAGEFILE\u0000\tIMAGEFILE\tIMAGEFILE\u0000\tIMAGEFILE\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set\u0019AttrText &(const Value &) Upp::AttrText::Set(const Value&)\u001DAttrText& Set(const Value& v)\u0003Upp\u0003SET\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u001A\u0000\u0000\u0000\n\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u000Eoperator Value\u000EValue () const$Upp::AttrText::operator Value()const\u0016operator Value() const\u0003Upp\u000EOPERATOR VALUE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0018\u0000\u0000\u0000\n\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\bAttrText\u0014void (const Value &)%Upp::AttrText::AttrText(const Value&)\u0018AttrText(const Value& v)\u0003Upp\bATTRTEXT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\tSerialize\u000Fvoid (Stream &)!Upp::AttrText::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\aJsonize\u000Fvoid (JsonIO &)\u001FUpp::AttrText::Jsonize(JsonIO&)\u0019void Jsonize(JsonIO& jio)\u0003Upp\aJSONIZE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\noperator==\u001Dbool (const AttrText &) const/Upp::AttrText::operator==(const AttrText&)const\rbool operator\u0003Upp\nOPERATOR==\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0006Xmlize\u000Evoid (XmlIO &)\u001DUpp::AttrText::Xmlize(XmlIO&)\u0017void Xmlize(XmlIO& xio)\u0003Upp\u0006XMLIZE\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init\avoid ()\u0015Upp::AttrText::Init()\vvoid Init()\u0003Upp\u0004INIT\rUpp::AttrText\rUPP::ATTRTEXT\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000N\u0000\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u000FStdDisplayClass\u0014Upp::StdDisplayClass\u0014Upp::StdDisplayClass StdDisplayClass : public Display\u0003Upp\u000FSTDDISPLAYCLASS\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\fUpp::Display\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000:\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u000FStdDisplayClass\nvoid (int)*Upp::StdDisplayClass::StdDisplayClass(int)'StdDisplayClass(int align = ALIGN_LEFT)\u0003Upp\u000FSTDDISPLAYCLASS\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000k\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0001\u0000\u0006Paint0Evoid (Draw &, const Rect &, const Value &, Color, Color, dword) constSUpp::StdDisplayClass::Paint0(Draw&,const Rect&,const Value&,Color,Color,dword)constbvoid Paint0(Draw& draw, const Rect& rc, const Value& v, Color ink, Color paper, dword style) const\u0003Upp\u0006PAINT0\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000j\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constRUpp::StdDisplayClass::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)constavoid Paint(Draw& draw, const Rect& rc, const Value& v, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000.\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0001\u0000\nGetStdSize\u001ASize (const Value &) const3Upp::StdDisplayClass::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\r\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0005align\u0003int\u001BUpp::StdDisplayClass::align\tint align\u0003Upp\u0005ALIGN\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0001\u0000\u000FPaintBackgroundEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constTUpp::Display::PaintBackground(Draw&,const Rect&,const Value&,Color,Color,dword)constgvoid PaintBackground(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u000FPAINTBACKGROUND\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constJUpp::Display::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0001\u0000\tRatioSize$Size (const Value &, int, int) const2Upp::Display::RatioSize(const Value&,int,int)const4Size RatioSize(const Value& q, int cx, int cy) const\u0003Upp\tRATIOSIZE\fUpp::Display\fUPP::DISPLAY\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) const+Upp::Display::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\fUpp::Display\fUPP::DISPLAY\u0000\u0000\t\u0000\u0000\u0000\a\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0000y\u0000\u0000\u0000@\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0013extGetSmartTextSize!Size (*)(const char *, Font, int)\u0018Upp::extGetSmartTextSize4Size (*extGetSmartTextSize)(const char *, Font, int)\u0003Upp\u0013EXTGETSMARTTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000(\u0000\u0000\u0000y\u0000\u0000\u0000\u001C\u0000\u0000\u0000y\u0000\u0000\u0000,\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0004text\fconst char *\u0004text\u0010const char *text\u0000\u0004TEXT\u0000\u0000\u0000\u0000\n\u0000\u0000\u00003\u0000\u0000\u0000y\u0000\u0000\u0000.\u0000\u0000\u0000y\u0000\u0000\u00007\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0004font\tFont font\u0000\u0004FONT\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000=\u0000\u0000\u0000y\u0000\u0000\u00009\u0000\u0000\u0000y\u0000\u0000\u0000?\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0002cx\u0003int\u0002cx\u0006int cx\u0000\u0002CX\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0013ExtGetSmartTextSize\u001ESize (const char *, Font, int).Upp::ExtGetSmartTextSize(const char*,Font,int)=Size ExtGetSmartTextSize(const char *text, Font font, int cx)\u0003Upp\u0013EXTGETSMARTTEXTSIZE\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010extDrawSmartTextFvoid (*)(Draw &, int, int, int, const char *, Font, Color, int, Color)\u0015Upp::extDrawSmartTextUvoid (*extDrawSmartText)(Draw&, int, int, int, const char *, Font, Color, int, Color)\u0003Upp\u0010EXTDRAWSMARTTEXT\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004draw\u0006Draw &\u0004draw\nDraw& draw\u0000\u0004DRAW\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001x\u0003int\u0001x\u0005int x\u0000\u0001X\u0000\u0000\u0000\u0000\n\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001y\u0003int\u0001y\u0005int y\u0000\u0001Y\u0000\u0000\u0000\u0000\n\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002cx\u0003int\u0002cx\u0006int cx\u0000\u0002CX\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004text\fconst char *\u0004text\u0010const char *text\u0000\u0004TEXT\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0004font\tFont font\u0000\u0004FONT\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003ink\u0005Color\u0003ink\tColor ink\u0000\u0003INK\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\taccesskey\u0003int\taccesskey\rint accesskey\u0000\tACCESSKEY\u0000\u0000\u0000\u0000\n\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aqtf_ink\u0005Color\aqtf_ink\rColor qtf_ink\u0000\aQTF_INK\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010ExtDrawSmartTextCvoid (Draw &, int, int, int, const char *, Font, Color, int, Color)IUpp::ExtDrawSmartText(Draw&,int,int,int,const char*,Font,Color,int,Color)}void ExtDrawSmartText(Draw& draw, int x, int y, int cx, const char *text, Font font, Color ink, int accesskey, Color qtf_ink)\u0003Upp\u0010EXTDRAWSMARTTEXT\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0001\u0000\u0006Paint0Evoid (Draw &, const Rect &, const Value &, Color, Color, dword) constSUpp::StdDisplayClass::Paint0(Draw&,const Rect&,const Value&,Color,Color,dword)constZvoid Paint0(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword s) const\u0003Upp\u0006PAINT0\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000È\u0000\u0000\u0000\u0000\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constRUpp::StdDisplayClass::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)constYvoid Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword s) const\u0003Upp\u0005PAINT\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) const3Upp::StdDisplayClass::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u0014Upp::StdDisplayClass\u0014UPP::STDDISPLAYCLASS\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000é\u0000\u0000\u0000\u0000\u0000\u0000\u0000é\u0000\u0000\u0000\u0016\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\b~Display\u0010void () noexcept\u0011Upp::Display::~()\n~Display()\u0003Upp\b~DISPLAY\fUpp::Display\fUPP::DISPLAY\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\nStdDisplay\u0011const Display &()\u0011Upp::StdDisplay()\u001Bconst Display& StdDisplay()\u0003Upp\nSTDDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0000\u0000\u0000W\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\u0010StdCenterDisplay\u0011const Display &()\u0017Upp::StdCenterDisplay()!const Display& StdCenterDisplay()\u0003Upp\u0010STDCENTERDISPLAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000ñ\u0000\u0000\u0000U\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\u000FStdRightDisplay\u0011const Display &()\u0016Upp::StdRightDisplay() const Display& StdRightDisplay()\u0003Upp\u000FSTDRIGHTDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constSUpp::ColorDisplayNull::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0015Upp::ColorDisplayNull\u0015UPP::COLORDISPLAYNULL\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000ü\u0000\u0000\u0000\u0000\u0000\u0000\u0000ü\u0000\u0000\u0000D\u0000\u0000\u0000ü\u0000\u0000\u0000\u0001\u0000\u0000\fColorDisplay\u0011const Display &()\u0013Upp::ColorDisplay()\u001Dconst Display& ColorDisplay()\u0003Upp\fCOLORDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000þ\u0000\u0000\u0000\u0000\u0000\u0000\u0000þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\u0012SizeTextDisplayCls\u0017Upp::SizeTextDisplayCls\u0017Upp::SizeTextDisplayCls#SizeTextDisplayCls : public Display\u0003Upp\u0012SIZETEXTDISPLAYCLS\u0017Upp::SizeTextDisplayCls\u0017UPP::SIZETEXTDISPLAYCLS\fUpp::Display\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000;\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constUUpp::SizeTextDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0017Upp::SizeTextDisplayCls\u0017UPP::SIZETEXTDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u0000\a\u0001\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constUUpp::SizeTextDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)constQvoid Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color, dword) const\u0003Upp\u0005PAINT\u0017Upp::SizeTextDisplayCls\u0017UPP::SIZETEXTDISPLAYCLS\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000I\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\u000FSizeTextDisplay\u0011const Display &()\u0016Upp::SizeTextDisplay() const Display& SizeTextDisplay()\u0003Upp\u000FSIZETEXTDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\v\u0001\u0000\u0000\u0000\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0017CenteredImageDisplayCls\u001CUpp::CenteredImageDisplayCls\u001CUpp::CenteredImageDisplayCls(CenteredImageDisplayCls : public Display\u0003Upp\u0017CENTEREDIMAGEDISPLAYCLS\u001CUpp::CenteredImageDisplayCls\u001CUPP::CENTEREDIMAGEDISPLAYCLS\fUpp::Display\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\u0000\r\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constZUpp::CenteredImageDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u001CUpp::CenteredImageDisplayCls\u001CUPP::CENTEREDIMAGEDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) const;Upp::CenteredImageDisplayCls::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u001CUpp::CenteredImageDisplayCls\u001CUPP::CENTEREDIMAGEDISPLAYCLS\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0001\u0000\u0000S\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\u0014CenteredImageDisplay\u0011const Display &()\u001BUpp::CenteredImageDisplay()%const Display& CenteredImageDisplay()\u0003Upp\u0014CENTEREDIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000 CenteredHighlightImageDisplayCls%Upp::CenteredHighlightImageDisplayCls%Upp::CenteredHighlightImageDisplayCls1CenteredHighlightImageDisplayCls : public Display\u0003Upp CENTEREDHIGHLIGHTIMAGEDISPLAYCLS%Upp::CenteredHighlightImageDisplayCls%UPP::CENTEREDHIGHLIGHTIMAGEDISPLAYCLS\fUpp::Display\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000\u0000 \u0001\u0000\u0000\u0002\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constcUpp::CenteredHighlightImageDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT%Upp::CenteredHighlightImageDisplayCls%UPP::CENTEREDHIGHLIGHTIMAGEDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000\u0002\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) constDUpp::CenteredHighlightImageDisplayCls::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE%Upp::CenteredHighlightImageDisplayCls%UPP::CENTEREDHIGHLIGHTIMAGEDISPLAYCLS\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u00000\u0001\u0000\u0000\u0000\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\u001DCenteredHighlightImageDisplay\u0011const Display &()$Upp::CenteredHighlightImageDisplay().const Display& CenteredHighlightImageDisplay()\u0003Upp\u001DCENTEREDHIGHLIGHTIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\u0000C\u0001\u0000\u0000\u0001\u0000\u0000\u000FImageDisplayCls\u0014Upp::ImageDisplayCls\u0014Upp::ImageDisplayCls ImageDisplayCls : public Display\u0003Upp\u000FIMAGEDISPLAYCLS\u0014Upp::ImageDisplayCls\u0014UPP::IMAGEDISPLAYCLS\fUpp::Display\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\u00007\u0001\u0000\u0000\u0002\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constRUpp::ImageDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0014Upp::ImageDisplayCls\u0014UPP::IMAGEDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\u0000?\u0001\u0000\u0000\u0002\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) const3Upp::ImageDisplayCls::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u0014Upp::ImageDisplayCls\u0014UPP::IMAGEDISPLAYCLS\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0001\u0000\u0000C\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\fImageDisplay\u0011const Display &()\u0013Upp::ImageDisplay()\u001Dconst Display& ImageDisplay()\u0003Upp\fIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\u0000X\u0001\u0000\u0000\u0001\u0000\u0000\u0015FittedImageDisplayCls\u001AUpp::FittedImageDisplayCls\u001AUpp::FittedImageDisplayCls&FittedImageDisplayCls : public Display\u0003Upp\u0015FITTEDIMAGEDISPLAYCLS\u001AUpp::FittedImageDisplayCls\u001AUPP::FITTEDIMAGEDISPLAYCLS\fUpp::Display\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0000\u0000\u0000I\u0001\u0000\u0000\u0002\u0000\u0000\u0000S\u0001\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constXUpp::FittedImageDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u001AUpp::FittedImageDisplayCls\u001AUPP::FITTEDIMAGEDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000T\u0001\u0000\u0000\u0001\u0000\u0000\u0000T\u0001\u0000\u0000\u0002\u0000\u0000\u0000W\u0001\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) const9Upp::FittedImageDisplayCls::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u001AUpp::FittedImageDisplayCls\u001AUPP::FITTEDIMAGEDISPLAYCLS\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000Z\u0001\u0000\u0000\u0000\u0000\u0000\u0000Z\u0001\u0000\u0000O\u0000\u0000\u0000Z\u0001\u0000\u0000\u0001\u0000\u0000\u0012FittedImageDisplay\u0011const Display &()\u0019Upp::FittedImageDisplay()#const Display& FittedImageDisplay()\u0003Upp\u0012FITTEDIMAGEDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0000b\u0001\u0000\u0000\u0001\u0000\u0000\u0011DrawingDisplayCls\u0016Upp::DrawingDisplayCls\u0016Upp::DrawingDisplayCls\"DrawingDisplayCls : public Display\u0003Upp\u0011DRAWINGDISPLAYCLS\u0016Upp::DrawingDisplayCls\u0016UPP::DRAWINGDISPLAYCLS\fUpp::Display\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000^\u0001\u0000\u0000\u0001\u0000\u0000\u0000^\u0001\u0000\u0000;\u0000\u0000\u0000_\u0001\u0000\u0000\u0000\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constTUpp::DrawingDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const]void Paint(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0016Upp::DrawingDisplayCls\u0016UPP::DRAWINGDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000`\u0001\u0000\u0000\u0001\u0000\u0000\u0000`\u0001\u0000\u0000.\u0000\u0000\u0000`\u0001\u0000\u0000\u0000\u0001\u0000\nGetStdSize\u001ASize (const Value &) const5Upp::DrawingDisplayCls::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u0016Upp::DrawingDisplayCls\u0016UPP::DRAWINGDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000a\u0001\u0000\u0000\u0001\u0000\u0000\u0000a\u0001\u0000\u0000=\u0000\u0000\u0000a\u0001\u0000\u0000\u0000\u0001\u0000\tRatioSize$Size (const Value &, int, int) const<Upp::DrawingDisplayCls::RatioSize(const Value&,int,int)const4Size RatioSize(const Value& q, int cx, int cy) const\u0003Upp\tRATIOSIZE\u0016Upp::DrawingDisplayCls\u0016UPP::DRAWINGDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000d\u0001\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0000\u0000\u0001\u0000\u0000\u0000g\u0001\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constTUpp::DrawingDisplayCls::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)constMvoid Paint(Draw& w, const Rect& r, const Value& q, Color, Color, dword) const\u0003Upp\u0005PAINT\u0016Upp::DrawingDisplayCls\u0016UPP::DRAWINGDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000i\u0001\u0000\u0000\u0000\u0000\u0000\u0000i\u0001\u0000\u0000\u0001\u0000\u0000\u0000k\u0001\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) const5Upp::DrawingDisplayCls::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u0016Upp::DrawingDisplayCls\u0016UPP::DRAWINGDISPLAYCLS\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\u0000o\u0001\u0000\u0000\u0001\u0001\u0000\tRatioSize$Size (const Value &, int, int) const<Upp::DrawingDisplayCls::RatioSize(const Value&,int,int)const4Size RatioSize(const Value& q, int cx, int cy) const\u0003Upp\tRATIOSIZE\u0016Upp::DrawingDisplayCls\u0016UPP::DRAWINGDISPLAYCLS\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000q\u0001\u0000\u0000\u0000\u0000\u0000\u0000q\u0001\u0000\u0000G\u0000\u0000\u0000q\u0001\u0000\u0000\u0001\u0000\u0000\u000EDrawingDisplay\u0011const Display &()\u0015Upp::DrawingDisplay()\u001Fconst Display& DrawingDisplay()\u0003Upp\u000EDRAWINGDISPLAY\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000s\u0001\u0000\u0000\u0000\u0000\u0000\u0000s\u0001\u0000\u0000\u0001\u0000\u0000\u0000v\u0001\u0000\u0000\u0001\u0001\u0000\u000FPaintBackgroundEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) const\\Upp::DisplayWithIcon::PaintBackground(Draw&,const Rect&,const Value&,Color,Color,dword)constgvoid PaintBackground(Draw& w, const Rect& r, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u000FPAINTBACKGROUND\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000x\u0001\u0000\u0000\u0000\u0000\u0000\u0000x\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0001\u0000\u0005PaintEvoid (Draw &, const Rect &, const Value &, Color, Color, dword) constRUpp::DisplayWithIcon::Paint(Draw&,const Rect&,const Value&,Color,Color,dword)const^void Paint(Draw& w, const Rect& r0, const Value& q, Color ink, Color paper, dword style) const\u0003Upp\u0005PAINT\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0001\u0000\nGetStdSize\u001ASize (const Value &) const3Upp::DisplayWithIcon::GetStdSize(const Value&)const%Size GetStdSize(const Value& q) const\u0003Upp\nGETSTDSIZE\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0018\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000FDisplayWithIcon\avoid ()'Upp::DisplayWithIcon::DisplayWithIcon()\u0011DisplayWithIcon()\u0003Upp\u000FDISPLAYWITHICON\u0014Upp::DisplayWithIcon\u0014UPP::DISPLAYWITHICON\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\nGetStdSize\rSize () const!Upp::PaintRect::GetStdSize()const\u0017Size GetStdSize() const\u0003Upp\nGETSTDSIZE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tRatioSize\u0015Size (int, int) const'Upp::PaintRect::RatioSize(int,int)const$Size RatioSize(int cx, int cy) const\u0003Upp\tRATIOSIZE\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0005Paint6void (Draw &, const Rect &, Color, Color, dword) const?Upp::PaintRect::Paint(Draw&,const Rect&,Color,Color,dword)constlvoid Paint(Draw& w, const Rect& r, Color ink = SColorText, Color paper = SColorPaper, dword style = 0) const\u0003Upp\u0005PAINT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000¡\u0001\u0000\u0000\u0000\u0000\u0000\u0000¡\u0001\u0000\u0000\u0001\u0000\u0000\u0000¤\u0001\u0000\u0000\u0001\u0000\u0000\u0005Paint<void (Draw &, int, int, int, int, Color, Color, dword) constCUpp::PaintRect::Paint(Draw&,int,int,int,int,Color,Color,dword)const{void Paint(Draw& w, int x, int y, int cx, int cy, Color ink = SColorText, Color paper = SColorPaper, dword style = 0) const\u0003Upp\u0005PAINT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0018\u0000\u0000\u0000\v\u0000\u0000\u0000¦\u0001\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000\u0001\u0000\u0000\u0000¨\u0001\u0000\u0000\u0001\u0000\u0000\tPaintRect\avoid ()\u001BUpp::PaintRect::PaintRect()\vPaintRect()\u0003Upp\tPAINTRECT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0018\u0000\u0000\u0000\v\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\tPaintRect\u0016void (const Display &))Upp::PaintRect::PaintRect(const Display&)\"PaintRect(const Display& _display)\u0003Upp\tPAINTRECT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000\u0018\u0000\u0000\u0000\v\u0000\u0000\u0000®\u0001\u0000\u0000\u0000\u0000\u0000\u0000®\u0001\u0000\u0000\u0001\u0000\u0000\u0000±\u0001\u0000\u0000\u0001\u0000\u0000\tPaintRect%void (const Display &, const Value &)6Upp::PaintRect::PaintRect(const Display&,const Value&)5PaintRect(const Display& _display, const Value& _val)\u0003Upp\tPAINTRECT\u000EUpp::PaintRect\u000EUPP::PAINTRECT\u0000\u0000end\u0000£D\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Image.cpp","value":"data5õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\bScanKind\fint () const!Upp::ImageBuffer::ScanKind()const\u0014int ScanKind() const\u0003Upp\bSCANKIND\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\vSetHotSpots\u0014void (const Image &)+Upp::ImageBuffer::SetHotSpots(const Image&)\"void SetHotSpots(const Image& src)\u0003Upp\vSETHOTSPOTS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\u000Fvoid (int, int)!Upp::ImageBuffer::Create(int,int)\u001Bvoid Create(int cx, int cy)\u0003Upp\u0006CREATE\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\tInitAttrs\avoid ()\u001DUpp::ImageBuffer::InitAttrs()\u0010void InitAttrs()\u0003Upp\tINITATTRS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\tCopyAttrs\u001Avoid (const ImageBuffer &)/Upp::ImageBuffer::CopyAttrs(const ImageBuffer&)&void CopyAttrs(const ImageBuffer& img)\u0003Upp\tCOPYATTRS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\tCopyAttrs\u0014void (const Image &))Upp::ImageBuffer::CopyAttrs(const Image&) void CopyAttrs(const Image& img)\u0003Upp\tCOPYATTRS\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\bDeepCopy\u001Avoid (const ImageBuffer &).Upp::ImageBuffer::DeepCopy(const ImageBuffer&)%void DeepCopy(const ImageBuffer& img)\u0003Upp\bDEEPCOPY\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set\u000Evoid (Image &)\u001DUpp::ImageBuffer::Set(Image&)\u0014void Set(Image& img)\u0003Upp\u0003SET\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\toperator=\u000Evoid (Image &)#Upp::ImageBuffer::operator=(Image&)\rvoid operator\u0003Upp\tOPERATOR=\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000l\u0000\u0000\u0000\u0000\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\toperator=\u0014void (ImageBuffer &))Upp::ImageBuffer::operator=(ImageBuffer&)\rvoid operator\u0003Upp\tOPERATOR=\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\vImageBuffer\u000Evoid (Image &)%Upp::ImageBuffer::ImageBuffer(Image&)\u0017ImageBuffer(Image& img)\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\vImageBuffer\u0014void (ImageBuffer &)+Upp::ImageBuffer::ImageBuffer(ImageBuffer&)\u001BImageBuffer(ImageBuffer& b)\u0003Upp\vIMAGEBUFFER\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006SetDPI\vvoid (Size)\u001EUpp::ImageBuffer::SetDPI(Size)\u0015void SetDPI(Size dpi)\u0003Upp\u0006SETDPI\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006GetDPI\aSize ()\u001AUpp::ImageBuffer::GetDPI()\rSize GetDPI()\u0003Upp\u0006GETDPI\u0010Upp::ImageBuffer\u0010UPP::IMAGEBUFFER\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set\u0014void (ImageBuffer &)\u001DUpp::Image::Set(ImageBuffer&)\u0018void Set(ImageBuffer& b)\u0003Upp\u0003SET\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u0013Upp::Image::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\toperator=\u0016Image &(ImageBuffer &)#Upp::Image::operator=(ImageBuffer&)\u000FImage& operator\u0003Upp\tOPERATOR=\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¢\u0000\u0000\u0000\u0000\u0000\u0000\u0000¢\u0000\u0000\u0000\u0001\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\toperator=\u0016Image &(const Image &)#Upp::Image::operator=(const Image&)\u000FImage& operator\u0003Upp\tOPERATOR=\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000­\u0000\u0000\u0000\u0000\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\nGetHotSpot\u000EPoint () const\u001DUpp::Image::GetHotSpot()const\u0018Point GetHotSpot() const\u0003Upp\nGETHOTSPOT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000²\u0000\u0000\u0000\u0000\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\nGet2ndSpot\u000EPoint () const\u001DUpp::Image::Get2ndSpot()const\u0018Point Get2ndSpot() const\u0003Upp\nGET2NDSPOT\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000·\u0000\u0000\u0000\u0000\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\aGetDots\rSize () const\u001AUpp::Image::GetDots()const\u0014Size GetDots() const\u0003Upp\aGETDOTS\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0006GetDPI\rSize () const\u0019Upp::Image::GetDPI()const\u0013Size GetDPI() const\u0003Upp\u0006GETDPI\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\rGetKindNoScan\fint () const Upp::Image::GetKindNoScan()const\u0019int GetKindNoScan() const\u0003Upp\rGETKINDNOSCAN\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000È\u0000\u0000\u0000\u0000\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\aGetKind\u0006int ()\u001BUpp::Image::Data::GetKind()\rint GetKind()\u0003Upp\aGETKIND\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\aGetKind\fint () const\u001AUpp::Image::GetKind()const\u0013int GetKind() const\u0003Upp\aGETKIND\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000×\u0000\u0000\u0000\u0000\u0000\u0000\u0000×\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\tSerialize\u000Fvoid (Stream &)\u001EUpp::Image::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\nUpp::Image\nUPP::IMAGE\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\t\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0001\u000Es__sF12_266_fn\avoid ()\u0015Upp::s__sF12_266_fn()\u001Cstatic void s__sF12_266_fn()\u0003Upp\u000ES__SF12_266_FN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\t\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0001\vs__sF12_266\rUpp::Callinit\u0010Upp::s__sF12_266istatic Upp::Callinit s__sF12_266(s__sF12_266_fn, \"C:\\\\Users\\\\sblo\\\\ai-upp\\\\uppsrc\\\\Draw\\\\Image.cpp\", 266)\u0003Upp\vS__SF12_266\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0001\u000Es__sF12_266_fn\avoid ()\u0015Upp::s__sF12_266_fn()\u001Cstatic void s__sF12_266_fn()\u0003Upp\u000ES__SF12_266_FN\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\noperator==\u001Abool (const Image &) const)Upp::Image::operator==(const Image&)const\rbool operator\u0003Upp\nOPERATOR==\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\noperator!=\u001Abool (const Image &) const)Upp::Image::operator!=(const Image&)const\u000Ebool operator!\u0003Upp\nOPERATOR!=\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000\fGetHashValue\u000Fhash_t () const\u001FUpp::Image::GetHashValue()const\u001Bhash_t GetHashValue() const\u0003Upp\fGETHASHVALUE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\a\u0000\u0000\u0000\"\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\u0005Image\u0014void (const Image &)\u001FUpp::Image::Image(const Image&)\u0017Image(const Image& img)\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\a\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0005Image\u0012void (Image (*)())\u001DUpp::Image::Image(Image(*)())\u0014Image(Image (*fn)())\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\u0005Image\u0014void (const Value &)\u001FUpp::Image::Image(const Value&)\u0017Image(const Value& src)\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\a\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\u00008\u0001\u0000\u0000\u0001\u0000\u0000\u0005Image\u0014void (ImageBuffer &)\u001FUpp::Image::Image(ImageBuffer&)\u0015Image(ImageBuffer& b)\u0003Upp\u0005IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0019\u0000\u0000\u0000\a\u0000\u0000\u0000:\u0001\u0000\u0000\u0000\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u0006~Image\u0010void () noexcept\u000FUpp::Image::~()\b~Image()\u0003Upp\u0006~IMAGE\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000@\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\u0000C\u0001\u0000\u0000\u0001\u0000\u0000\bToString\u000FString () const\u001BUpp::Image::ToString()const\u0017String ToString() const\u0003Upp\bTOSTRING\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000P\u0001\u0000\u0000\u0001\u0000\u0000\u0004Data\u0014void (ImageBuffer &)$Upp::Image::Data::Data(ImageBuffer&)\u0014Data(ImageBuffer& b)\u0003Upp\u0004DATA\u0010Upp::Image::Data\u0010UPP::IMAGE::DATA\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000R\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0001\u0000\u0000\u0001\u0000\u0000\u0000V\u0001\u0000\u0000\u0001\u0000\u0000\nSetAuxData\rvoid (uint64)\u001EUpp::Image::SetAuxData(uint64)\u001Dvoid SetAuxData(uint64 adata)\u0003Upp\nSETAUXDATA\nUpp::Image\nUPP::IMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\u0000X\u0001\u0000\u0000\u0001\u0000\u0000\u0000[\u0001\u0000\u0000\u0001\u0000\u0000\nGetAuxData\u000Fuint64 () const\u001DUpp::Image::GetAuxData()const\u0019uint64 GetAuxData() const\u0003Upp\nGETAUXDATA\nUpp::Image\nUPP::IMAGE\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000\u0000\u0000]\u0001\u0000\u0000\u0001\u0000\u0000\u0000a\u0001\u0000\u0000\u0001\u0000\u0001\tsMultiply;void (ImageBuffer &, int (*)(RGBA *, const RGBA *, size_t))=Upp::sMultiply(ImageBuffer&,int(*)(RGBA*,const RGBA*,size_t))Nstatic void sMultiply(ImageBuffer& b, int (*op)(RGBA *, const RGBA *, size_t))\u0003Upp\tSMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u0001\u0000\u0000\u0000f\u0001\u0000\u0000\u0001\u0000\u0000\vPremultiply\u0014void (ImageBuffer &)\u001EUpp::Premultiply(ImageBuffer&) void Premultiply(ImageBuffer& b)\u0003Upp\vPREMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000h\u0001\u0000\u0000\u0000\u0000\u0000\u0000h\u0001\u0000\u0000\u0001\u0000\u0000\u0000k\u0001\u0000\u0000\u0001\u0000\u0000\nUnmultiply\u0014void (ImageBuffer &)\u001DUpp::Unmultiply(ImageBuffer&)\u001Fvoid Unmultiply(ImageBuffer& b)\u0003Upp\nUNMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\u0000v\u0001\u0000\u0000\u0001\u0000\u0001\tsMultiply<Image (const Image &, int (*)(RGBA *, const RGBA *, size_t))=Upp::sMultiply(const Image&,int(*)(RGBA*,const RGBA*,size_t))Qstatic Image sMultiply(const Image& img, int (*op)(RGBA *, const RGBA *, size_t))\u0003Upp\tSMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000x\u0001\u0000\u0000\u0000\u0000\u0000\u0000x\u0001\u0000\u0000\u0001\u0000\u0000\u0000{\u0001\u0000\u0000\u0001\u0000\u0000\vPremultiply\u0015Image (const Image &)\u001EUpp::Premultiply(const Image&)#Image Premultiply(const Image& img)\u0003Upp\vPREMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000\u0000}\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\nUnmultiply\u0015Image (const Image &)\u001DUpp::Unmultiply(const Image&)\"Image Unmultiply(const Image& img)\u0003Upp\nUNMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000¨\u0001\u0000\u0000\u0001\u0000\u0000\u0012StoreImageAsString\u0016String (const Image &)%Upp::StoreImageAsString(const Image&)+String StoreImageAsString(const Image& img)\u0003Upp\u0012STOREIMAGEASSTRING\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0000ß\u0001\u0000\u0000\u0001\u0000\u0000\u0013LoadImageFromString\u0016Image (const String &)'Upp::LoadImageFromString(const String&),Image LoadImageFromString(const String& src)\u0003Upp\u0013LOADIMAGEFROMSTRING\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000á\u0001\u0000\u0000\u0000\u0000\u0000\u0000á\u0001\u0000\u0000\u0001\u0000\u0000\u0000ë\u0001\u0000\u0000\u0001\u0000\u0000\u0012GetImageStringSize\u0015Size (const String &)&Upp::GetImageStringSize(const String&)*Size GetImageStringSize(const String& src)\u0003Upp\u0012GETIMAGESTRINGSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000í\u0001\u0000\u0000\u0000\u0000\u0000\u0000í\u0001\u0000\u0000\u0001\u0000\u0000\u0000÷\u0001\u0000\u0000\u0001\u0000\u0000\u0012GetImageStringDots\u0015Size (const String &)&Upp::GetImageStringDots(const String&)*Size GetImageStringDots(const String& src)\u0003Upp\u0012GETIMAGESTRINGDOTS\u0003Upp\u0003UPP\u0000\u0000end\u0000 \u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageBlit.cpp","value":"data\u0019\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\tUnpackRLE'const byte *(RGBA *, const byte *, int)%Upp::UnpackRLE(RGBA*,const byte*,int)6const byte *UnpackRLE(RGBA *t, const byte *s, int len)\u0003Upp\tUNPACKRLE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\aPackRLE\u001AString (const RGBA *, int)\u001DUpp::PackRLE(const RGBA*,int)&String PackRLE(const RGBA *s, int len)\u0003Upp\aPACKRLE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\vPremultiply\"int (RGBA *, const RGBA *, size_t)*Upp::Premultiply(RGBA*,const RGBA*,size_t)3int Premultiply(RGBA *t, const RGBA *s, size_t len)\u0003Upp\vPREMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\bFillDown\u001Dvoid (RGBA *, int, RGBA, int)!Upp::FillDown(RGBA*,int,RGBA,int)2void FillDown(RGBA *t, int linecy, RGBA c, int cy)\u0003Upp\bFILLDOWN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\num_table__\bint[256]\u000FUpp::um_table__\u0013int um_table__[256]\u0003Upp\nUM_TABLE__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nUnmultiply\"int (RGBA *, const RGBA *, size_t))Upp::Unmultiply(RGBA*,const RGBA*,size_t)2int Unmultiply(RGBA *t, const RGBA *s, size_t len)\u0003Upp\nUNMULTIPLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\nAlphaBlend void (RGBA *, const RGBA *, int)&Upp::AlphaBlend(RGBA*,const RGBA*,int)0void AlphaBlend(RGBA *t, const RGBA *s, int len)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000­\u0000\u0000\u0000\u0000\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0010AlphaBlendOpaque void (RGBA *, const RGBA *, int),Upp::AlphaBlendOpaque(RGBA*,const RGBA*,int)6void AlphaBlendOpaque(RGBA *t, const RGBA *s, int len)\u0003Upp\u0010ALPHABLENDOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\nAlphaBlend'void (RGBA *, const RGBA *, int, Color),Upp::AlphaBlend(RGBA*,const RGBA*,int,Color)=void AlphaBlend(RGBA *t, const RGBA *s, int len, Color color)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\u0010AlphaBlendOpaque'void (RGBA *, const RGBA *, int, Color)2Upp::AlphaBlendOpaque(RGBA*,const RGBA*,int,Color)Cvoid AlphaBlendOpaque(RGBA *t, const RGBA *s, int len, Color color)\u0003Upp\u0010ALPHABLENDOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\u0018AlphaBlendStraightOpaque void (RGBA *, const RGBA *, int)4Upp::AlphaBlendStraightOpaque(RGBA*,const RGBA*,int)>void AlphaBlendStraightOpaque(RGBA *t, const RGBA *s, int len)\u0003Upp\u0018ALPHABLENDSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ü\u0000\u0000\u0000\u0001\u0000\u0000\u0018AlphaBlendStraightOpaque%void (RGBA *, const RGBA *, int, int)8Upp::AlphaBlendStraightOpaque(RGBA*,const RGBA*,int,int)Ivoid AlphaBlendStraightOpaque(RGBA *t, const RGBA *s, int len, int alpha)\u0003Upp\u0018ALPHABLENDSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000þ\u0000\u0000\u0000\u0000\u0000\u0000\u0000þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0000\asBlends\fUpp::sBlends\fUpp::sBlends\asBlends\u0003Upp\aSBLENDS\fUpp::sBlends\fUPP::SBLENDS\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0000\u0000\u0000\b\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0001m\u0005int16\u000FUpp::sBlends::m\aint16 m\u0003Upp\u0001M\fUpp::sBlends\fUPP::SBLENDS\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\b\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0001a\u0004byte\u000FUpp::sBlends::a\u0006byte a\u0003Upp\u0001A\fUpp::sBlends\fUPP::SBLENDS\u0000\u0000\t\u0000\u0000\u0000\t\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\asblends\tsBlends *\fUpp::sblends\u0010sBlends *sblends\u0003Upp\aSBLENDS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\u000FsOnceInitBlends\avoid ()\u0016Upp::sOnceInitBlends()\u0016void sOnceInitBlends()\u0003Upp\u000FSONCEINITBLENDS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\vsInitBlends\avoid ()\u0012Upp::sInitBlends()\u0012void sInitBlends()\u0003Upp\vSINITBLENDS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0012AlphaBlendStraight void (RGBA *, const RGBA *, int).Upp::AlphaBlendStraight(RGBA*,const RGBA*,int)8void AlphaBlendStraight(RGBA *b, const RGBA *f, int len)\u0003Upp\u0012ALPHABLENDSTRAIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\u0018AlphaBlendOverBgStraight\u0018void (RGBA *, RGBA, int)-Upp::AlphaBlendOverBgStraight(RGBA*,RGBA,int)8void AlphaBlendOverBgStraight(RGBA *b, RGBA bg, int len)\u0003Upp\u0018ALPHABLENDOVERBGSTRAIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00007\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\u0012AlphaBlendStraight'void (RGBA *, const RGBA *, int, Color)4Upp::AlphaBlendStraight(RGBA*,const RGBA*,int,Color)Evoid AlphaBlendStraight(RGBA *b, const RGBA *f, int len, Color color)\u0003Upp\u0012ALPHABLENDSTRAIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0001\u0000\u0000\u0001\u0000\u0000\u0000S\u0001\u0000\u0000\u0001\u0000\u0000\u000EGetChMaskPos32\vint (dword)\u001AUpp::GetChMaskPos32(dword)\u001Eint GetChMaskPos32(dword mask)\u0003Upp\u000EGETCHMASKPOS32\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0001\u0000\u0000\u0001\u0000\u0000\u0000`\u0001\u0000\u0000\u0001\u0000\u0000\u0013TransformComponentsXvoid (RGBA *, const RGBA *, int, const byte *, const byte *, const byte *, const byte *)cUpp::TransformComponents(RGBA*,const RGBA*,int,const byte[],const byte[],const byte[],const byte[])yvoid TransformComponents(RGBA *t, const RGBA *s, int len, const byte r[], const byte g[], const byte b[], const byte a[])\u0003Upp\u0013TRANSFORMCOMPONENTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000b\u0001\u0000\u0000\u0000\u0000\u0000\u0000b\u0001\u0000\u0000\u0001\u0000\u0000\u0000h\u0001\u0000\u0000\u0001\u0000\u0000\u0012MultiplyComponents*void (RGBA *, const RGBA *, int, int, int)6Upp::MultiplyComponents(RGBA*,const RGBA*,int,int,int)Pvoid MultiplyComponents(RGBA *t, const RGBA *s, int len, int num, int den = 256)\u0003Upp\u0012MULTIPLYCOMPONENTS\u0003Upp\u0003UPP\u0000\u0000end\u0000È\u0011\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\RasterFormat.cpp","value":"data\u0016\b\u0000\u0000\u0000\v\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0001\nsMaskPos16\vint (dword)\u0016Upp::sMaskPos16(dword)!static int sMaskPos16(dword mask)\u0003Upp\nSMASKPOS16\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\aSet16le\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set16le(dword,dword,dword)6void Set16le(dword _rmask, dword _gmask, dword _bmask)\u0003Upp\aSET16LE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\aSet16be\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set16be(dword,dword,dword)6void Set16be(dword _rmask, dword _gmask, dword _bmask)\u0003Upp\aSET16BE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\aSet24le\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set24le(dword,dword,dword)3void Set24le(dword rmask, dword gmask, dword bmask)\u0003Upp\aSET24LE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\aSet32le!void (dword, dword, dword, dword)3Upp::RasterFormat::Set32le(dword,dword,dword,dword)Dvoid Set32le(dword rmask, dword gmask, dword bmask, dword amask = 0)\u0003Upp\aSET32LE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\aSet24be\u001Avoid (dword, dword, dword)-Upp::RasterFormat::Set24be(dword,dword,dword)3void Set24be(dword rmask, dword gmask, dword bmask)\u0003Upp\aSET24BE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\aSet32be!void (dword, dword, dword, dword)3Upp::RasterFormat::Set32be(dword,dword,dword,dword)Dvoid Set32be(dword rmask, dword gmask, dword bmask, dword amask = 0)\u0003Upp\aSET32BE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u000FSet32leStraight!void (dword, dword, dword, dword);Upp::RasterFormat::Set32leStraight(dword,dword,dword,dword)Hvoid Set32leStraight(dword rmask, dword gmask, dword bmask, dword amask)\u0003Upp\u000FSET32LESTRAIGHT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u000FSet32beStraight!void (dword, dword, dword, dword);Upp::RasterFormat::Set32beStraight(dword,dword,dword,dword)Hvoid Set32beStraight(dword rmask, dword gmask, dword bmask, dword amask)\u0003Upp\u000FSET32BESTRAIGHT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\aSetRGBA\avoid ()\u001CUpp::RasterFormat::SetRGBA()\u000Evoid SetRGBA()\u0003Upp\aSETRGBA\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u000FSetRGBAStraight\avoid ()$Upp::RasterFormat::SetRGBAStraight()\u0016void SetRGBAStraight()\u0003Upp\u000FSETRGBASTRAIGHT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0006IsRGBA\fint () const Upp::RasterFormat::IsRGBA()const\u0012int IsRGBA() const\u0003Upp\u0006ISRGBA\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0000\u0000\u0000=\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0001\u0004bits\bbyte[16]\tUpp::bits\u0014static byte bits[16]\u0003Upp\u0004BITS\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\fGetByteCount\u000Fint (int) const)Upp::RasterFormat::GetByteCount(int)const\u001Eint GetByteCount(int cx) const\u0003Upp\fGETBYTECOUNT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000q\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0006GetBpp\fint () const Upp::RasterFormat::GetBpp()const\u0012int GetBpp() const\u0003Upp\u0006GETBPP\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\bHasAlpha\rbool () const\"Upp::RasterFormat::HasAlpha()const\u0015bool HasAlpha() const\u0003Upp\bHASALPHA\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\rGetColorCount\fint () const'Upp::RasterFormat::GetColorCount()const\u0019int GetColorCount() const\u0003Upp\rGETCOLORCOUNT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000FGetPaletteCount\fint () const)Upp::RasterFormat::GetPaletteCount()const\u001Bint GetPaletteCount() const\u0003Upp\u000FGETPALETTECOUNT\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bTailBits:void (RGBA *, const byte *, int, byte, byte, const RGBA *)HUpp::RasterFormat::TailBits(RGBA*,const byte*,int,byte,byte,const RGBA*)[void TailBits(RGBA *t, const byte *src, int cx, byte andm, byte shift, const RGBA *palette)\u0003Upp\bTAILBITS\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000ETailBitsMSB1st@void (RGBA *, const byte *, int, byte, byte, byte, const RGBA *)SUpp::RasterFormat::TailBitsMSB1st(RGBA*,const byte*,int,byte,byte,byte,const RGBA*)nvoid TailBitsMSB1st(RGBA *t, const byte *src, int cx, byte shift1, byte andm, byte shift, const RGBA *palette)\u0003Upp\u000ETAILBITSMSB1ST\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0001\u0000\u0000\u0001\u0000\u0000\u0004Read4void (RGBA *, const byte *, int, const RGBA *) const?Upp::RasterFormat::Read(RGBA*,const byte*,int,const RGBA*)constDvoid Read(RGBA *t, const byte *s, int cx, const RGBA *palette) const\u0003Upp\u0004READ\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000end\u0000A\u0011\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\RasterWrite.cpp","value":"data\u0004\t\u0000\u0000\u0000\f\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\num_table__\bint[256]\u000FUpp::um_table__\u0013int um_table__[256]\u0003Upp\nUM_TABLE__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u000EsInitUmTable__\avoid ()\u0015Upp::sInitUmTable__()\u0015void sInitUmTable__()\u0003Upp\u000ESINITUMTABLE__\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0001\u0000\u0000\u0001\u0000\u0000\u0005Write9void (byte *, const RGBA *, int, const PaletteCv *) constEUpp::RasterFormat::Write(byte*,const RGBA*,int,const PaletteCv*)constHvoid Write(byte *t, const RGBA *s, int cx, const PaletteCv *palcv) const\u0003Upp\u0005WRITE\u0011Upp::RasterFormat\u0011UPP::RASTERFORMAT\u0000\u0000end\u0000\u0016\u0002\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Palette.cpp","value":"data7õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0006sPalCv\vUpp::sPalCv\vUpp::sPalCv\u0006sPalCv\u0003Upp\u0006SPALCV\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0013\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0006cv_pal\vPaletteCv &\u0013Upp::sPalCv::cv_pal\u0011PaletteCv& cv_pal\u0003Upp\u0006CV_PAL\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0014\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\apalette\fconst RGBA *\u0014Upp::sPalCv::palette\u0013const RGBA *palette\u0003Upp\aPALETTE\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0014\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\ancolors\u0003int\u0014Upp::sPalCv::ncolors\vint ncolors\u0003Upp\aNCOLORS\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u001F\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0004done\bbool[64]\u0011Upp::sPalCv::done\rbool done[64]\u0003Upp\u0004DONE\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0005Ginfo\u0012Upp::sPalCv::Ginfo\u0012Upp::sPalCv::Ginfo\u0005Ginfo\u0003Upp\u0005GINFO\u0012Upp::sPalCv::Ginfo\u0012UPP::SPALCV::GINFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0002\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0004dist\u0003int\u0018Upp::sPalCv::Ginfo::dist\bint dist\u0003Upp\u0004DIST\u0012Upp::sPalCv::Ginfo\u0012UPP::SPALCV::GINFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\u0002\u0000\u0000\u0000\r\u0000\u0000\u0000\t\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0001g\u0004byte\u0015Upp::sPalCv::Ginfo::g\u0006byte g\u0003Upp\u0001G\u0012Upp::sPalCv::Ginfo\u0012UPP::SPALCV::GINFO\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0002ii\u0004byte\u0016Upp::sPalCv::Ginfo::ii\abyte ii\u0003Upp\u0002II\u0012Upp::sPalCv::Ginfo\u0012UPP::SPALCV::GINFO\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000%\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0002_n\u000FUpp::sPalCv::_n\u000FUpp::sPalCv::_n\aenum _n\u0003Upp\u0002_N\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\a\u0000\u0000\u0000\v\u0000\u0000\u0000\u0011\u0000\u0000\u0000\v\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0004BINS\u000FUpp::sPalCv::_n\u0011Upp::sPalCv::BINS\u0004BINS\u0003Upp\u0004BINS\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\a\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0011\u0000\u0000\u0000#\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\bBINSHIFT\u000FUpp::sPalCv::_n\u0015Upp::sPalCv::BINSHIFT\bBINSHIFT\u0003Upp\bBINSHIFT\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0004line\u000EGinfo[16][256]\u0011Upp::sPalCv::line\u0013Ginfo line[16][256]\u0003Upp\u0004LINE\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0005eline\vGinfo *[16]\u0012Upp::sPalCv::eline\u0010Ginfo *eline[16]\u0003Upp\u0005ELINE\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0005gline\u0006byte *\u0012Upp::sPalCv::gline\vbyte *gline\u0003Upp\u0005GLINE\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000:\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0001\u0002Sq\u000Eint (int, int)\u0018Upp::sPalCv::Sq(int,int)\u001Bstatic int Sq(int a, int b)\u0003Upp\u0002SQ\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\aSetLine\u000Fvoid (int, int)\u001DUpp::sPalCv::SetLine(int,int)\u001Avoid SetLine(int r, int b)\u0003Upp\aSETLINE\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0003Get\tint (int)\u0015Upp::sPalCv::Get(int)\u000Eint Get(int g)\u0003Upp\u0003GET\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000<\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0006sPalCv%void (const RGBA *, int, PaletteCv &)/Upp::sPalCv::sPalCv(const RGBA*,int,PaletteCv&);sPalCv(const RGBA *palette, int ncolors, PaletteCv& cv_pal)\u0003Upp\u0006SPALCV\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000@\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0006sPalCv6void (const RGBA *, int, PaletteCv &, int (*)[64][16])?Upp::sPalCv::sPalCv(const RGBA*,int,PaletteCv&,int[32][64][16])VsPalCv(const RGBA *palette, int ncolors, PaletteCv& cv_pal, int histogram[32][64][16])\u0003Upp\u0006SPALCV\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\aSetLine\u000Fvoid (int, int)\u001DUpp::sPalCv::SetLine(int,int)\u001Avoid SetLine(int r, int b)\u0003Upp\aSETLINE\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\tint (int)\u0015Upp::sPalCv::Get(int)\u000Eint Get(int g)\u0003Upp\u0003GET\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0018\u0000\u0000\u0000\b\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0006sPalCv%void (const RGBA *, int, PaletteCv &)/Upp::sPalCv::sPalCv(const RGBA*,int,PaletteCv&);sPalCv(const RGBA *palette, int ncolors, PaletteCv& cv_pal)\u0003Upp\u0006SPALCV\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0018\u0000\u0000\u0000\b\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0006sPalCv6void (const RGBA *, int, PaletteCv &, int (*)[64][16])?Upp::sPalCv::sPalCv(const RGBA*,int,PaletteCv&,int[32][64][16])VsPalCv(const RGBA *palette, int ncolors, PaletteCv& cv_pal, int histogram[32][64][16])\u0003Upp\u0006SPALCV\vUpp::sPalCv\vUPP::SPALCV\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tsPalMaker\u000EUpp::sPalMaker\u000EUpp::sPalMaker\tsPalMaker\u0003Upp\tSPALMAKER\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u0000?\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\thistogram\u000Fint[32][64][16]\u0019Upp::sPalMaker::histogram\u0019int histogram[32][64][16]\u0003Upp\tHISTOGRAM\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0016\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\ncolorcount\u0003int\u001AUpp::sPalMaker::colorcount\u000Eint colorcount\u0003Upp\nCOLORCOUNT\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Dim\u0013Upp::sPalMaker::Dim\u0013Upp::sPalMaker::Dim\u0003Dim\u0003Upp\u0003DIM\u0013Upp::sPalMaker::Dim\u0013UPP::SPALMAKER::DIM\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000}\u0000\u0000\u0000\u0002\u0000\u0000\u0000}\u0000\u0000\u0000\a\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0001l\u0003int\u0016Upp::sPalMaker::Dim::l\u0005int l\u0003Upp\u0001L\u0013Upp::sPalMaker::Dim\u0013UPP::SPALMAKER::DIM\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000}\u0000\u0000\u0000\u0002\u0000\u0000\u0000}\u0000\u0000\u0000\n\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0001h\u0003int\u0016Upp::sPalMaker::Dim::h\u0005int h\u0003Upp\u0001H\u0013Upp::sPalMaker::Dim\u0013UPP::SPALMAKER::DIM\u0000\u0000\u001A\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u007F\u0000\u0000\u0000\"\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\foperator int\u0006int ()#Upp::sPalMaker::Dim::operator int()\u000Eoperator int()\u0003Upp\fOPERATOR INT\u0013Upp::sPalMaker::Dim\u0013UPP::SPALMAKER::DIM\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000D(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Palette.cpp:130:2)TUpp::sPalMaker::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Palette.cpp:130:2)FUpp::sPalMaker::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Palette.)\u0004enum\u0003UppD(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\PALETTE.CPP:130:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001GTUpp::sPalMaker::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Palette.cpp:130:2)\u0011Upp::sPalMaker::G\u0001G\u0003Upp\u0001G\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\a\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001RTUpp::sPalMaker::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Palette.cpp:130:2)\u0011Upp::sPalMaker::R\u0001R\u0003Upp\u0001R\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\a\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001BTUpp::sPalMaker::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Palette.cpp:130:2)\u0011Upp::sPalMaker::B\u0001B\u0003Upp\u0001B\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Copy\u0013void (Dim *, Dim *)\u001FUpp::sPalMaker::Copy(Dim*,Dim*)\u0019void Copy(Dim *d, Dim *s)\u0003Upp\u0004COPY\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Box\u0013Upp::sPalMaker::Box\u0013Upp::sPalMaker::Box\u0003Box\u0003Upp\u0003BOX\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006volume\u0003int\u001BUpp::sPalMaker::Box::volume\nint volume\u0003Upp\u0006VOLUME\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\ncolorcount\u0003int\u001FUpp::sPalMaker::Box::colorcount\u000Eint colorcount\u0003Upp\nCOLORCOUNT\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\npopulation\u0003int\u001FUpp::sPalMaker::Box::population\u000Eint population\u0003Upp\nPOPULATION\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003dim\u0006Dim[3]\u0018Upp::sPalMaker::Box::dim\nDim dim[3]\u0003Upp\u0003DIM\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005avg_r\u0003int\u001AUpp::sPalMaker::Box::avg_r\tint avg_r\u0003Upp\u0005AVG_R\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005avg_g\u0003int\u001AUpp::sPalMaker::Box::avg_g\tint avg_g\u0003Upp\u0005AVG_G\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005avg_b\u0003int\u001AUpp::sPalMaker::Box::avg_b\tint avg_b\u0003Upp\u0005AVG_B\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\noperator[]\nDim &(int)$Upp::sPalMaker::Box::operator[](int)\u0016Dim& operator[](int i)\u0003Upp\nOPERATOR[]\u0013Upp::sPalMaker::Box\u0013UPP::SPALMAKER::BOX\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006Update\u0011void (Box &, int) Upp::sPalMaker::Update(Box&,int)\u001Dvoid Update(Box& box, int ii)\u0003Upp\u0006UPDATE\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tsPalMaker\u001Cvoid (Raster &, RGBA *, int),Upp::sPalMaker::sPalMaker(Raster&,RGBA*,int)5sPalMaker(Raster& raster, RGBA *palette, int ncolors)\u0003Upp\tSPALMAKER\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\u0006Update\u0011void (Box &, int) Upp::sPalMaker::Update(Box&,int)\u001Bvoid Update(Box& x, int ii)\u0003Upp\u0006UPDATE\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000¶\u0000\u0000\u0000\u0000\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0001\u0003sRc\u0014byte (int, int, int)\u0015Upp::sRc(int,int,int)*static byte sRc(int avg, int pop, int div)\u0003Upp\u0003SRC\u0003Upp\u0003UPP\u0000\u0000\u0018\u0000\u0000\u0000\v\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\tsPalMaker\u001Cvoid (Raster &, RGBA *, int),Upp::sPalMaker::sPalMaker(Raster&,RGBA*,int)5sPalMaker(Raster& raster, RGBA *palette, int ncolors)\u0003Upp\tSPALMAKER\u000EUpp::sPalMaker\u000EUPP::SPALMAKER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0000\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u000FCreatePaletteCv%void (const RGBA *, int, PaletteCv &)0Upp::CreatePaletteCv(const RGBA*,int,PaletteCv&)Ivoid CreatePaletteCv(const RGBA *palette, int ncolors, PaletteCv& cv_pal)\u0003Upp\u000FCREATEPALETTECV\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\rCreatePalette\u001Cvoid (Raster &, RGBA *, int)%Upp::CreatePalette(Raster&,RGBA*,int)>void CreatePalette(Raster& raster, RGBA *palette, int ncolors)\u0003Upp\rCREATEPALETTE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\rCreatePalette)void (Raster &, RGBA *, int, PaletteCv &)0Upp::CreatePalette(Raster&,RGBA*,int,PaletteCv&)Mvoid CreatePalette(Raster& raster, RGBA *palette, int ncolors, PaletteCv& cv)\u0003Upp\rCREATEPALETTE\u0003Upp\u0003UPP\u0000\u0000end\u0000m \u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Raster.cpp","value":"data)\u0018\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0004Info\avoid ()\u0019Upp::Raster::Info::Info()\u0006Info()\u0003Upp\u0004INFO\u0011Upp::Raster::Info\u0011UPP::RASTER::INFO\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0001\u0000\tGetFormat\u0016const RasterFormat *()\u0018Upp::Raster::GetFormat()\u001Fconst RasterFormat *GetFormat()\u0003Upp\tGETFORMAT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0001\u0000\bSeekPage\nvoid (int)\u001AUpp::Raster::SeekPage(int)\u0017void SeekPage(int page)\u0003Upp\bSEEKPAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0001\u0000\rGetActivePage\fint () const!Upp::Raster::GetActivePage()const\u0019int GetActivePage() const\u0003Upp\rGETACTIVEPAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0001\u0000\fGetPageCount\u0006int ()\u001BUpp::Raster::GetPageCount()\u0012int GetPageCount()\u0003Upp\fGETPAGECOUNT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0001\u0000\rGetPageAspect\tint (int)\u001FUpp::Raster::GetPageAspect(int)\u001Bint GetPageAspect(int page)\u0003Upp\rGETPAGEASPECT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0001\u0000\fGetPageDelay\tint (int)\u001EUpp::Raster::GetPageDelay(int)\u001Aint GetPageDelay(int page)\u0003Upp\fGETPAGEDELAY\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0001\u0000\vGetPageRect\nRect (int)\u001DUpp::Raster::GetPageRect(int)\u0017Rect GetPageRect(int n)\u0003Upp\vGETPAGERECT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0001\u0000\u000FGetPageDisposal\tint (int)!Upp::Raster::GetPageDisposal(int)\u001Aint GetPageDisposal(int n)\u0003Upp\u000FGETPAGEDISPOSAL\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0001\u0000\vGetMetaData\u000EValue (String) Upp::Raster::GetMetaData(String)\u001CValue GetMetaData(String id)\u0003Upp\vGETMETADATA\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0001\u0000\fEnumMetaData\u0017void (Vector<String> &)\"Upp::Raster::EnumMetaData(Vector&)*void EnumMetaData(Vector<String>& id_list)\u0003Upp\fENUMMETADATA\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0004Pick\u000Evoid (Line &&)\u001FUpp::Raster::Line::Pick(Line&&)\u0013void Pick(Line&& b)\u0003Upp\u0004PICK\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\bMakeRGBA\rvoid () const\"Upp::Raster::Line::MakeRGBA()const\u0015void MakeRGBA() const\u0003Upp\bMAKERGBA\u0011Upp::Raster::Line\u0011UPP::RASTER::LINE\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000^\u0000\u0000\u0000\u0000\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000FRaster::Info ()\u0016Upp::Raster::GetInfo()\u0016Raster::Info GetInfo()\u0003Upp\aGETINFO\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0000\u0000\u0000&\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0001\u0000\u0006Create\abool ()\u0015Upp::Raster::Create()\rbool Create()\u0003Upp\u0006CREATE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000(\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0001\u0000\aIsError\abool ()\u0016Upp::Raster::IsError()\u000Ebool IsError()\u0003Upp\aISERROR\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000m\u0000\u0000\u0000-\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0001\u0000\u000FGetPaletteCount\u0006int ()\u001EUpp::Raster::GetPaletteCount()\u0015int GetPaletteCount()\u0003Upp\u000FGETPALETTECOUNT\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0000\u0000\u0000o\u0000\u0000\u00001\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0001\u0000\nGetPalette\u000Econst RGBA *()\u0019Upp::Raster::GetPalette()\u0018const RGBA *GetPalette()\u0003Upp\nGETPALETTE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000q\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bGetImage0Image (int, int, int, int, const Gate<int, int>)1Upp::Raster::GetImage(int,int,int,int,const Gate)RImage GetImage(int x, int y, int cx, int cy, const Gate<int, int> progress = Null)\u0003Upp\bGETIMAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bGetImage\u001CImage (const Gate<int, int>)!Upp::Raster::GetImage(const Gate)4Image GetImage(const Gate<int, int> progress = Null)\u0003Upp\bGETIMAGE\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0019\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\a~Raster\u0010void () noexcept\u0010Upp::Raster::~()\t~Raster()\u0003Upp\a~RASTER\vUpp::Raster\vUPP::RASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\aGetLine\u0012Raster::Line (int)\u001EUpp::ImageRaster::GetLine(int)\u001ERaster::Line GetLine(int line)\u0003Upp\aGETLINE\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\aGetSize\aSize ()\u001BUpp::ImageRaster::GetSize()\u000ESize GetSize()\u0003Upp\aGETSIZE\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000¡\u0000\u0000\u0000\u0000\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000FRaster::Info ()\u001BUpp::ImageRaster::GetInfo()\u0016Raster::Info GetInfo()\u0003Upp\aGETINFO\u0010Upp::ImageRaster\u0010UPP::IMAGERASTER\u0000\u0000\u0018\u0000\u0000\u0000\u000E\u0000\u0000\u0000ª\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\fMemoryRaster\avoid ()!Upp::MemoryRaster::MemoryRaster()\u000EMemoryRaster()\u0003Upp\fMEMORYRASTER\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000¯\u0000\u0000\u0000\u0000\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0004Load\u000Fvoid (Raster &) Upp::MemoryRaster::Load(Raster&)\u0019void Load(Raster& raster)\u0003Upp\u0004LOAD\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u001B\u0000\u0000\u0000É\u0000\u0000\u0000\u0000\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0001\u0000\aGetLine\u0012Raster::Line (int)\u001FUpp::MemoryRaster::GetLine(int)\u001ERaster::Line GetLine(int line)\u0003Upp\aGETLINE\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\tGetLength\fint () const#Upp::MemoryRaster::GetLength()const\u0015int GetLength() const\u0003Upp\tGETLENGTH\u0011Upp::MemoryRaster\u0011UPP::MEMORYRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u0004Open\u000Fbool (Stream &) Upp::StreamRaster::Open(Stream&)\u0015bool Open(Stream& _s)\u0003Upp\u0004OPEN\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000ß\u0000\u0000\u0000\u0000\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0001\u0000\aIsError\abool ()\u001CUpp::StreamRaster::IsError()\u000Ebool IsError()\u0003Upp\aISERROR\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000ä\u0000\u0000\u0000\u0000\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0004Load&Image (Stream &, const Gate<int, int>)+Upp::StreamRaster::Load(Stream&,const Gate);Image Load(Stream& s, const Gate<int, int> progress = Null)\u0003Upp\u0004LOAD\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000î\u0000\u0000\u0000\u0000\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\bLoadFile*Image (const char *, const Gate<int, int>)3Upp::StreamRaster::LoadFile(const char*,const Gate)DImage LoadFile(const char *fn, const Gate<int, int> progress = Null)\u0003Upp\bLOADFILE\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000ô\u0000\u0000\u0000\u0000\u0000\u0000\u0000ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000ø\u0000\u0000\u0000\u0001\u0000\u0000\vLoadStringA,Image (const String &, const Gate<int, int>)8Upp::StreamRaster::LoadStringA(const String&,const Gate)HImage LoadStringA(const String& s, const Gate<int, int> progress = Null)\u0003Upp\vLOADSTRINGA\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\t\u0000\u0000\u0000\u001D\u0000\u0000\u0000ú\u0000\u0000\u0000\u0000\u0000\u0000\u0000ú\u0000\u0000\u0000'\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0000\u0001\nsAnyRaster\u0015StaticCriticalSection\u000FUpp::sAnyRaster'static StaticCriticalSection sAnyRaster\u0003Upp\nSANYRASTER\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000ü\u0000\u0000\u0000\u0000\u0000\u0000\u0000ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0003Map\u0012Vector<void *> &()\u0018Upp::StreamRaster::Map()\u0015Vector<void *>& Map()\u0003Upp\u0003MAP\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0000\u0000\tAddFormat\u0014void (RasterFactory)+Upp::StreamRaster::AddFormat(RasterFactory)%void AddFormat(RasterFactory factory)\u0003Upp\tADDFORMAT\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000 \u0000\u0000\u0000\b\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\aOpenAny\u001COne<StreamRaster> (Stream &)#Upp::StreamRaster::OpenAny(Stream&)$One<StreamRaster> OpenAny(Stream& s)\u0003Upp\aOPENANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\aLoadAny Image (Stream &, Gate<int, int>)(Upp::StreamRaster::LoadAny(Stream&,Gate)8Image LoadAny(Stream& s, Gate<int, int> progress = Null)\u0003Upp\aLOADANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0000!\u0001\u0000\u0000\u0001\u0000\u0000\vLoadFileAny$Image (const char *, Gate<int, int>)0Upp::StreamRaster::LoadFileAny(const char*,Gate)AImage LoadFileAny(const char *fn, Gate<int, int> progress = Null)\u0003Upp\vLOADFILEANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\rLoadStringAny&Image (const String &, Gate<int, int>)4Upp::StreamRaster::LoadStringAny(const String&,Gate)DImage LoadStringAny(const String& s, Gate<int, int> progress = Null)\u0003Upp\rLOADSTRINGANY\u0011Upp::StreamRaster\u0011UPP::STREAMRASTER\u0000\u0000end\u0000È\u001A\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\RasterEncoder.cpp","value":"data\u0018\u0018\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\rRasterEncoder\avoid ()#Upp::RasterEncoder::RasterEncoder()\u000FRasterEncoder()\u0003Upp\rRASTERENCODER\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\aSetLine\rvoid (RGBA *)\"Upp::RasterEncoder::SetLine(RGBA*)\u0019void SetLine(RGBA *_line)\u0003Upp\aSETLINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\tWriteLine\u0013void (const RGBA *)*Upp::RasterEncoder::WriteLine(const RGBA*)\u001Dvoid WriteLine(const RGBA *s)\u0003Upp\tWRITELINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\tWriteLine\avoid ()\u001FUpp::RasterEncoder::WriteLine()\u0010void WriteLine()\u0003Upp\tWRITELINE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\vvoid (Size) Upp::RasterEncoder::Create(Size)\u0014void Create(Size sz)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u0003Pal\bRGBA *()\u0019Upp::RasterEncoder::Pal()\vRGBA *Pal()\u0003Upp\u0003PAL\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u001B\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\nGetPalette\u000Econst RGBA *() Upp::RasterEncoder::GetPalette()\u0018const RGBA *GetPalette()\u0003Upp\nGETPALETTE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\nSetPalette\u0013void (const RGBA *)+Upp::RasterEncoder::SetPalette(const RGBA*) void SetPalette(const RGBA *pal)\u0003Upp\nSETPALETTE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\nSetPalette\u000Fvoid (Raster &)'Upp::RasterEncoder::SetPalette(Raster&)\u001Fvoid SetPalette(Raster& raster)\u0003Upp\nSETPALETTE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\u0019void (Size, const RGBA *),Upp::RasterEncoder::Create(Size,const RGBA*))void Create(Size sz, const RGBA *palette)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000]\u0000\u0000\u0000\u0000\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\u001Dvoid (int, int, const RGBA *)/Upp::RasterEncoder::Create(int,int,const RGBA*)0void Create(int cx, int cy, const RGBA *palette)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000c\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\u0015void (Size, Raster &)(Upp::RasterEncoder::Create(Size,Raster&)(void Create(Size sz, Raster& pal_raster)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\u0019void (int, int, Raster &)+Upp::RasterEncoder::Create(int,int,Raster&)/void Create(int cx, int cy, Raster& pal_raster)\u0003Upp\u0006CREATE\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0001\u0000\u000FGetPaletteCount\u0006int ()%Upp::RasterEncoder::GetPaletteCount()\u0015int GetPaletteCount()\u0003Upp\u000FGETPALETTECOUNT\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0019\u0000\u0000\u0000\u000F\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000\"\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u000E~RasterEncoder\u0010void () noexcept\u0017Upp::RasterEncoder::~()\u0010~RasterEncoder()\u0003Upp\u000E~RASTERENCODER\u0012Upp::RasterEncoder\u0012UPP::RASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0001\u0000\u0005Start\vvoid (Size)\u001EUpp::ImageEncoder::Start(Size)\u0013void Start(Size sz)\u0003Upp\u0005START\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\fWriteLineRaw\u0013void (const byte *),Upp::ImageEncoder::WriteLineRaw(const byte*)#void WriteLineRaw(const byte *data)\u0003Upp\fWRITELINERAW\u0011Upp::ImageEncoder\u0011UPP::IMAGEENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Save\u0019void (Stream &, Raster &)/Upp::StreamRasterEncoder::Save(Stream&,Raster&)$void Save(Stream& s, Raster& raster)\u0003Upp\u0004SAVE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bSaveFile\u001Dbool (const char *, Raster &)7Upp::StreamRasterEncoder::SaveFile(const char*,Raster&)-bool SaveFile(const char *fn, Raster& raster)\u0003Upp\bSAVEFILE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nSaveString\u0011String (Raster &)-Upp::StreamRasterEncoder::SaveString(Raster&)!String SaveString(Raster& raster)\u0003Upp\nSAVESTRING\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000¡\u0000\u0000\u0000\u0000\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\u0004Save\u001Evoid (Stream &, const Image &)4Upp::StreamRasterEncoder::Save(Stream&,const Image&)&void Save(Stream& s, const Image& img)\u0003Upp\u0004SAVE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000§\u0000\u0000\u0000\u0000\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\bSaveFile\"bool (const char *, const Image &)<Upp::StreamRasterEncoder::SaveFile(const char*,const Image&)/bool SaveFile(const char *fn, const Image& img)\u0003Upp\bSAVEFILE\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000\u0015\u0000\u0000\u0000\u001C\u0000\u0000\u0000­\u0000\u0000\u0000\u0000\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\nSaveString\u0016String (const Image &)2Upp::StreamRasterEncoder::SaveString(const Image&)#String SaveString(const Image& img)\u0003Upp\nSAVESTRING\u0018Upp::StreamRasterEncoder\u0018UPP::STREAMRASTERENCODER\u0000\u0000end\u0000\u0003\u0011\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageOp.cpp","value":"dataT\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\vSetHotSpots\u001Cvoid (Image &, Point, Point)$Upp::SetHotSpots(Image&,Point,Point)Gvoid SetHotSpots(Image& m, Point hotspot, Point hotspot2 = Point(0, 0))\u0003Upp\vSETHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\fWithHotSpots#Image (const Image &, Point, Point)+Upp::WithHotSpots(const Image&,Point,Point)OImage WithHotSpots(const Image& m, Point hotspot, Point hotspot2 = Point(0, 0))\u0003Upp\fWITHHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\fWithHotSpots)Image (const Image &, int, int, int, int)/Upp::WithHotSpots(const Image&,int,int,int,int)BImage WithHotSpots(const Image& m, int x1, int y1, int x2, int y2)\u0003Upp\fWITHHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\vWithHotSpot\u001FImage (const Image &, int, int)&Upp::WithHotSpot(const Image&,int,int)1Image WithHotSpot(const Image& m, int x1, int y1)\u0003Upp\vWITHHOTSPOT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\vCreateImage\u001AImage (Size, const RGBA &)\"Upp::CreateImage(Size,const RGBA&),Image CreateImage(Size sz, const RGBA& rgba)\u0003Upp\vCREATEIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\vCreateImage\u0013Image (Size, Color)\u001CUpp::CreateImage(Size,Color)'Image CreateImage(Size sz, Color color)\u0003Upp\vCREATEIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\nScanOpaque\u000Evoid (Image &)\u0017Upp::ScanOpaque(Image&)\u0019void ScanOpaque(Image& m)\u0003Upp\nSCANOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0006DstSrc4Size (ImageBuffer &, Point &, const Image &, Rect &)3Upp::DstSrc(ImageBuffer&,Point&,const Image&,Rect&)DSize DstSrc(ImageBuffer& dest, Point& p, const Image& src, Rect& sr)\u0003Upp\u0006DSTSRC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\bDstSrcOpcvoid (ImageBuffer &, Point, const Image &, const Rect &, void (*)(RGBA *, const RGBA *, int), bool)^Upp::DstSrcOp(ImageBuffer&,Point,const Image&,const Rect&,void(*)(RGBA*,const RGBA*,int),bool)ÿ\u0000\u0000\u0000void DstSrcOp(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, void (*op)(RGBA *, const RGBA *, int), bool co = false)\u0003Upp\bDSTSRCOP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0004Copy>void (ImageBuffer &, Point, const Image &, const Rect &, bool);Upp::Copy(ImageBuffer&,Point,const Image&,const Rect&,bool)[void Copy(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, bool co = false)\u0003Upp\u0004COPY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0004Over>void (ImageBuffer &, Point, const Image &, const Rect &, bool);Upp::Over(ImageBuffer&,Point,const Image&,const Rect&,bool)[void Over(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, bool co = false)\u0003Upp\u0004OVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000^\u0000\u0000\u0000\u0000\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\aGetOver$Image (const Image &, const Image &)'Upp::GetOver(const Image&,const Image&)2Image GetOver(const Image& dest, const Image& src)\u0003Upp\aGETOVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\u0004Copy)Image (const Image &, const Rect &, bool)(Upp::Copy(const Image&,const Rect&,bool)8Image Copy(const Image& src, const Rect& srect, bool co)\u0003Upp\u0004COPY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000l\u0000\u0000\u0000\u0000\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill(void (ImageBuffer &, const Rect &, RGBA)(Upp::Fill(ImageBuffer&,const Rect&,RGBA):void Fill(ImageBuffer& dest, const Rect& rect, RGBA color)\u0003Upp\u0004FILL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0012OverStraightOpaque>void (ImageBuffer &, Point, const Image &, const Rect &, bool)IUpp::OverStraightOpaque(ImageBuffer&,Point,const Image&,const Rect&,bool)ivoid OverStraightOpaque(ImageBuffer& dest, Point p, const Image& src, const Rect& srect, bool co = false)\u0003Upp\u0012OVERSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Copy8void (Image &, Point, const Image &, const Rect &, bool)5Upp::Copy(Image&,Point,const Image&,const Rect&,bool)Vvoid Copy(Image& dest, Point p, const Image& _src, const Rect& srect, bool co = false)\u0003Upp\u0004COPY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Over8void (Image &, Point, const Image &, const Rect &, bool)5Upp::Over(Image&,Point,const Image&,const Rect&,bool)Vvoid Over(Image& dest, Point p, const Image& _src, const Rect& srect, bool co = false)\u0003Upp\u0004OVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Over#void (Image &, const Image &, bool)#Upp::Over(Image&,const Image&,bool):void Over(Image& dest, const Image& _src, bool co = false)\u0003Upp\u0004OVER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill\"void (Image &, const Rect &, RGBA)\"Upp::Fill(Image&,const Rect&,RGBA)4void Fill(Image& dest, const Rect& rect, RGBA color)\u0003Upp\u0004FILL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0012OverStraightOpaque8void (Image &, Point, const Image &, const Rect &, bool)CUpp::OverStraightOpaque(Image&,Point,const Image&,const Rect&,bool)dvoid OverStraightOpaque(Image& dest, Point p, const Image& _src, const Rect& srect, bool co = false)\u0003Upp\u0012OVERSTRAIGHTOPAQUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0004Crop.void (RasterEncoder &, Raster &, const Rect &)-Upp::Crop(RasterEncoder&,Raster&,const Rect&):void Crop(RasterEncoder& tgt, Raster& img, const Rect& rc)\u0003Upp\u0004CROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\u0004Crop#Image (const Image &, const Rect &)#Upp::Crop(const Image&,const Rect&),Image Crop(const Image& img, const Rect& rc)\u0003Upp\u0004CROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000²\u0000\u0000\u0000\u0000\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\nAddMargins5Image (const Image &, int, int, int, int, RGBA, bool)7Upp::AddMargins(const Image&,int,int,int,int,RGBA,bool)aImage AddMargins(const Image& img, int left, int top, int right, int bottom, RGBA color, bool co)\u0003Upp\nADDMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0004Crop)Image (const Image &, int, int, int, int)'Upp::Crop(const Image&,int,int,int,int):Image Crop(const Image& img, int x, int y, int cx, int cy)\u0003Upp\u0004CROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000À\u0000\u0000\u0000\u0000\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\tIsUniform#bool (const RGBA *, RGBA, int, int)(Upp::IsUniform(const RGBA*,RGBA,int,int)5bool IsUniform(const RGBA *s, RGBA c, int add, int n)\u0003Upp\tISUNIFORM\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\nFindBounds\u001ARect (const Image &, RGBA)\"Upp::FindBounds(const Image&,RGBA)5Rect FindBounds(const Image& m, RGBA bg = RGBAZero())\u0003Upp\nFINDBOUNDS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\bAutoCrop\u0019void (Image *, int, RGBA)\u001EUpp::AutoCrop(Image*,int,RGBA)8void AutoCrop(Image *m, int count, RGBA bg = RGBAZero())\u0003Upp\bAUTOCROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\bAutoCrop\u001BImage (const Image &, RGBA) Upp::AutoCrop(const Image&,RGBA)4Image AutoCrop(const Image& m, RGBA bg = RGBAZero())\u0003Upp\bAUTOCROP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\rClampHotSpots\u000Evoid (Image &)\u001AUpp::ClampHotSpots(Image&)\u001Cvoid ClampHotSpots(Image& m)\u0003Upp\rCLAMPHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\tColorMask\u001CImage (const Image &, Color)\"Upp::ColorMask(const Image&,Color),Image ColorMask(const Image& src, Color key)\u0003Upp\tCOLORMASK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\nCanvasSize*void (RasterEncoder &, Raster &, int, int)/Upp::CanvasSize(RasterEncoder&,Raster&,int,int)@void CanvasSize(RasterEncoder& tgt, Raster& img, int cx, int cy)\u0003Upp\nCANVASSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\nCanvasSize\u001FImage (const Image &, int, int)%Upp::CanvasSize(const Image&,int,int)2Image CanvasSize(const Image& img, int cx, int cy)\u0003Upp\nCANVASSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\vAssignAlpha$Image (const Image &, const Image &)+Upp::AssignAlpha(const Image&,const Image&)7Image AssignAlpha(const Image& img, const Image& alpha)\u0003Upp\vASSIGNALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000>\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u0000A\u0001\u0000\u0000\u0001\u0000\u0000\vEqualightCh\u0013int (int, int, int)\u001DUpp::EqualightCh(int,int,int)$int EqualightCh(int c, int l, int h)\u0003Upp\vEQUALIGHTCH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000\u0000\u0000C\u0001\u0000\u0000\u0001\u0000\u0000\u0000g\u0001\u0000\u0000\u0001\u0000\u0000\tEqualight\u001AImage (const Image &, int) Upp::Equalight(const Image&,int)1Image Equalight(const Image& img, int thold = 10)\u0003Upp\tEQUALIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000i\u0001\u0000\u0000\u0000\u0000\u0000\u0000i\u0001\u0000\u0000\u0001\u0000\u0000\u0000z\u0001\u0000\u0000\u0001\u0000\u0000\tGrayscale\u0015Image (const Image &)\u001CUpp::Grayscale(const Image&)!Image Grayscale(const Image& img)\u0003Upp\tGRAYSCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000|\u0001\u0000\u0000\u0000\u0000\u0000\u0000|\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tGrayscale\u001AImage (const Image &, int) Upp::Grayscale(const Image&,int)-Image Grayscale(const Image& img, int amount)\u0003Upp\tGRAYSCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000¨\u0001\u0000\u0000\u0001\u0000\u0000\bColorize!Image (const Image &, Color, int)%Upp::Colorize(const Image&,Color,int)>Image Colorize(const Image& img, Color color, int alpha = 100)\u0003Upp\bCOLORIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0001\u0000\u0000\u0001\u0000\u0000\tDarkTheme\u0015Image (const Image &)\u001CUpp::DarkTheme(const Image&)!Image DarkTheme(const Image& img)\u0003Upp\tDARKTHEME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0000\u0000\u0000\u0000Æ\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0001\u0000\u0000\nContrastCh\u000Fbyte (int, int)\u0018Upp::ContrastCh(int,int)#byte ContrastCh(int amount, int ch)\u0003Upp\nCONTRASTCH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0001\u0000\u0000\u0001\u0000\u0000\bContrast\u001AImage (const Image &, int)\u001FUpp::Contrast(const Image&,int)2Image Contrast(const Image& img, int amount = 256)\u0003Upp\bCONTRAST\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000à\u0001\u0000\u0000\u0000\u0000\u0000\u0000à\u0001\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0001\u0000\u0000\u0001\u0000\u0000\u0005sLine6void (RGBA *, int, const RasterLine *, ImageFilter9 &)7Upp::sLine(RGBA*,int,const RasterLine[3],ImageFilter9&)Hvoid sLine(RGBA *t, int cx, const RasterLine l[3], ImageFilter9& filter)\u0003Upp\u0005SLINE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0001\u0000\u0000\u0000 \u0002\u0000\u0000\u0001\u0000\u0000\u0006Filter0void (RasterEncoder &, Raster &, ImageFilter9 &)1Upp::Filter(RasterEncoder&,Raster&,ImageFilter9&)Evoid Filter(RasterEncoder& target, Raster& src, ImageFilter9& filter)\u0003Upp\u0006FILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\"\u0002\u0000\u0000\u0000\u0000\u0000\u0000\"\u0002\u0000\u0000\u0001\u0000\u0000\u0000(\u0002\u0000\u0000\u0001\u0000\u0000\u0006Filter%Image (const Image &, ImageFilter9 &)'Upp::Filter(const Image&,ImageFilter9&)4Image Filter(const Image& img, ImageFilter9& filter)\u0003Upp\u0006FILTER\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000*\u0002\u0000\u0000\u0000\u0000\u0000\u0000*\u0002\u0000\u0000\u0001\u0000\u0000\u0000.\u0002\u0000\u0000\u0001\u0000\u0000\u0005RGBAI\nUpp::RGBAI\nUpp::RGBAI\u0005RGBAI\u0003Upp\u0005RGBAI\nUpp::RGBAI\nUPP::RGBAI\u0000\u0000\u0006\u0000\u0000\u0000\u0005\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0000+\u0002\u0000\u0000\u0006\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0001r\u0003int\rUpp::RGBAI::r\u0005int r\u0003Upp\u0001R\nUpp::RGBAI\nUPP::RGBAI\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0000+\u0002\u0000\u0000\t\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0001g\u0003int\rUpp::RGBAI::g\u0005int g\u0003Upp\u0001G\nUpp::RGBAI\nUPP::RGBAI\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0000+\u0002\u0000\u0000\f\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0001b\u0003int\rUpp::RGBAI::b\u0005int b\u0003Upp\u0001B\nUpp::RGBAI\nUPP::RGBAI\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0000+\u0002\u0000\u0000\u000F\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\u0001a\u0003int\rUpp::RGBAI::a\u0005int a\u0003Upp\u0001A\nUpp::RGBAI\nUPP::RGBAI\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0002\u0000\u0000\u0001\u0000\u0000\u0000-\u0002\u0000\u0000\u001E\u0000\u0000\u0000-\u0002\u0000\u0000\u0001\u0000\u0000\u0005RGBAI\avoid ()\u0013Upp::RGBAI::RGBAI()\aRGBAI()\u0003Upp\u0005RGBAI\nUpp::RGBAI\nUPP::RGBAI\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u00000\u0002\u0000\u0000\u0000\u0000\u0000\u00000\u0002\u0000\u0000\u0001\u0000\u0000\u00006\u0002\u0000\u0000\u0001\u0000\u0001\u0005sGetS\u0019void (RGBA, RGBAI &, int)\u001BUpp::sGetS(RGBA,RGBAI&,int),static void sGetS(RGBA q, RGBAI& p, int mul)\u0003Upp\u0005SGETS\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0001\u0000\u0000\u0000<\u0002\u0000\u0000\u0001\u0000\u0000\u000EsSharpenFilter\u0013Upp::sSharpenFilter\u0013Upp::sSharpenFilter\u001DsSharpenFilter : ImageFilter9\u0003Upp\u000ESSHARPENFILTER\u0013Upp::sSharpenFilter\u0013UPP::SSHARPENFILTER\u0011Upp::ImageFilter9\u0000\u0006\u0000\u0000\u0000\u0005\u0000\u0000\u00009\u0002\u0000\u0000\u0001\u0000\u0000\u00009\u0002\u0000\u0000\v\u0000\u0000\u00009\u0002\u0000\u0000\u0001\u0000\u0000\u0006amount\u0003int\u001BUpp::sSharpenFilter::amount\nint amount\u0003Upp\u0006AMOUNT\u0013Upp::sSharpenFilter\u0013UPP::SSHARPENFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000;\u0002\u0000\u0000\u0001\u0000\u0000\u0000;\u0002\u0000\u0000)\u0000\u0000\u0000;\u0002\u0000\u0000\u0000\u0001\u0000\noperator()\u0014RGBA (const RGBA **)-Upp::sSharpenFilter::operator()(const RGBA**) RGBA operator()(const RGBA **mx)\u0003Upp\nOPERATOR()\u0013Upp::sSharpenFilter\u0013UPP::SSHARPENFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000>\u0002\u0000\u0000\u0000\u0000\u0000\u0000>\u0002\u0000\u0000\u0001\u0000\u0000\u0000Q\u0002\u0000\u0000\u0001\u0001\u0000\noperator()\u0014RGBA (const RGBA **)-Upp::sSharpenFilter::operator()(const RGBA**) RGBA operator()(const RGBA **mx)\u0003Upp\nOPERATOR()\u0013Upp::sSharpenFilter\u0013UPP::SSHARPENFILTER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000S\u0002\u0000\u0000\u0000\u0000\u0000\u0000S\u0002\u0000\u0000\u0001\u0000\u0000\u0000Z\u0002\u0000\u0000\u0001\u0000\u0000\aSharpen%void (RasterEncoder &, Raster &, int)(Upp::Sharpen(RasterEncoder&,Raster&,int)<void Sharpen(RasterEncoder& target, Raster& src, int amount)\u0003Upp\aSHARPEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\\\u0002\u0000\u0000\u0000\u0000\u0000\u0000\\\u0002\u0000\u0000\u0001\u0000\u0000\u0000b\u0002\u0000\u0000\u0001\u0000\u0000\aSharpen\u001AImage (const Image &, int)\u001EUpp::Sharpen(const Image&,int)1Image Sharpen(const Image& img, int amount = 100)\u0003Upp\aSHARPEN\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000d\u0002\u0000\u0000\u0000\u0000\u0000\u0000d\u0002\u0000\u0000\u0001\u0000\u0000\u0000f\u0002\u0000\u0000\u0001\u0000\u0000\vsEtchFilter\u0010Upp::sEtchFilter\u0010Upp::sEtchFilter\u001AsEtchFilter : ImageFilter9\u0003Upp\vSETCHFILTER\u0010Upp::sEtchFilter\u0010UPP::SETCHFILTER\u0011Upp::ImageFilter9\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0000e\u0002\u0000\u0000)\u0000\u0000\u0000e\u0002\u0000\u0000\u0000\u0001\u0000\noperator()\u0014RGBA (const RGBA **)*Upp::sEtchFilter::operator()(const RGBA**) RGBA operator()(const RGBA **mx)\u0003Upp\nOPERATOR()\u0010Upp::sEtchFilter\u0010UPP::SETCHFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000h\u0002\u0000\u0000\u0000\u0000\u0000\u0000h\u0002\u0000\u0000\u0001\u0000\u0000\u0000y\u0002\u0000\u0000\u0001\u0001\u0000\noperator()\u0014RGBA (const RGBA **)*Upp::sEtchFilter::operator()(const RGBA**) RGBA operator()(const RGBA **mx)\u0003Upp\nOPERATOR()\u0010Upp::sEtchFilter\u0010UPP::SETCHFILTER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000{\u0002\u0000\u0000\u0000\u0000\u0000\u0000{\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0002\u0000\u0000\u0001\u0000\u0000\u0006Etched\u0015Image (const Image &)\u0019Upp::Etched(const Image&)\u001EImage Etched(const Image& img)\u0003Upp\u0006ETCHED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0011SetColorKeepAlpha\u001CImage (const Image &, Color)*Upp::SetColorKeepAlpha(const Image&,Color)2Image SetColorKeepAlpha(const Image& img, Color c)\u0003Upp\u0011SETCOLORKEEPALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0000\u0000\u0011CreateHorzFadeOut\u0013Image (Size, Color)\"Upp::CreateHorzFadeOut(Size,Color)-Image CreateHorzFadeOut(Size sz, Color color)\u0003Upp\u0011CREATEHORZFADEOUT\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000¡\u0002\u0000\u0000\u0000\u0000\u0000\u0000¡\u0002\u0000\u0000\u0001\u0000\u0000\u0000¯\u0002\u0000\u0000\u0001\u0000\u0000\fFadeOutMaker\u0011Upp::FadeOutMaker\u0011Upp::FadeOutMaker\u0019FadeOutMaker : ImageMaker\u0003Upp\fFADEOUTMAKER\u0011Upp::FadeOutMaker\u0011UPP::FADEOUTMAKER\u000FUpp::ImageMaker\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000¢\u0002\u0000\u0000\u0001\u0000\u0000\u0000¢\u0002\u0000\u0000\t\u0000\u0000\u0000¢\u0002\u0000\u0000\u0001\u0000\u0000\u0002sz\u0004Size\u0015Upp::FadeOutMaker::sz\aSize sz\u0003Upp\u0002SZ\u0011Upp::FadeOutMaker\u0011UPP::FADEOUTMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000£\u0002\u0000\u0000\u0001\u0000\u0000\u0000£\u0002\u0000\u0000\f\u0000\u0000\u0000£\u0002\u0000\u0000\u0001\u0000\u0000\u0005color\u0005Color\u0018Upp::FadeOutMaker::color\vColor color\u0003Upp\u0005COLOR\u0011Upp::FadeOutMaker\u0011UPP::FADEOUTMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¥\u0002\u0000\u0000\u0001\u0000\u0000\u0000¥\u0002\u0000\u0000\u0002\u0000\u0000\u0000ª\u0002\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const\u001DUpp::FadeOutMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0011Upp::FadeOutMaker\u0011UPP::FADEOUTMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¬\u0002\u0000\u0000\u0001\u0000\u0000\u0000¬\u0002\u0000\u0000\u0002\u0000\u0000\u0000®\u0002\u0000\u0000\u0001\u0001\u0000\u0004Make\u000EImage () const\u001EUpp::FadeOutMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0011Upp::FadeOutMaker\u0011UPP::FADEOUTMAKER\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000±\u0002\u0000\u0000\u0000\u0000\u0000\u0000±\u0002\u0000\u0000\u0001\u0000\u0000\u0000·\u0002\u0000\u0000\u0001\u0000\u0000\vHorzFadeOut\u0013Image (Size, Color)\u001CUpp::HorzFadeOut(Size,Color)'Image HorzFadeOut(Size sz, Color color)\u0003Upp\vHORZFADEOUT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000¹\u0002\u0000\u0000\u0000\u0000\u0000\u0000¹\u0002\u0000\u0000\u0001\u0000\u0000\u0000¼\u0002\u0000\u0000\u0001\u0000\u0000\vHorzFadeOut\u0017Image (int, int, Color)\u001FUpp::HorzFadeOut(int,int,Color).Image HorzFadeOut(int cx, int cy, Color color)\u0003Upp\vHORZFADEOUT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¾\u0002\u0000\u0000\u0000\u0000\u0000\u0000¾\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0002\u0000\u0000\u0001\u0000\u0000\u0015SetNormalizedHotSpots(void (ImageBuffer &, int, int, int, int)8Upp::SetNormalizedHotSpots(ImageBuffer&,int,int,int,int)Kvoid SetNormalizedHotSpots(ImageBuffer& ib, int x1, int y1, int x2, int y2)\u0003Upp\u0015SETNORMALIZEDHOTSPOTS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000Æ\u0002\u0000\u0000\u0000\u0000\u0000\u0000Æ\u0002\u0000\u0000\u0001\u0000\u0000\u0000Ñ\u0002\u0000\u0000\u0001\u0000\u0000\u000FRotateClockwise\u0015Image (const Image &)\"Upp::RotateClockwise(const Image&)'Image RotateClockwise(const Image& img)\u0003Upp\u000FROTATECLOCKWISE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000Ó\u0002\u0000\u0000\u0000\u0000\u0000\u0000Ó\u0002\u0000\u0000\u0001\u0000\u0000\u0000ß\u0002\u0000\u0000\u0001\u0000\u0000\u0013RotateAntiClockwise\u0015Image (const Image &)&Upp::RotateAntiClockwise(const Image&)+Image RotateAntiClockwise(const Image& img)\u0003Upp\u0013ROTATEANTICLOCKWISE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000á\u0002\u0000\u0000\u0000\u0000\u0000\u0000á\u0002\u0000\u0000\u0001\u0000\u0000\u0000ì\u0002\u0000\u0000\u0001\u0000\u0000\tRotate180\u0015Image (const Image &)\u001CUpp::Rotate180(const Image&)\"Image Rotate180(const Image& orig)\u0003Upp\tROTATE180\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000î\u0002\u0000\u0000\u0000\u0000\u0000\u0000î\u0002\u0000\u0000\u0001\u0000\u0000\u0000ù\u0002\u0000\u0000\u0001\u0000\u0000\tTranspose\u0015Image (const Image &)\u001CUpp::Transpose(const Image&)!Image Transpose(const Image& img)\u0003Upp\tTRANSPOSE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000û\u0002\u0000\u0000\u0000\u0000\u0000\u0000û\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0003\u0000\u0000\u0001\u0000\u0000\nTransverse\u0015Image (const Image &)\u001DUpp::Transverse(const Image&)\"Image Transverse(const Image& img)\u0003Upp\nTRANSVERSE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\b\u0003\u0000\u0000\u0000\u0000\u0000\u0000\b\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0003\u0000\u0000\u0001\u0000\u0000\nMirrorHorz\u0015Image (const Image &)\u001DUpp::MirrorHorz(const Image&)\"Image MirrorHorz(const Image& img)\u0003Upp\nMIRRORHORZ\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0003\u0000\u0000\u0001\u0000\u0000\u0000/\u0003\u0000\u0000\u0001\u0000\u0000\nMirrorVert\u0015Image (const Image &)\u001DUpp::MirrorVert(const Image&)\"Image MirrorVert(const Image& img)\u0003Upp\nMIRRORVERT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00001\u0003\u0000\u0000\u0000\u0000\u0000\u00001\u0003\u0000\u0000\u0001\u0000\u0000\u0000D\u0003\u0000\u0000\u0001\u0000\u0000\tFlipImage\u001AImage (const Image &, int) Upp::FlipImage(const Image&,int))Image FlipImage(const Image& m, int mode)\u0003Upp\tFLIPIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000F\u0003\u0000\u0000\u0000\u0000\u0000\u0000F\u0003\u0000\u0000\u0001\u0000\u0000\u0000I\u0003\u0000\u0000\u0001\u0000\u0001\u0003Cvp'Pointf (double, double, double, double)%Upp::Cvp(double,double,double,double)?static Pointf Cvp(double x, double y, double sina, double cosa)\u0003Upp\u0003CVP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000K\u0003\u0000\u0000\u0000\u0000\u0000\u0000K\u0003\u0000\u0000\u0001\u0000\u0000\u0000m\u0003\u0000\u0000\u0001\u0000\u0000\u0006Rotate\u001AImage (const Image &, int)\u001DUpp::Rotate(const Image&,int)'Image Rotate(const Image& m, int angle)\u0003Upp\u0006ROTATE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000o\u0003\u0000\u0000\u0000\u0000\u0000\u0000o\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0001\u0000\u0000\u0006Dither\u001AImage (const Image &, int)\u001DUpp::Dither(const Image&,int)-Image Dither(const Image& m, int dival = 394)\u0003Upp\u0006DITHER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0004\u0000\u0000\u0001\u0000\u0000\fGaussianBlur Image (const Image &, int, bool)(Upp::GaussianBlur(const Image&,int,bool)AImage GaussianBlur(const Image& img, int radius, bool co = false)\u0003Upp\fGAUSSIANBLUR\u0003Upp\u0003UPP\u0000\u0000end\u0000¶;\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageChOp.cpp","value":"data\u001B\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0004Diff\u0010int (RGBA, RGBA)\u0014Upp::Diff(RGBA,RGBA)\u0018int Diff(RGBA a, RGBA b)\u0003Upp\u0004DIFF\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u0010ButtonDecomposer\u0015Upp::ButtonDecomposer\u0015Upp::ButtonDecomposer\u0010ButtonDecomposer\u0003Upp\u0010BUTTONDECOMPOSER\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0003src\u0005Image\u001AUpp::ButtonDecomposer::src\tImage src\u0003Upp\u0003SRC\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\n\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0003dst\u0005Image\u001AUpp::ButtonDecomposer::dst\tImage dst\u0003Upp\u0003DST\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0002aa\u0003int\u0019Upp::ButtonDecomposer::aa\u0006int aa\u0003Upp\u0002AA\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\amaxdiff\u0003int\u001EUpp::ButtonDecomposer::maxdiff\vint maxdiff\u0003Upp\aMAXDIFF\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\f\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0005color\u0004RGBA\u001CUpp::ButtonDecomposer::color\nRGBA color\u0003Upp\u0005COLOR\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\f\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0005gdiff\u0003int\u001CUpp::ButtonDecomposer::gdiff\tint gdiff\u0003Upp\u0005GDIFF\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\r\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0006gcount\u0003int\u001DUpp::ButtonDecomposer::gcount\nint gcount\u0003Upp\u0006GCOUNT\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0002\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u0002Do\avoid ()\u001BUpp::ButtonDecomposer::Do()\tvoid Do()\u0003Upp\u0002DO\u0015Upp::ButtonDecomposer\u0015UPP::BUTTONDECOMPOSER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\aUnglyph(Image (const Image &, Color &, double &))Upp::Unglyph(const Image&,Color&,double&)8Image Unglyph(const Image& m, Color& c, double& gfactor)\u0003Upp\aUNGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\aUnglyph\u001EImage (const Image &, Color &)!Upp::Unglyph(const Image&,Color&)'Image Unglyph(const Image& m, Color& c)\u0003Upp\aUNGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\aUnglyph\u0015Image (const Image &)\u001AUpp::Unglyph(const Image&)\u001DImage Unglyph(const Image& m)\u0003Upp\aUNGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\tVertBlend\u001EImage (Image, Image, int, int)#Upp::VertBlend(Image,Image,int,int)7Image VertBlend(Image img1, Image img2, int y0, int y1)\u0003Upp\tVERTBLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\tHorzBlend\u001EImage (Image, Image, int, int)#Upp::HorzBlend(Image,Image,int,int)7Image HorzBlend(Image img1, Image img2, int x0, int x1)\u0003Upp\tHORZBLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bHorzSymm\rImage (Image)\u0014Upp::HorzSymm(Image)\u0019Image HorzSymm(Image src)\u0003Upp\bHORZSYMM\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006EqLine(bool (const Image &, int, int, int, int))Upp::EqLine(const Image&,int,int,int,int)=bool EqLine(const Image& m, int l1, int l2, int x, int width)\u0003Upp\u0006EQLINE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006EqLine\u001Ebool (const Image &, int, int)!Upp::EqLine(const Image&,int,int)+bool EqLine(const Image& m, int l1, int l2)\u0003Upp\u0006EQLINE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\rIsSingleColor\"bool (const Image &, const Rect &),Upp::IsSingleColor(const Image&,const Rect&)5bool IsSingleColor(const Image& m, const Rect& rect_)\u0003Upp\rISSINGLECOLOR\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\rRecreateAlpha$Image (const Image &, const Image &)-Upp::RecreateAlpha(const Image&,const Image&)CImage RecreateAlpha(const Image& overwhite, const Image& overblack)\u0003Upp\rRECREATEALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000¸\u0000\u0000\u0000\u0000\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\vImageMargin\u001Dint (const Image &, int, int)&Upp::ImageMargin(const Image&,int,int)1int ImageMargin(const Image& _m, int p, int dist)\u0003Upp\vIMAGEMARGIN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\fImageMarginV\u001Dint (const Image &, int, int)'Upp::ImageMarginV(const Image&,int,int)2int ImageMarginV(const Image& _m, int p, int dist)\u0003Upp\fIMAGEMARGINV\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\u000FGetImageMargins\u001ARect (const Image &, RGBA)'Upp::GetImageMargins(const Image&,RGBA)7Rect GetImageMargins(const Image& m, RGBA margin_color)\u0003Upp\u000FGETIMAGEMARGINS\u0003Upp\u0003UPP\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\vChPartMaker\u0014void (const Image &)+Upp::ChPartMaker::ChPartMaker(const Image&)\u001BChPartMaker(const Image& m)\u0003Upp\vCHPARTMAKER\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\nResetShape\avoid ()\u001EUpp::ChPartMaker::ResetShape()\u0011void ResetShape()\u0003Upp\nRESETSHAPE\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000ù\u0000\u0000\u0000\u0000\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0004Make\u000EImage () const\u001DUpp::ChPartMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0010Upp::ChPartMaker\u0010UPP::CHPARTMAKER\u0000\u0000end\u0000\u0010\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Mify.cpp","value":"data\u0012\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0006Minify%Image (const Image &, int, int, bool)&Upp::Minify(const Image&,int,int,bool)?Image Minify(const Image& img, int nx, int ny, bool co = false)\u0003Upp\u0006MINIFY\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010MinifyImageMaker\u0015Upp::MinifyImageMaker\u0015Upp::MinifyImageMaker$MinifyImageMaker : public ImageMaker\u0003Upp\u0010MINIFYIMAGEMAKER\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u000FUpp::ImageMaker\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005image\u0005Image\u001CUpp::MinifyImageMaker::image\vImage image\u0003Upp\u0005IMAGE\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002nx\u0003int\u0019Upp::MinifyImageMaker::nx\u0006int nx\u0003Upp\u0002NX\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002ny\u0003int\u0019Upp::MinifyImageMaker::ny\u0006int ny\u0003Upp\u0002NY\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002co\u0004bool\u0019Upp::MinifyImageMaker::co\abool co\u0003Upp\u0002CO\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0003Key\u000FString () const!Upp::MinifyImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004Make\u000EImage () const\"Upp::MinifyImageMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const!Upp::MinifyImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0001\u0000\u0004Make\u000EImage () const\"Upp::MinifyImageMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0015Upp::MinifyImageMaker\u0015UPP::MINIFYIMAGEMAKER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\fMinifyCached%Image (const Image &, int, int, bool),Upp::MinifyCached(const Image&,int,int,bool)EImage MinifyCached(const Image& img, int nx, int ny, bool co = false)\u0003Upp\fMINIFYCACHED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000µ\u0000\u0000\u0000\u0000\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\aMagnify3Image (const Image &, const Rect &, int, int, bool)3Upp::Magnify(const Image&,const Rect&,int,int,bool)JImage Magnify(const Image& img, const Rect& src_, int nx, int ny, bool co)\u0003Upp\aMAGNIFY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Û\u0000\u0000\u0000\u0000\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\u0000à\u0000\u0000\u0000\u0001\u0000\u0000\aMagnify%Image (const Image &, int, int, bool)'Upp::Magnify(const Image&,int,int,bool)@Image Magnify(const Image& img, int nx, int ny, bool co = false)\u0003Upp\aMAGNIFY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000â\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\fDownSample3x\u001BImage (const Image &, bool)$Upp::DownSample3x(const Image&,bool)5Image DownSample3x(const Image& src, bool co = false)\u0003Upp\fDOWNSAMPLE3X\u0003Upp\u0003UPP\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000ò\u0000\u0000\u0000\b\u0000\u0000\u0000ò\u0000\u0000\u0000P\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0000\u0006S__SUM\u0000\u0006S__SUM\u0006S__SUM\u0000\u0006S__SUM\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\fDownSample2x\u001BImage (const Image &, bool)$Upp::DownSample2x(const Image&,bool)5Image DownSample2x(const Image& src, bool co = false)\u0003Upp\fDOWNSAMPLE2X\u0003Upp\u0003UPP\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0013\u0001\u0000\u0000\b\u0000\u0000\u0000\u0013\u0001\u0000\u0000P\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0000\u0006S__SUM\u0000\u0006S__SUM\u0006S__SUM\u0000\u0006S__SUM\u0000\u0000\u0000\u0000end\u0000¼\n\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp","value":"data\u001C\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000E(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)JUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)>Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.)\u0004enum\u0003UppE(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\IMAGESCALE.CPP:5:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0005MAXAAJUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)\nUpp::MAXAA\u0005MAXAA\u0003Upp\u0005MAXAA\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\tMAP_COUNTJUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)\u000EUpp::MAP_COUNT\tMAP_COUNT\u0003Upp\tMAP_COUNT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0010\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\vMAP_SEGMENTJUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)\u0010Upp::MAP_SEGMENT\vMAP_SEGMENT\u0003Upp\vMAP_SEGMENT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0010\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\tMAP_BLOCKJUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)\u000EUpp::MAP_BLOCK\tMAP_BLOCK\u0003Upp\tMAP_BLOCK\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0010\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\bMAP_STEPJUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)\rUpp::MAP_STEP\bMAP_STEP\u0003Upp\bMAP_STEP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0010\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\bMAP_DATAJUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:5:1)\rUpp::MAP_DATA\bMAP_DATA\u0003Upp\bMAP_DATA\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000O\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000F(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:16:1)KUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:16:1)>Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.)\u0004enum\u0003UppF(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\DRAW\\IMAGESCALE.CPP:16:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\a\u0000\u0000\u0000\u000F\u0000\u0000\u0000\a\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0012LOG2_STRETCH_CURVEKUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:16:1)\u0017Upp::LOG2_STRETCH_CURVE\u0012LOG2_STRETCH_CURVE\u0003Upp\u0012LOG2_STRETCH_CURVE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000 \u0000\u0000\u0000\u000F\u0000\u0000\u0000 \u0000\u0000\u0000\u000F\u0000\u0000\u0000M\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0013COUNT_STRETCH_CURVEKUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\ImageScale.cpp:16:1)\u0018Upp::COUNT_STRETCH_CURVE\u0013COUNT_STRETCH_CURVE\u0003Upp\u0013COUNT_STRETCH_CURVE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0001\u000FGetStretchCurve\u000Econst byte *()\u0016Upp::GetStretchCurve()$static const byte *GetStretchCurve()\u0003Upp\u000FGETSTRETCHCURVE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\bAAGetMapDVector<dword> (int &, int &, int, int, int, int, int, int, int, int)8Upp::AAGetMap(int&,int&,int,int,int,int,int,int,int,int)ÿ\u0000\u0000\u0000Vector<dword> AAGetMap(int& dmin, int& dmax, int dclipmin, int dclipmax, int smin, int smax, int sclipmin, int sclipmax, int times, int avail)\u0003Upp\bAAGETMAP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0001\rBltAAMapRGBA1+void (dword *, const RGBA *, const dword *)3Upp::BltAAMapRGBA1(dword*,const RGBA*,const dword*)Gstatic void BltAAMapRGBA1(dword *dest, const RGBA *s, const dword *map)\u0003Upp\rBLTAAMAPRGBA1\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0001\rBltAAMapRGBA2+void (dword *, const RGBA *, const dword *)3Upp::BltAAMapRGBA2(dword*,const RGBA*,const dword*)Gstatic void BltAAMapRGBA2(dword *dest, const RGBA *s, const dword *map)\u0003Upp\rBLTAAMAPRGBA2\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0001\rBltAAMapRGBA3+void (dword *, const RGBA *, const dword *)3Upp::BltAAMapRGBA3(dword*,const RGBA*,const dword*)Gstatic void BltAAMapRGBA3(dword *dest, const RGBA *s, const dword *map)\u0003Upp\rBLTAAMAPRGBA3\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0001\rBltAAMapRGBA4+void (dword *, const RGBA *, const dword *)3Upp::BltAAMapRGBA4(dword*,const RGBA*,const dword*)Gstatic void BltAAMapRGBA4(dword *dest, const RGBA *s, const dword *map)\u0003Upp\rBLTAAMAPRGBA4\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\fBltAASet2Fix>void (RGBA *, const dword *, dword, const dword *, dword, int)BUpp::BltAASet2Fix(RGBA*,const dword*,dword,const dword*,dword,int)bvoid BltAASet2Fix(RGBA *dest, const dword *src1, dword w1, const dword *src2, dword w2, int count)\u0003Upp\fBLTAASET2FIX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000,\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0001\u0000\u0000\u0001\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0000\u0000\fBltAASet3FixVvoid (RGBA *, const dword *, dword, const dword *, dword, const dword *, dword, dword)WUpp::BltAASet3Fix(RGBA*,const dword*,dword,const dword*,dword,const dword*,dword,dword)ÿ\u0000\u0000\u0000void BltAASet3Fix(RGBA *dest, const dword *src1, dword w1, const dword *src2, dword w2, const dword *src3, dword w3, dword count)\u0003Upp\fBLTAASET3FIX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000<\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0000J\u0001\u0000\u0000\u0001\u0000\u0000\fBltAASet4FixNvoid (RGBA *, const dword *, const dword *, const dword *, const dword *, int)PUpp::BltAASet4Fix(RGBA*,const dword*,const dword*,const dword*,const dword*,int)tvoid BltAASet4Fix(RGBA *dest, const dword *src1, const dword *src2, const dword *src3, const dword *src4, int count)\u0003Upp\fBLTAASET4FIX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000L\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0001\u0000\u0000\u0001\u0000\u0000\u0000[\u0001\u0000\u0000\u0001\u0000\u0000\tBltAAFix2!void (RGBA *, const dword *, int)&Upp::BltAAFix2(RGBA*,const dword*,int)7void BltAAFix2(RGBA *dest, const dword *src, int count)\u0003Upp\tBLTAAFIX2\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000\u0000\u0000]\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0006Create#void (Size, Raster &, const Rect &)3Upp::RescaleImage::Create(Size,Raster&,const Rect&)8void Create(Size _tsz, Raster& _src, const Rect& src_rc)\u0003Upp\u0006CREATE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aGetLine\u0011const RGBA *(int)\u001FUpp::RescaleImage::GetLine(int)\u001Bconst RGBA *GetLine(int ii)\u0003Upp\aGETLINE\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0001\u0000\u0000\u0001\u0000\u0000\u0003Get\rvoid (RGBA *)\u001DUpp::RescaleImage::Get(RGBA*)\u0013void Get(RGBA *tgt)\u0003Upp\u0003GET\u0011Upp::RescaleImage\u0011UPP::RESCALEIMAGE\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Û\u0001\u0000\u0000\u0000\u0000\u0000\u0000Û\u0001\u0000\u0000\u0001\u0000\u0000\u0000è\u0001\u0000\u0000\u0001\u0000\u0000\aRescaleDbool (RasterEncoder &, Size, Raster &, const Rect &, Gate<int, int>):Upp::Rescale(RasterEncoder&,Size,Raster&,const Rect&,Gate)kbool Rescale(RasterEncoder& tgt, Size tsz, Raster& src, const Rect& src_rc, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ê\u0001\u0000\u0000\u0000\u0000\u0000\u0000ê\u0001\u0000\u0000\u0001\u0000\u0000\u0000ò\u0001\u0000\u0000\u0001\u0000\u0000\aRescale9Image (const Image &, Size, const Rect &, Gate<int, int>)0Upp::Rescale(const Image&,Size,const Rect&,Gate)\\Image Rescale(const Image& src, Size sz, const Rect& src_rc, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ô\u0001\u0000\u0000\u0000\u0000\u0000\u0000ô\u0001\u0000\u0000\u0001\u0000\u0000\u0000÷\u0001\u0000\u0000\u0001\u0000\u0000\aRescale+Image (const Image &, Size, Gate<int, int>)$Upp::Rescale(const Image&,Size,Gate)HImage Rescale(const Image& src, Size sz, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ù\u0001\u0000\u0000\u0000\u0000\u0000\u0000ù\u0001\u0000\u0000\u0001\u0000\u0000\u0000ü\u0001\u0000\u0000\u0001\u0000\u0000\aRescale/Image (const Image &, int, int, Gate<int, int>)'Upp::Rescale(const Image&,int,int,Gate)OImage Rescale(const Image& src, int cx, int cy, Gate<int, int> progress = Null)\u0003Upp\aRESCALE\u0003Upp\u0003UPP\u0000\u0000end\u0000r\u0018\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\RescaleFilter.cpp","value":"data\u001Eõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0005LDUMP\u0000\u0005LDUMP\u0005LDUMP\u0000\u0005LDUMP\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0001\bsNearest\u000Fdouble (double)\u0015Upp::sNearest(double) static double sNearest(double x)\u0003Upp\bSNEAREST\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0001\tsBiCubic_\u001Fdouble (double, double, double)$Upp::sBiCubic_(double,double,double)5static double sBiCubic_(double x, double B, double C)\u0003Upp\tSBICUBIC_\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0001\bsBspline\u000Fdouble (double)\u0015Upp::sBspline(double) static double sBspline(double x)\u0003Upp\bSBSPLINE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0001\tsMitchell\u000Fdouble (double)\u0016Upp::sMitchell(double)!static double sMitchell(double x)\u0003Upp\tSMITCHELL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0001\vsCatmullRom\u000Fdouble (double)\u0018Upp::sCatmullRom(double)#static double sCatmullRom(double x)\u0003Upp\vSCATMULLROM\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0001\asLinear\u000Fdouble (double)\u0014Upp::sLinear(double)\u001Fstatic double sLinear(double x)\u0003Upp\aSLINEAR\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0001\bsLanczos\u0014double (double, int)\u0019Upp::sLanczos(double,int)'static double sLanczos(double x, int a)\u0003Upp\bSLANCZOS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0001\tsLanczos2\u000Fdouble (double)\u0016Upp::sLanczos2(double)!static double sLanczos2(double x)\u0003Upp\tSLANCZOS2\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0001\tsLanczos3\u000Fdouble (double)\u0016Upp::sLanczos3(double)!static double sLanczos3(double x)\u0003Upp\tSLANCZOS3\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0001\tsLanczos4\u000Fdouble (double)\u0016Upp::sLanczos4(double)!static double sLanczos4(double x)\u0003Upp\tSLANCZOS4\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0001\tsLanczos5\u000Fdouble (double)\u0016Upp::sLanczos5(double)!static double sLanczos5(double x)\u0003Upp\tSLANCZOS5\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0001\tsCostella\u000Fdouble (double)\u0016Upp::sCostella(double)!static double sCostella(double x)\u0003Upp\tSCOSTELLA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000 \u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0016GetImageFilterFunction%Tuple2<double (*)(double), int> (int) Upp::GetImageFilterFunction(int)BTuple2<double (*)(double), int> GetImageFilterFunction(int filter)\u0003Upp\u0016GETIMAGEFILTERFUNCTION\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init(void (double (*)(double), int, int, int);Upp::ImageFilterKernel::Init(double(*)(double),int,int,int)?void Init(double (*kfn)(double), int a, int src_sz, int tgt_sz)\u0003Upp\u0004INIT\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0018\u0000\u0000\u0000\u0013\u0000\u0000\u0000|\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0011ImageFilterKernel(void (double (*)(double), int, int, int)HUpp::ImageFilterKernel::ImageFilterKernel(double(*)(double),int,int,int)GImageFilterKernel(double (*kfn)(double), int a, int src_sz, int tgt_sz)\u0003Upp\u0011IMAGEFILTERKERNEL\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init\u0014void (int, int, int))Upp::ImageFilterKernel::Init(int,int,int)-void Init(int filter, int src_sz, int tgt_sz)\u0003Upp\u0004INIT\u0016Upp::ImageFilterKernel\u0016UPP::IMAGEFILTERKERNEL\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000õ\u0000\u0000\u0000\u0001\u0000\u0000\rRescaleFilterXImage (const Image &, Size, const Rect &, double (*)(double), int, Gate<int, int>, bool)QUpp::RescaleFilter(const Image&,Size,const Rect&,double(*)(double),int,Gate,bool)~Image RescaleFilter(const Image& img, Size sz, const Rect& sr, double (*kfn)(double), int a, Gate<int, int> progress, bool co)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000÷\u0000\u0000\u0000\u0000\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\u0000ü\u0000\u0000\u0000\u0001\u0000\u0000\rRescaleFilterJImage (const Image &, Size, double (*)(double), int, Gate<int, int>, bool)EUpp::RescaleFilter(const Image&,Size,double(*)(double),int,Gate,bool)nImage RescaleFilter(const Image& img, Size sz, double (*kfn)(double), int a, Gate<int, int> progress, bool co)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000þ\u0000\u0000\u0000\u0000\u0000\u0000\u0000þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\rRescaleFilterNImage (const Image &, int, int, double (*)(double), int, Gate<int, int>, bool)HUpp::RescaleFilter(const Image&,int,int,double(*)(double),int,Gate,bool)uImage RescaleFilter(const Image& img, int cx, int cy, double (*kfn)(double), int a, Gate<int, int> progress, bool co)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\rRescaleFilterDImage (const Image &, Size, const Rect &, int, Gate<int, int>, bool)?Upp::RescaleFilter(const Image&,Size,const Rect&,int,Gate,bool){Image RescaleFilter(const Image& img, Size sz, const Rect& sr, int filter, Gate<int, int> progress = Null, bool co = false)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\rRescaleFilter0Image (const Image &, Size, int, Gate<int, int>).Upp::RescaleFilter(const Image&,Size,int,Gate)ZImage RescaleFilter(const Image& img, Size sz, int filter, Gate<int, int> progress = Null)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\rRescaleFilter4Image (const Image &, int, int, int, Gate<int, int>)1Upp::RescaleFilter(const Image&,int,int,int,Gate)aImage RescaleFilter(const Image& img, int cx, int cy, int filter, Gate<int, int> progress = Null)\u0003Upp\rRESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u000FCoRescaleFilter>Image (const Image &, Size, const Rect &, int, Gate<int, int>)<Upp::CoRescaleFilter(const Image&,Size,const Rect&,int,Gate)lImage CoRescaleFilter(const Image& img, Size sz, const Rect& sr, int filter, Gate<int, int> progress = Null)\u0003Upp\u000FCORESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u000FCoRescaleFilter0Image (const Image &, Size, int, Gate<int, int>)0Upp::CoRescaleFilter(const Image&,Size,int,Gate)\\Image CoRescaleFilter(const Image& img, Size sz, int filter, Gate<int, int> progress = Null)\u0003Upp\u000FCORESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0001\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\u000FCoRescaleFilter4Image (const Image &, int, int, int, Gate<int, int>)3Upp::CoRescaleFilter(const Image&,int,int,int,Gate)cImage CoRescaleFilter(const Image& img, int cx, int cy, int filter, Gate<int, int> progress = Null)\u0003Upp\u000FCORESCALEFILTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u0000+\u0001\u0000\u0000\u0001\u0000\u0000\u000ERescaleBicubic9Image (const Image &, Size, const Rect &, Gate<int, int>)7Upp::RescaleBicubic(const Image&,Size,const Rect&,Gate)_Image RescaleBicubic(const Image& img, Size sz, const Rect& sr, Gate<int, int> progress = Null)\u0003Upp\u000ERESCALEBICUBIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u000ERescaleBicubic/Image (const Image &, int, int, Gate<int, int>).Upp::RescaleBicubic(const Image&,int,int,Gate)VImage RescaleBicubic(const Image& img, int cx, int cy, Gate<int, int> progress = Null)\u0003Upp\u000ERESCALEBICUBIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\u000ERescaleBicubic+Image (const Image &, Size, Gate<int, int>)+Upp::RescaleBicubic(const Image&,Size,Gate)OImage RescaleBicubic(const Image& img, Size sz, Gate<int, int> progress = Null)\u0003Upp\u000ERESCALEBICUBIC\u0003Upp\u0003UPP\u0000\u0000end\u0000¶\u0018\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\MakeCache.cpp","value":"data+õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\fscImageMaker\u0011Upp::scImageMaker\u0011Upp::scImageMaker\u0019scImageMaker : ValueMaker\u0003Upp\fSCIMAGEMAKER\u0011Upp::scImageMaker\u0011UPP::SCIMAGEMAKER\u000FUpp::ValueMaker\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0014\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0001m\u0012const ImageMaker *\u0014Upp::scImageMaker::m\u0013const ImageMaker *m\u0003Upp\u0001M\u0011Upp::scImageMaker\u0011UPP::SCIMAGEMAKER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\tpaintonly\u0004bool\u001CUpp::scImageMaker::paintonly\u000Ebool paintonly\u0003Upp\tPAINTONLY\u0011Upp::scImageMaker\u0011UPP::SCIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const\u001DUpp::scImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0011Upp::scImageMaker\u0011UPP::SCIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0001\u0000\u0004Make\u0013int (Value &) const$Upp::scImageMaker::Make(Value&)const\u001Dint Make(Value& object) const\u0003Upp\u0004MAKE\u0011Upp::scImageMaker\u0011UPP::SCIMAGEMAKER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0010SysImageRealized\u0014void (const Image &)#Upp::SysImageRealized(const Image&)'void SysImageRealized(const Image& img)\u0003Upp\u0010SYSIMAGEREALIZED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0010SysImageReleased\u0014void (const Image &)#Upp::SysImageReleased(const Image&)'void SysImageReleased(const Image& img)\u0003Upp\u0010SYSIMAGERELEASED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0014SetMakeImageCacheMax\nvoid (int)\u001EUpp::SetMakeImageCacheMax(int) void SetMakeImageCacheMax(int m)\u0003Upp\u0014SETMAKEIMAGECACHEMAX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0015SetMakeImageCacheSize\nvoid (int)\u001FUpp::SetMakeImageCacheSize(int)!void SetMakeImageCacheSize(int m)\u0003Upp\u0015SETMAKEIMAGECACHESIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0011SweepMkImageCache\avoid ()\u0018Upp::SweepMkImageCache()\u0018void SweepMkImageCache()\u0003Upp\u0011SWEEPMKIMAGECACHE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\vMakeImage__ Image (const ImageMaker &, bool)(Upp::MakeImage__(const ImageMaker&,bool)6Image MakeImage__(const ImageMaker& m, bool paintonly)\u0003Upp\vMAKEIMAGE__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\tMakeImage\u001AImage (const ImageMaker &)!Upp::MakeImage(const ImageMaker&)$Image MakeImage(const ImageMaker& m)\u0003Upp\tMAKEIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0012MakeImagePaintOnly\u001AImage (const ImageMaker &)*Upp::MakeImagePaintOnly(const ImageMaker&)-Image MakeImagePaintOnly(const ImageMaker& m)\u0003Upp\u0012MAKEIMAGEPAINTONLY\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0010SimpleImageMaker\u0015Upp::SimpleImageMaker\u0015Upp::SimpleImageMaker$SimpleImageMaker : public ImageMaker\u0003Upp\u0010SIMPLEIMAGEMAKER\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u000FUpp::ImageMaker\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000\"\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0004make\u0018Image (*)(const Image &)\u001BUpp::SimpleImageMaker::make\u001BImage (*make)(const Image&)\u0003Upp\u0004MAKE\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u0000\u0000\n\u0000\u0000\u0000\u001C\u0000\u0000\u0000`\u0000\u0000\u0000\u000F\u0000\u0000\u0000`\u0000\u0000\u0000!\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0005image\rconst Image &\u0005image\u0012const Image& image\u0000\u0005IMAGE\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000\f\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0005image\u0005Image\u001CUpp::SimpleImageMaker::image\vImage image\u0003Upp\u0005IMAGE\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0000d\u0000\u0000\u0000\u001B\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0001\u0000\u0003Key\u000FString () const!Upp::SimpleImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000\u001C\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0001\u0000\u0004Make\u000EImage () const\"Upp::SimpleImageMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u001D\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0010SimpleImageMaker.void (const Image &, Image (*)(const Image &))LUpp::SimpleImageMaker::SimpleImageMaker(const Image&,Image(*)(const Image&))ASimpleImageMaker(const Image& image, Image (*make)(const Image&))\u0003Upp\u0010SIMPLEIMAGEMAKER\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const!Upp::SimpleImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0001\u0000\u0004Make\u000EImage () const\"Upp::SimpleImageMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0015Upp::SimpleImageMaker\u0015UPP::SIMPLEIMAGEMAKER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\tMakeImage/Image (const Image &, Image (*)(const Image &))3Upp::MakeImage(const Image&,Image(*)(const Image&))@Image MakeImage(const Image& image, Image (*make)(const Image&))\u0003Upp\tMAKEIMAGE\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000EsCachedRescale\u0013Upp::sCachedRescale\u0013Upp::sCachedRescale\"sCachedRescale : public ImageMaker\u0003Upp\u000ESCACHEDRESCALE\u0013Upp::sCachedRescale\u0013UPP::SCACHEDRESCALE\u000FUpp::ImageMaker\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\n\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0003src\u0004Rect\u0018Upp::sCachedRescale::src\bRect src\u0003Upp\u0003SRC\u0013Upp::sCachedRescale\u0013UPP::SCACHEDRESCALE\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002sz\u0004Size\u0017Upp::sCachedRescale::sz\aSize sz\u0003Upp\u0002SZ\u0013Upp::sCachedRescale\u0013UPP::SCACHEDRESCALE\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003img\u0005Image\u0018Upp::sCachedRescale::img\tImage img\u0003Upp\u0003IMG\u0013Upp::sCachedRescale\u0013UPP::SCACHEDRESCALE\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006filter\u0003int\u001BUpp::sCachedRescale::filter\nint filter\u0003Upp\u0006FILTER\u0013Upp::sCachedRescale\u0013UPP::SCACHEDRESCALE\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const\u001FUpp::sCachedRescale::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0013Upp::sCachedRescale\u0013UPP::SCACHEDRESCALE\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0004Make\u000EImage () const Upp::sCachedRescale::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0013Upp::sCachedRescale\u0013UPP::SCACHEDRESCALE\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\rCachedRescale.Image (const Image &, Size, const Rect &, int)5Upp::CachedRescale(const Image&,Size,const Rect&,int)PImage CachedRescale(const Image& m, Size sz, const Rect& src, int filter = Null)\u0003Upp\rCACHEDRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\rCachedRescale Image (const Image &, Size, int))Upp::CachedRescale(const Image&,Size,int)?Image CachedRescale(const Image& m, Size sz, int filter = Null)\u0003Upp\rCACHEDRESCALE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0016CachedRescalePaintOnly.Image (const Image &, Size, const Rect &, int)>Upp::CachedRescalePaintOnly(const Image&,Size,const Rect&,int)YImage CachedRescalePaintOnly(const Image& m, Size sz, const Rect& src, int filter = Null)\u0003Upp\u0016CACHEDRESCALEPAINTONLY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000·\u0000\u0000\u0000\u0000\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u0016CachedRescalePaintOnly Image (const Image &, Size, int)2Upp::CachedRescalePaintOnly(const Image&,Size,int)HImage CachedRescalePaintOnly(const Image& m, Size sz, int filter = Null)\u0003Upp\u0016CACHEDRESCALEPAINTONLY\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\tsColorize\u000EUpp::sColorize\u000EUpp::sColorize\u001DsColorize : public ImageMaker\u0003Upp\tSCOLORIZE\u000EUpp::sColorize\u000EUPP::SCOLORIZE\u000FUpp::ImageMaker\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0000\u0000\u0000\n\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0003img\u0005Image\u0013Upp::sColorize::img\tImage img\u0003Upp\u0003IMG\u000EUpp::sColorize\u000EUPP::SCOLORIZE\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\u0000¿\u0000\u0000\u0000\f\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\u0005color\u0005Color\u0015Upp::sColorize::color\vColor color\u0003Upp\u0005COLOR\u000EUpp::sColorize\u000EUPP::SCOLORIZE\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0000Á\u0000\u0000\u0000\u0002\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const\u001AUpp::sColorize::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u000EUpp::sColorize\u000EUPP::SCOLORIZE\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0001\u0000\u0004Make\u000EImage () const\u001BUpp::sColorize::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u000EUpp::sColorize\u000EUPP::SCOLORIZE\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Í\u0000\u0000\u0000\u0000\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0017CachedSetColorKeepAlpha\u001CImage (const Image &, Color)0Upp::CachedSetColorKeepAlpha(const Image&,Color)<Image CachedSetColorKeepAlpha(const Image& img, Color color)\u0003Upp\u0017CACHEDSETCOLORKEEPALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000 CachedSetColorKeepAlphaPaintOnly\u001CImage (const Image &, Color)9Upp::CachedSetColorKeepAlphaPaintOnly(const Image&,Color)EImage CachedSetColorKeepAlphaPaintOnly(const Image& img, Color color)\u0003Upp CACHEDSETCOLORKEEPALPHAPAINTONLY\u0003Upp\u0003UPP\u0000\u0000end\u0000\n\u001C\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DrawRasterData.cpp","value":"data\u000E\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u000FcDrawRasterData\u0014Upp::cDrawRasterData\u0014Upp::cDrawRasterData\u001CcDrawRasterData : DataDrawer\u0003Upp\u000FCDRAWRASTERDATA\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u000FUpp::DataDrawer\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0002cx\u0003int\u0018Upp::cDrawRasterData::cx\u0006int cx\u0003Upp\u0002CX\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0002ss\fStringStream\u0018Upp::cDrawRasterData::ss\u000FStringStream ss\u0003Upp\u0002SS\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u001A\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0006raster\u0011One<StreamRaster>\u001CUpp::cDrawRasterData::raster\u0018One<StreamRaster> raster\u0003Upp\u0006RASTER\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0016\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0002si\fRescaleImage\u0018Upp::cDrawRasterData::si\u000FRescaleImage si\u0003Upp\u0002SI\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u00006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0001\u0000\u0004Open\u001Fvoid (const String &, int, int)1Upp::cDrawRasterData::Open(const String&,int,int)-void Open(const String& data, int cx, int cy)\u0003Upp\u0004OPEN\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000%\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u0014void (ImageBuffer &)*Upp::cDrawRasterData::Render(ImageBuffer&)\u001Cvoid Render(ImageBuffer& ib)\u0003Upp\u0006RENDER\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0001\u0000\u0004Open\u001Fvoid (const String &, int, int)1Upp::cDrawRasterData::Open(const String&,int,int).void Open(const String& data, int _cx, int cy)\u0003Upp\u0004OPEN\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0001\u0000\u0006Render\u0014void (ImageBuffer &)*Upp::cDrawRasterData::Render(ImageBuffer&)\u001Cvoid Render(ImageBuffer& ib)\u0003Upp\u0006RENDER\u0014Upp::cDrawRasterData\u0014UPP::CDRAWRASTERDATA\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0001\rs__sF25_30_fn\avoid ()\u0014Upp::s__sF25_30_fn()\u001Bstatic void s__sF25_30_fn()\u0003Upp\rS__SF25_30_FN\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\t\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0001\ns__sF25_30\rUpp::Callinit\u000FUpp::s__sF25_30ostatic Upp::Callinit s__sF25_30(s__sF25_30_fn, \"C:\\\\Users\\\\sblo\\\\ai-upp\\\\uppsrc\\\\Draw\\\\DrawRasterData.cpp\", 30)\u0003Upp\nS__SF25_30\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\t\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0001\rs__sF25_30_fn\avoid ()\u0014Upp::s__sF25_30_fn()\u001Bstatic void s__sF25_30_fn()\u0003Upp\rS__SF25_30_FN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u000EDrawRasterData1void (Draw &, int, int, int, int, const String &)8Upp::DrawRasterData(Draw&,int,int,int,int,const String&)Nvoid DrawRasterData(Draw& w, int x, int y, int cx, int cy, const String& data)\u0003Upp\u000EDRAWRASTERDATA\u0003Upp\u0003UPP\u0000\u0000end\u0000\u0003\t\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Uhd.cpp","value":"data\n\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0001d\u0010int (RGBA, RGBA)#Upp::Upscale2x_helper::d(RGBA,RGBA)\u0017int d(RGBA c1, RGBA c2)\u0015Upp::Upscale2x_helper\u0001D\u0015Upp::Upscale2x_helper\u0015UPP::UPSCALE2X_HELPER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\nUpscale2x_\u0015Image (const Image &)\u001DUpp::Upscale2x_(const Image&)\"Image Upscale2x_(const Image& src)\u0003Upp\nUPSCALE2X_\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\tUpscale2x\u0015Image (const Image &)\u001CUpp::Upscale2x(const Image&)!Image Upscale2x(const Image& src)\u0003Upp\tUPSCALE2X\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\vDownscale2x\u0015Image (const Image &)\u001EUpp::Downscale2x(const Image&)#Image Downscale2x(const Image& src)\u0003Upp\vDOWNSCALE2X\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000\u0014\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0001\bsUHDMode\u0004bool\rUpp::sUHDMode\u0014static bool sUHDMode\u0003Upp\bSUHDMODE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\nSetUHDMode\vvoid (bool)\u0015Upp::SetUHDMode(bool)\u001Evoid SetUHDMode(bool b = true)\u0003Upp\nSETUHDMODE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000|\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\tIsUHDMode\abool ()\u0010Upp::IsUHDMode()\u0010bool IsUHDMode()\u0003Upp\tISUHDMODE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vSyncUHDMode\avoid ()\u0012Upp::SyncUHDMode()\u0012void SyncUHDMode()\u0003Upp\vSYNCUHDMODE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003DPI\u001AImage (const Image &, int)\u001AUpp::DPI(const Image&,int))Image DPI(const Image& img, int expected)\u0003Upp\u0003DPI\u0003Upp\u0003UPP\u0000\u0000end\u0000é\u0004\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Iml.cpp","value":"data\u0019\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0019UnpackImlDataUncompressed!Vector<ImageIml> (const String &)-Upp::UnpackImlDataUncompressed(const String&)>Vector<ImageIml> UnpackImlDataUncompressed(const String& data)\u0003Upp\u0019UNPACKIMLDATAUNCOMPRESSED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\rUnpackImlData$Vector<ImageIml> (const void *, int)#Upp::UnpackImlData(const void*,int)8Vector<ImageIml> UnpackImlData(const void *ptr, int len)\u0003Upp\rUNPACKIMLDATA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\rUnpackImlData!Vector<ImageIml> (const String &)!Upp::UnpackImlData(const String&)/Vector<ImageIml> UnpackImlData(const String& d)\u0003Upp\rUNPACKIMLDATA\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init\nvoid (int)\u0013Upp::Iml::Init(int)\u0010void Init(int n)\u0003Upp\u0004INIT\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0005Reset\avoid ()\u0011Upp::Iml::Reset()\fvoid Reset()\u0003Upp\u0005RESET\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set\u0019void (int, const Image &)\u001FUpp::Iml::Set(int,const Image&)!void Set(int i, const Image& img)\u0003Upp\u0003SET\bUpp::Iml\bUPP::IML\u0000\u0000\t\u0000\u0000\u0000\u0013\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u001B\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0001\bsImlLock\vStaticMutex\rUpp::sImlLock\u001Bstatic StaticMutex sImlLock\u0003Upp\bSIMLLOCK\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0006GetRaw\u0013ImageIml (int, int)\u0019Upp::Iml::GetRaw(int,int) ImageIml GetRaw(int mode, int i)\u0003Upp\u0006GETRAW\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0006GetRaw\u001EImageIml (int, const String &)#Upp::Iml::GetRaw(int,const String&)+ImageIml GetRaw(int mode, const String& id)\u0003Upp\u0006GETRAW\bUpp::Iml\bUPP::IML\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\fMakeImlImageGImage (const String &, Function<ImageIml (int, const String &)>, dword)/Upp::MakeImlImage(const String&,Function,dword)hImage MakeImlImage(const String& id, Function<ImageIml (int, const String&)> GetRaw, dword global_flags)\u0003Upp\fMAKEIMLIMAGE\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\vImage (int)\u0012Upp::Iml::Get(int)\u0010Image Get(int i)\u0003Upp\u0003GET\bUpp::Iml\bUPP::IML\u0000\u0000\u0018\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0003Iml\u0019void (const char **, int)\u001FUpp::Iml::Iml(const char**,int)\u001DIml(const char **name, int n)\u0003Upp\u0003IML\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\aAddData\"void (const byte *, int, int, int)*Upp::Iml::AddData(const byte*,int,int,int)=void AddData(const byte *s, int len, int count, int mode = 0)\u0003Upp\aADDDATA\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000¬\u0000\u0000\u0000\u0000\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0005AddId\u0018void (int, const char *) Upp::Iml::AddId(int,const char*)'void AddId(int mode1, const char *name)\u0003Upp\u0005ADDID\bUpp::Iml\bUPP::IML\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\bResetAll\avoid ()\u0014Upp::Iml::ResetAll()\u000Fvoid ResetAll()\u0003Upp\bRESETALL\bUpp::Iml\bUPP::IML\u0000\u0000\t\u0000\u0000\u0000\u001D\u0000\u0000\u0000·\u0000\u0000\u0000\u0000\u0000\u0000\u0000·\u0000\u0000\u0000(\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0001\vsImgMapLock\u0015StaticCriticalSection\u0010Upp::sImgMapLock(static StaticCriticalSection sImgMapLock\u0003Upp\vSIMGMAPLOCK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000!\u0000\u0000\u0000¹\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0000\u0001\asImgMap\u001CVectorMap<String, Iml *> &()\u000EUpp::sImgMap()*static VectorMap<String, Iml *>& sImgMap()\u0003Upp\aSIMGMAP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\bRegister\u001Avoid (const char *, Iml &)\u001FUpp::Register(const char*,Iml&)0void Register(const char *imageclass, Iml& list)\u0003Upp\bREGISTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000È\u0000\u0000\u0000\u0000\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\vGetImlCount\u0006int ()\u0012Upp::GetImlCount()\u0011int GetImlCount()\u0003Upp\vGETIMLCOUNT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0006GetIml\nIml &(int)\u0010Upp::GetIml(int)\u0012Iml& GetIml(int i)\u0003Upp\u0006GETIML\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\nGetImlName\fString (int)\u0014Upp::GetImlName(int)\u0018String GetImlName(int i)\u0003Upp\nGETIMLNAME\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000Û\u0000\u0000\u0000\u0000\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\aFindIml\u0012int (const char *)\u0019Upp::FindIml(const char*)\u001Dint FindIml(const char *name)\u0003Upp\aFINDIML\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\vGetImlImage\u0014Image (const char *)\u001DUpp::GetImlImage(const char*)#Image GetImlImage(const char *name)\u0003Upp\vGETIMLIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ô\u0000\u0000\u0000\u0000\u0000\u0000\u0000ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\vSetImlImage\"void (const char *, const Image &)*Upp::SetImlImage(const char*,const Image&)2void SetImlImage(const char *name, const Image& m)\u0003Upp\vSETIMLIMAGE\u0003Upp\u0003UPP\u0000\u0000end\u0000ç\u000E\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\DDARasterizer.cpp","value":"data\u0015\u0018\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\rDDARasterizer\avoid ()#Upp::DDARasterizer::DDARasterizer()\u000FDDARasterizer()\u0003Upp\rDDARASTERIZER\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0005AHorz\u0014void (int, int, int)&Upp::DDARasterizer::AHorz(int,int,int) void AHorz(int x, int y, int cx)\u0003Upp\u0005AHORZ\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0005AVert\u0014void (int, int, int)&Upp::DDARasterizer::AVert(int,int,int) void AVert(int x, int y, int cy)\u0003Upp\u0005AVERT\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0006DoLine\u0019void (Point, Point, bool),Upp::DDARasterizer::DoLine(Point,Point,bool)*void DoLine(Point p1, Point p2, bool last)\u0003Upp\u0006DOLINE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0002\u0000\u0000\u0000\u0016\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\bSegments\u001CUpp::DDARasterizer::Segments\u001CUpp::DDARasterizer::Segments'DDARasterizer::Segments : DDARasterizer\u0003Upp\bSEGMENTS\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0012Upp::DDARasterizer\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000\u0011\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0004miny\u0003int\"Upp::DDARasterizer::Segments::miny\bint miny\u0003Upp\u0004MINY\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0011\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0004maxy\u0003int\"Upp::DDARasterizer::Segments::maxy\bint maxy\u0003Upp\u0004MAXY\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0011\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0004flag\u0004bool\"Upp::DDARasterizer::Segments::flag\tbool flag\u0003Upp\u0004FLAG\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0006\u0000\u0000\u0000\u001D\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000$\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\asegment\u0017Vector<Vector<Segment>>%Upp::DDARasterizer::Segments::segment\u001FVector<Vector<Segment>> segment\u0003Upp\aSEGMENT\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000\u0002\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0001\u0000\aPutHorz\u0014void (int, int, int)2Upp::DDARasterizer::Segments::PutHorz(int,int,int)\"void PutHorz(int x, int y, int cx)\u0003Upp\aPUTHORZ\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0002\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0001\u0000\aPutVert\u0014void (int, int, int)2Upp::DDARasterizer::Segments::PutVert(int,int,int)\"void PutVert(int x, int y, int cy)\u0003Upp\aPUTVERT\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000)\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\bSegments\avoid ()(Upp::DDARasterizer::Segments::Segments()\nSegments()\u0003Upp\bSEGMENTS\u001CUpp::DDARasterizer::Segments\u001CUPP::DDARASTERIZER::SEGMENTS\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aFatLine\fvoid (Point)\"Upp::DDARasterizer::FatLine(Point)\u0016void FatLine(Point p2)\u0003Upp\aFATLINE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Move\u0016DDARasterizer &(Point)\u001FUpp::DDARasterizer::Move(Point)\u001CDDARasterizer& Move(Point p)\u0003Upp\u0004MOVE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line\u0016DDARasterizer &(Point)\u001FUpp::DDARasterizer::Line(Point)\u001CDDARasterizer& Line(Point p)\u0003Upp\u0004LINE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0005Close\u0011DDARasterizer &()\u001BUpp::DDARasterizer::Close()\u0016DDARasterizer& Close()\u0003Upp\u0005CLOSE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000½\u0000\u0000\u0000\u0000\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\aPolygon\u0011DDARasterizer &()\u001DUpp::DDARasterizer::Polygon()\u0018DDARasterizer& Polygon()\u0003Upp\aPOLYGON\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill\u0011DDARasterizer &()\u001AUpp::DDARasterizer::Fill()\u0015DDARasterizer& Fill()\u0003Upp\u0004FILL\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\aEllipse\"DDARasterizer &(const Rect &, int),Upp::DDARasterizer::Ellipse(const Rect&,int)0DDARasterizer& Ellipse(const Rect& r, int width)\u0003Upp\aELLIPSE\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000\u0019\u0000\u0000\u0000\u000F\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\"\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0000\u0000\u000E~DDARasterizer\u0010void () noexcept\u0017Upp::DDARasterizer::~()\u0010~DDARasterizer()\u0003Upp\u000E~DDARASTERIZER\u0012Upp::DDARasterizer\u0012UPP::DDARASTERIZER\u0000\u0000end\u0000\n\u000E\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SDrawClip.cpp","value":"data\v\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init\u0013void (const Rect &)\u001DUpp::SDraw::Init(const Rect&)\u0018void Init(const Rect& r)\u0003Upp\u0004INIT\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init'void (const Vector<Rect> &, int, Point))Upp::SDraw::Init(const Vector&,int,Point)Ivoid Init(const Vector<Rect>& rs, int height, Point offset = Point(0, 0))\u0003Upp\u0004INIT\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u0015Upp::SDraw::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)\u001FUpp::SDraw::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0001\u0000\tClipoffOp\u0013bool (const Rect &)\"Upp::SDraw::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)(Upp::SDraw::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)&Upp::SDraw::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const*Upp::SDraw::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0001\u0000\bOffsetOp\fvoid (Point)\u001BUpp::SDraw::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u0013Upp::SDraw::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000end\u0000\\\u0006\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SDrawPut.cpp","value":"data\a\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0001\u0000\bPutImage0void (Point, const Image &, const Rect &, Color):Upp::SDraw::PutImage(Point,const Image&,const Rect&,Color)Fvoid PutImage(Point p, const Image& img, const Rect& src, Color color)\u0003Upp\bPUTIMAGE\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0001\u0000\u000ESysDrawImageOp3void (int, int, const Image &, const Rect &, Color)BUpp::SDraw::SysDrawImageOp(int,int,const Image&,const Rect&,Color)Qvoid SysDrawImageOp(int x, int y, const Image& img, const Rect& src, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0001\u0000\u000ESysDrawImageOp%void (int, int, const Image &, Color)6Upp::SDraw::SysDrawImageOp(int,int,const Image&,Color)@void SysDrawImageOp(int x, int y, const Image& img, Color color)\u0003Upp\u000ESYSDRAWIMAGEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)-Upp::SDraw::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0001\u0000\aPutHorz\u0014void (int, int, int) Upp::SDraw::PutHorz(int,int,int)\"void PutHorz(int x, int y, int cx)\u0003Upp\aPUTHORZ\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0001\u0000\aPutVert\u0014void (int, int, int) Upp::SDraw::PutVert(int,int,int)\"void PutVert(int x, int y, int cy)\u0003Upp\aPUTVERT\nUpp::SDraw\nUPP::SDRAW\u0000\u0000end\u0000E\u0005\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SDrawText.cpp","value":"data\u000Eõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000X\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0014RenderGlyphByPainter*Image (Point, int, int, Font, Color, Size)8Upp::RenderGlyphByPainter(Point,int,int,Font,Color,Size)XImage RenderGlyphByPainter(Point at, int angle, int chr, Font fnt, Color color, Size sz)\u0003Upp\u0014RENDERGLYPHBYPAINTER\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0001\u0000\vRenderGlyph*Image (Point, int, int, Font, Color, Size)6Upp::SDraw::RenderGlyph(Point,int,int,Font,Color,Size)OImage RenderGlyph(Point at, int angle, int chr, Font fnt, Color color, Size sz)\u0003Upp\vRENDERGLYPH\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u000EsMakeTextGlyph\u0013Upp::sMakeTextGlyph\u0013Upp::sMakeTextGlyph\"sMakeTextGlyph : public ImageMaker\u0003Upp\u000ESMAKETEXTGLYPH\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u000FUpp::ImageMaker\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\v\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0003chr\u0003int\u0018Upp::sMakeTextGlyph::chr\aint chr\u0003Upp\u0003CHR\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\f\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u0019Upp::sMakeTextGlyph::font\tFont font\u0003Upp\u0004FONT\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\r\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0005angle\u0003int\u001AUpp::sMakeTextGlyph::angle\tint angle\u0003Upp\u0005ANGLE\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\r\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0005color\u0005Color\u001AUpp::sMakeTextGlyph::color\vColor color\u0003Upp\u0005COLOR\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\f\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0004draw\aSDraw *\u0019Upp::sMakeTextGlyph::draw\vSDraw *draw\u0003Upp\u0004DRAW\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0002yy\u0003int\u0017Upp::sMakeTextGlyph::yy\u0006int yy\u0003Upp\u0002YY\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const\u001FUpp::sMakeTextGlyph::Key()const\u0012String Key() const\u0003Upp\u0003KEY\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0002\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0001\u0000\u0004Make\u000EImage () const Upp::sMakeTextGlyph::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE\u0013Upp::sMakeTextGlyph\u0013UPP::SMAKETEXTGLYPH\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)JUpp::SDraw::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000end\u0000¢\b\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SDraw.cpp","value":"data\a\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000Edword () const\u001AUpp::SDraw::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color)8Upp::SDraw::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)6Upp::SDraw::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)1Upp::SDraw::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)nUpp::SDraw::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÁ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices0, int, const int *subpolygon_counts0, int, const int *disjunct_polygon_counts0, int dpcc0, Color color, int width, Color outline, uint64, Color)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)OUpp::SDraw::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\nUpp::SDraw\nUPP::SDRAW\u0000\u0000end\u0000û\u0006\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SImageDraw.cpp","value":"data\b\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0001\u0000\bPutImage)void (Point, const Image &, const Rect &):Upp::SImageDraw1::PutImage(Point,const Image&,const Rect&)7void PutImage(Point p, const Image& m, const Rect& src)\u0003Upp\bPUTIMAGE\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0001\u0000\aPutRect\u001Avoid (const Rect &, Color),Upp::SImageDraw1::PutRect(const Rect&,Color)(void PutRect(const Rect& r, Color color)\u0003Upp\aPUTRECT\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\vvoid (Size)\u001EUpp::SImageDraw1::Create(Size)\u0014void Create(Size sz)\u0003Upp\u0006CREATE\u0010Upp::SImageDraw1\u0010UPP::SIMAGEDRAW1\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0005Alpha\bDraw &()\u0018Upp::SImageDraw::Alpha()\rDraw& Alpha()\u0003Upp\u0005ALPHA\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u001A\u0000\u0000\u0000\f\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u000Eoperator Image\u000EImage () const&Upp::SImageDraw::operator Image()const\u0016operator Image() const\u0003Upp\u000EOPERATOR IMAGE\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u0018\u0000\u0000\u0000\f\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\nSImageDraw\vvoid (Size)!Upp::SImageDraw::SImageDraw(Size)\u0013SImageDraw(Size sz)\u0003Upp\nSIMAGEDRAW\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000\u0018\u0000\u0000\u0000\f\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\nSImageDraw\u000Fvoid (int, int)$Upp::SImageDraw::SImageDraw(int,int)\u001ASImageDraw(int cx, int cy)\u0003Upp\nSIMAGEDRAW\u000FUpp::SImageDraw\u000FUPP::SIMAGEDRAW\u0000\u0000end\u0000Õ\u0004\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\Cham.cpp","value":"data@õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0006LOGPNG\u0000\u0006LOGPNG\u0006LOGPNG\u0000\u0006LOGPNG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0016\u0000\u0000\u0000\b\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\aLTIMING\u0000\aLTIMING\aLTIMING\u0000\aLTIMING\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\vsChLookWith\u0010Upp::sChLookWith\u0010Upp::sChLookWith\vsChLookWith\u0003Upp\vSCHLOOKWITH\u0010Upp::sChLookWith\u0010UPP::SCHLOOKWITH\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\v\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0004look\u0005Value\u0016Upp::sChLookWith::look\nValue look\u0003Upp\u0004LOOK\u0010Upp::sChLookWith\u0010UPP::SCHLOOKWITH\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\n\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0003img\u0005Image\u0015Upp::sChLookWith::img\tImage img\u0003Upp\u0003IMG\u0010Upp::sChLookWith\u0010UPP::SCHLOOKWITH\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\acolorfn\u000EColor (*)(int)\u0019Upp::sChLookWith::colorfn\u0015Color (*colorfn)(int)\u0003Upp\aCOLORFN\u0010Upp::sChLookWith\u0010UPP::SCHLOOKWITH\u0000\u0000\n\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0001i\u0003int\u0001i\u0005int i\u0000\u0001I\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\t\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0002ii\u0003int\u0014Upp::sChLookWith::ii\u0006int ii\u0003Upp\u0002II\u0010Upp::sChLookWith\u0010UPP::SCHLOOKWITH\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\f\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0005color\u0005Color\u0017Upp::sChLookWith::color\vColor color\u0003Upp\u0005COLOR\u0010Upp::sChLookWith\u0010UPP::SCHLOOKWITH\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\r\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0006offset\u0005Point\u0018Upp::sChLookWith::offset\fPoint offset\u0003Upp\u0006OFFSET\u0010Upp::sChLookWith\u0010UPP::SCHLOOKWITH\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\nChLookWith+Value (const Value &, const Image &, Point)0Upp::ChLookWith(const Value&,const Image&,Point)QValue ChLookWith(const Value& look, const Image& img, Point offset = Point(0, 0))\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\nChLookWith2Value (const Value &, const Image &, Color, Point)6Upp::ChLookWith(const Value&,const Image&,Color,Point)^Value ChLookWith(const Value& look, const Image& img, Color color, Point offset = Point(0, 0))\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\nChLookWith@Value (const Value &, const Image &, Color (*)(int), int, Point)BUpp::ChLookWith(const Value&,const Image&,Color(*)(int),int,Point)mValue ChLookWith(const Value& look, const Image& img, Color (*color)(int), int i, Point offset = Point(0, 0))\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\nChLookWith1void (Value *, const Image &, const Color *, int)5Upp::ChLookWith(Value*,const Image&,const Color*,int)Ovoid ChLookWith(Value *look, const Image& image, const Color *color, int n = 4)\u0003Upp\nCHLOOKWITH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000M\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0005sChOp7Value (Draw &, const Rect &, const Value &, int, Color)4Upp::sChOp(Draw&,const Rect&,const Value&,int,Color)MValue sChOp(Draw& w, const Rect& r, const Value& v, int op, Color ink = Null)\u0003Upp\u0005SCHOP\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\tsChBorder\u000EUpp::sChBorder\u000EUpp::sChBorder\tsChBorder\u0003Upp\tSCHBORDER\u000EUpp::sChBorder\u000EUPP::SCHBORDER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0015\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0006border\u000Econst ColorF *\u0016Upp::sChBorder::border\u0014const ColorF *border\u0003Upp\u0006BORDER\u000EUpp::sChBorder\u000EUPP::SCHBORDER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\v\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0004face\u0005Value\u0014Upp::sChBorder::face\nValue face\u0003Upp\u0004FACE\u000EUpp::sChBorder\u000EUPP::SCHBORDER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\bChBorder%Value (const ColorF *, const Value &))Upp::ChBorder(const ColorF*,const Value&)FValue ChBorder(const ColorF *colors, const Value& face = SColorFace())\u0003Upp\bCHBORDER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0013sDrawScrollbarThumb6void (Draw &, int, int, int, int, const Image &, bool)AUpp::sDrawScrollbarThumb(Draw&,int,int,int,int,const Image&,bool)astatic void sDrawScrollbarThumb(Draw& w, int x, int y, int cx, int cy, const Image& m, bool vert)\u0003Upp\u0013SDRAWSCROLLBARTHUMB\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0001\u0000\u0000\u0001\u0000\u0000\vStdChLookFn7Value (Draw &, const Rect &, const Value &, int, Color):Upp::StdChLookFn(Draw&,const Rect&,const Value&,int,Color)LValue StdChLookFn(Draw& w, const Rect& r, const Value& v, int op, Color ink)\u0003Upp\vSTDCHLOOKFN\u0003Upp\u0003UPP\u0000\u0000\u0014\u0000\u0000\u0000\u0010\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000W\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\vChPainterFn\u0010Upp::ChPainterFn\u0010Upp::ChPainterFnJtypedef Value (*ChPainterFn)(Draw&, const Rect&, const Value&, int, Color)\u0003Upp\vCHPAINTERFN\u0003Upp\u0003UPP\u0000\u0000\n\u0000\u0000\u0000#\u0000\u0000\u0000\\\u0001\u0000\u0000\u001D\u0000\u0000\u0000\\\u0001\u0000\u0000$\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0001w\u0006Draw &\u0001w\aDraw& w\u0000\u0001W\u0000\u0000\u0000\u0000\n\u0000\u0000\u00002\u0000\u0000\u0000\\\u0001\u0000\u0000&\u0000\u0000\u0000\\\u0001\u0000\u00003\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0001r\fconst Rect &\u0001r\rconst Rect& r\u0000\u0001R\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000B\u0000\u0000\u0000\\\u0001\u0000\u00005\u0000\u0000\u0000\\\u0001\u0000\u0000C\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0001v\rconst Value &\u0001v\u000Econst Value& v\u0000\u0001V\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000I\u0000\u0000\u0000\\\u0001\u0000\u0000E\u0000\u0000\u0000\\\u0001\u0000\u0000K\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0002op\u0003int\u0002op\u0006int op\u0000\u0002OP\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000S\u0000\u0000\u0000\\\u0001\u0000\u0000M\u0000\u0000\u0000\\\u0001\u0000\u0000V\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0003ink\u0005Color\u0003ink\tColor ink\u0000\u0003INK\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0015\u0000\u0000\u0000^\u0001\u0000\u0000\u0000\u0000\u0000\u0000^\u0001\u0000\u0000\u0001\u0000\u0000\u0000b\u0001\u0000\u0000\u0001\u0000\u0000\u0005sChps\u0017Vector<ChPainterFn> &()\fUpp::sChps()\u001CVector<ChPainterFn>& sChps()\u0003Upp\u0005SCHPS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000d\u0001\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0000\u0000\u0001\u0000\u0000\u0000h\u0001\u0000\u0000\u0001\u0000\u0000\bChLookFnAvoid (Value (*)(Draw &, const Rect &, const Value &, int, Color))AUpp::ChLookFn(Value(*)(Draw&,const Rect&,const Value&,int,Color))Hvoid ChLookFn(Value (*fn)(Draw&, const Rect&, const Value&, int, Color))\u0003Upp\bCHLOOKFN\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0001\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\bsStyleCh\rUpp::sStyleCh\rUpp::sStyleCh\u001DsStyleCh : Moveable<sStyleCh>\u0003Upp\bSSTYLECH\rUpp::sStyleCh\rUPP::SSTYLECH\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000k\u0001\u0000\u0000\u0001\u0000\u0000\u0000k\u0001\u0000\u0000\r\u0000\u0000\u0000k\u0001\u0000\u0000\u0001\u0000\u0000\u0006status\u0006byte *\u0015Upp::sStyleCh::status\fbyte *status\u0003Upp\u0006STATUS\rUpp::sStyleCh\rUPP::SSTYLECH\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000l\u0001\u0000\u0000\u0001\u0000\u0000\u0000l\u0001\u0000\u0000\u000F\u0000\u0000\u0000l\u0001\u0000\u0000\u0001\u0000\u0000\u0004init\nvoid (*)()\u0013Upp::sStyleCh::init\u000Evoid (*init)()\u0003Upp\u0004INIT\rUpp::sStyleCh\rUPP::SSTYLECH\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000o\u0001\u0000\u0000\u0000\u0000\u0000\u0000o\u0001\u0000\u0000\u0001\u0000\u0000\u0000s\u0001\u0000\u0000\u0001\u0000\u0000\bsChStyle\u0014Vector<sStyleCh> &()\u000FUpp::sChStyle()\u001CVector<sStyleCh>& sChStyle()\u0003Upp\bSCHSTYLE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000u\u0001\u0000\u0000\u0000\u0000\u0000\u0000u\u0001\u0000\u0000\u0001\u0000\u0000\u0000}\u0001\u0000\u0000\u0001\u0000\u0000\u0011ChRegisterStyle__!void (byte &, byte &, void (*)())-Upp::ChRegisterStyle__(byte&,byte&,void(*)())Evoid ChRegisterStyle__(byte& state, byte& registered, void (*init)())\u0003Upp\u0011CHREGISTERSTYLE__\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u001D\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0001\u0000\u0001\nsChInvalid\u0004bool\u000FUpp::sChInvalid\u0016static bool sChInvalid\u0003Upp\nSCHINVALID\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\fChInvalidate\avoid ()\u0013Upp::ChInvalidate()\u0013void ChInvalidate()\u0003Upp\fCHINVALIDATE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000FChIsInvalidated\abool ()\u0016Upp::ChIsInvalidated()\u0016bool ChIsInvalidated()\u0003Upp\u000FCHISINVALIDATED\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0001\u0017sLabelTextColorMismatch\u0004bool\u001CUpp::sLabelTextColorMismatch#static bool sLabelTextColorMismatch\u0003Upp\u0017SLABELTEXTCOLORMISMATCH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0018IsLabelTextColorMismatch\abool ()\u001FUpp::IsLabelTextColorMismatch()\u001Fbool IsLabelTextColorMismatch()\u0003Upp\u0018ISLABELTEXTCOLORMISMATCH\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0001\u0010sIsDarkColorFace\u0004bool\u0015Upp::sIsDarkColorFace\u001Cstatic bool sIsDarkColorFace\u0003Upp\u0010SISDARKCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000FIsDarkColorFace\abool ()\u0016Upp::IsDarkColorFace()\u0016bool IsDarkColorFace()\u0003Upp\u000FISDARKCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aChReset\avoid ()\u000EUpp::ChReset()\u000Evoid ChReset()\u0003Upp\aCHRESET\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¡\u0001\u0000\u0000\u0000\u0000\u0000\u0000¡\u0001\u0000\u0000\u0001\u0000\u0000\u0000¨\u0001\u0000\u0000\u0001\u0000\u0000\bChFinish\avoid ()\u000FUpp::ChFinish()\u000Fvoid ChFinish()\u0003Upp\bCHFINISH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0000¶\u0001\u0000\u0000\u0001\u0000\u0000\u0005sChOp7Value (Draw &, const Rect &, const Value &, int, Color)4Upp::sChOp(Draw&,const Rect&,const Value&,int,Color)MValue sChOp(Draw& w, const Rect& r, const Value& v, int op, Color ink = Null)\u0003Upp\u0005SCHOP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¸\u0001\u0000\u0000\u0000\u0000\u0000\u0000¸\u0001\u0000\u0000\u0001\u0000\u0000\u0000»\u0001\u0000\u0000\u0001\u0000\u0000\aChPaint1void (Draw &, const Rect &, const Value &, Color)2Upp::ChPaint(Draw&,const Rect&,const Value&,Color)Ivoid ChPaint(Draw& w, const Rect& r, const Value& look, Color ink = Null)\u0003Upp\aCHPAINT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000½\u0001\u0000\u0000\u0000\u0000\u0000\u0000½\u0001\u0000\u0000\u0001\u0000\u0000\u0000À\u0001\u0000\u0000\u0001\u0000\u0000\aChPaint7void (Draw &, int, int, int, int, const Value &, Color)6Upp::ChPaint(Draw&,int,int,int,int,const Value&,Color)Xvoid ChPaint(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\aCHPAINT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Â\u0001\u0000\u0000\u0000\u0000\u0000\u0000Â\u0001\u0000\u0000\u0001\u0000\u0000\u0000Å\u0001\u0000\u0000\u0001\u0000\u0000\u000EChPaintNoCache7void (Draw &, int, int, int, int, const Value &, Color)=Upp::ChPaintNoCache(Draw&,int,int,int,int,const Value&,Color)_void ChPaintNoCache(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\u000ECHPAINTNOCACHE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0001\u0000\u0000\vChPaintEdge1void (Draw &, const Rect &, const Value &, Color)6Upp::ChPaintEdge(Draw&,const Rect&,const Value&,Color)Mvoid ChPaintEdge(Draw& w, const Rect& r, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTEDGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0001\u0000\u0000\u0001\u0000\u0000\vChPaintEdge7void (Draw &, int, int, int, int, const Value &, Color):Upp::ChPaintEdge(Draw&,int,int,int,int,const Value&,Color)\\void ChPaintEdge(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTEDGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ñ\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ñ\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0001\u0000\u0000\u0001\u0000\u0000\vChPaintBody1void (Draw &, const Rect &, const Value &, Color)6Upp::ChPaintBody(Draw&,const Rect&,const Value&,Color)Mvoid ChPaintBody(Draw& w, const Rect& r, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTBODY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0001\u0000\u0000\u0001\u0000\u0000\vChPaintBody7void (Draw &, int, int, int, int, const Value &, Color):Upp::ChPaintBody(Draw&,int,int,int,int,const Value&,Color)\\void ChPaintBody(Draw& w, int x, int y, int cx, int cy, const Value& look, Color ink = Null)\u0003Upp\vCHPAINTBODY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ß\u0001\u0000\u0000\u0000\u0000\u0000\u0000ß\u0001\u0000\u0000\u0001\u0000\u0000\u0000ã\u0001\u0000\u0000\u0001\u0000\u0000\tChMargins\u0014Rect (const Value &)\u001CUpp::ChMargins(const Value&)!Rect ChMargins(const Value& look)\u0003Upp\tCHMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000å\u0001\u0000\u0000\u0000\u0000\u0000\u0000å\u0001\u0000\u0000\u0001\u0000\u0000\u0000è\u0001\u0000\u0000\u0001\u0000\u0000\u000EDeflateMargins\u001Bvoid (Rect &, const Rect &)&Upp::DeflateMargins(Rect&,const Rect&)+void DeflateMargins(Rect& r, const Rect& m)\u0003Upp\u000EDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000ê\u0001\u0000\u0000\u0000\u0000\u0000\u0000ê\u0001\u0000\u0000\u0001\u0000\u0000\u0000í\u0001\u0000\u0000\u0001\u0000\u0000\u0010ChDeflateMargins\u001Cvoid (Rect &, const Value &))Upp::ChDeflateMargins(Rect&,const Value&)1void ChDeflateMargins(Rect& r, const Value& look)\u0003Upp\u0010CHDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ï\u0001\u0000\u0000\u0000\u0000\u0000\u0000ï\u0001\u0000\u0000\u0001\u0000\u0000\u0000ò\u0001\u0000\u0000\u0001\u0000\u0000\u000EDeflateMargins\u001Bvoid (Size &, const Rect &)&Upp::DeflateMargins(Size&,const Rect&),void DeflateMargins(Size& sz, const Rect& m)\u0003Upp\u000EDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000ô\u0001\u0000\u0000\u0000\u0000\u0000\u0000ô\u0001\u0000\u0000\u0001\u0000\u0000\u0000÷\u0001\u0000\u0000\u0001\u0000\u0000\u0010ChDeflateMargins\u001Cvoid (Size &, const Value &))Upp::ChDeflateMargins(Size&,const Value&)2void ChDeflateMargins(Size& sz, const Value& look)\u0003Upp\u0010CHDEFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000ù\u0001\u0000\u0000\u0000\u0000\u0000\u0000ù\u0001\u0000\u0000\u0001\u0000\u0000\u0000ü\u0001\u0000\u0000\u0001\u0000\u0000\u000EInflateMargins\u001Bvoid (Rect &, const Rect &)&Upp::InflateMargins(Rect&,const Rect&)+void InflateMargins(Rect& r, const Rect& m)\u0003Upp\u000EINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000þ\u0001\u0000\u0000\u0000\u0000\u0000\u0000þ\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0001\u0000\u0000\u0010ChInflateMargins\u001Cvoid (Rect &, const Value &))Upp::ChInflateMargins(Rect&,const Value&)1void ChInflateMargins(Rect& r, const Value& look)\u0003Upp\u0010CHINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0002\u0000\u0000\u0001\u0000\u0000\u000EInflateMargins\u001Bvoid (Size &, const Rect &)&Upp::InflateMargins(Size&,const Rect&),void InflateMargins(Size& sz, const Rect& m)\u0003Upp\u000EINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\b\u0002\u0000\u0000\u0000\u0000\u0000\u0000\b\u0002\u0000\u0000\u0001\u0000\u0000\u0000\v\u0002\u0000\u0000\u0001\u0000\u0000\u0010ChInflateMargins\u001Cvoid (Size &, const Value &))Upp::ChInflateMargins(Size&,const Value&)2void ChInflateMargins(Size& sz, const Value& look)\u0003Upp\u0010CHINFLATEMARGINS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\r\u0002\u0000\u0000\u0000\u0000\u0000\u0000\r\u0002\u0000\u0000\u0001\u0000\u0000\u00007\u0002\u0000\u0000\u0001\u0000\u0000\fAdjustColors\u0015Image (const Image &)\u001FUpp::AdjustColors(const Image&)%Image AdjustColors(const Image& simg)\u0003Upp\fADJUSTCOLORS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00009\u0002\u0000\u0000\u0000\u0000\u0000\u00009\u0002\u0000\u0000\u0001\u0000\u0000\u0000D\u0002\u0000\u0000\u0001\u0000\u0000\bOverride\u0019void (Iml &, Iml &, bool)\u001DUpp::Override(Iml&,Iml&,bool)=void Override(Iml& target, Iml& source, bool colored = false)\u0003Upp\bOVERRIDE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000F\u0002\u0000\u0000\u0000\u0000\u0000\u0000F\u0002\u0000\u0000\u0001\u0000\u0000\u0000I\u0002\u0000\u0000\u0001\u0000\u0000\u000FColoredOverride\u0013void (Iml &, Iml &)\u001FUpp::ColoredOverride(Iml&,Iml&).void ColoredOverride(Iml& target, Iml& source)\u0003Upp\u000FCOLOREDOVERRIDE\u0003Upp\u0003UPP\u0000\u0000end\u0000¬)\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Draw\\SColors.cpp","value":"data§\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000'\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\fSBlack_Write\fvoid (Color)\u0018Upp::SBlack_Write(Color)\u001Avoid SBlack_Write(Color v)\u0003Upp\fSBLACK_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000'\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0006SBlack\bColor ()\rUpp::SBlack()\u000EColor SBlack()\u0003Upp\u0006SBLACK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000'\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_var__SBlack\vChColor &()\u0015Upp::ch_var__SBlack()\u0019ChColor& ch_var__SBlack()\u0003Upp\u000ECH_VAR__SBLACK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000'\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_init__SBlack\avoid ()\u0016Upp::ch_init__SBlack()\u0016void ch_init__SBlack()\u0003Upp\u000FCH_INIT__SBLACK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\rch_var__SGray\vChColor &()\u0014Upp::ch_var__SGray()\u0018ChColor& ch_var__SGray()\u0003Upp\rCH_VAR__SGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_init__SGray\avoid ()\u0015Upp::ch_init__SGray()\u0015void ch_init__SGray()\u0003Upp\u000ECH_INIT__SGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\vSGray_Write\fvoid (Color)\u0017Upp::SGray_Write(Color)\u0019void SGray_Write(Color v)\u0003Upp\vSGRAY_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\rch_var__SGray\vChColor &()\u0014Upp::ch_var__SGray()\u0018ChColor& ch_var__SGray()\u0003Upp\rCH_VAR__SGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000%\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0005SGray\bColor ()\fUpp::SGray()\rColor SGray()\u0003Upp\u0005SGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\rSLtGray_Write\fvoid (Color)\u0019Upp::SLtGray_Write(Color)\u001Bvoid SLtGray_Write(Color v)\u0003Upp\rSLTGRAY_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u000Fch_var__SLtGray\vChColor &()\u0016Upp::ch_var__SLtGray()\u001AChColor& ch_var__SLtGray()\u0003Upp\u000FCH_VAR__SLTGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0010ch_init__SLtGray\avoid ()\u0017Upp::ch_init__SLtGray()\u0017void ch_init__SLtGray()\u0003Upp\u0010CH_INIT__SLTGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_var__SLtGray\vChColor &()\u0016Upp::ch_var__SLtGray()\u001AChColor& ch_var__SLtGray()\u0003Upp\u000FCH_VAR__SLTGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\aSLtGray\bColor ()\u000EUpp::SLtGray()\u000FColor SLtGray()\u0003Upp\aSLTGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0010SWhiteGray_Write\fvoid (Color)\u001CUpp::SWhiteGray_Write(Color)\u001Evoid SWhiteGray_Write(Color v)\u0003Upp\u0010SWHITEGRAY_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_var__SWhiteGray\vChColor &()\u0019Upp::ch_var__SWhiteGray()\u001DChColor& ch_var__SWhiteGray()\u0003Upp\u0012CH_VAR__SWHITEGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_init__SWhiteGray\avoid ()\u001AUpp::ch_init__SWhiteGray()\u001Avoid ch_init__SWhiteGray()\u0003Upp\u0013CH_INIT__SWHITEGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0012ch_var__SWhiteGray\vChColor &()\u0019Upp::ch_var__SWhiteGray()\u001DChColor& ch_var__SWhiteGray()\u0003Upp\u0012CH_VAR__SWHITEGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\nSWhiteGray\bColor ()\u0011Upp::SWhiteGray()\u0012Color SWhiteGray()\u0003Upp\nSWHITEGRAY\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000'\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_var__SWhite\vChColor &()\u0015Upp::ch_var__SWhite()\u0019ChColor& ch_var__SWhite()\u0003Upp\u000ECH_VAR__SWHITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000'\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_init__SWhite\avoid ()\u0016Upp::ch_init__SWhite()\u0016void ch_init__SWhite()\u0003Upp\u000FCH_INIT__SWHITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000'\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u000Ech_var__SWhite\vChColor &()\u0015Upp::ch_var__SWhite()\u0019ChColor& ch_var__SWhite()\u0003Upp\u000ECH_VAR__SWHITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000'\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0006SWhite\bColor ()\rUpp::SWhite()\u000EColor SWhite()\u0003Upp\u0006SWHITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000'\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\fSWhite_Write\fvoid (Color)\u0018Upp::SWhite_Write(Color)\u001Avoid SWhite_Write(Color v)\u0003Upp\fSWHITE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000#\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\fch_var__SRed\vChColor &()\u0013Upp::ch_var__SRed()\u0017ChColor& ch_var__SRed()\u0003Upp\fCH_VAR__SRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000#\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\rch_init__SRed\avoid ()\u0014Upp::ch_init__SRed()\u0014void ch_init__SRed()\u0003Upp\rCH_INIT__SRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000#\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\nSRed_Write\fvoid (Color)\u0016Upp::SRed_Write(Color)\u0018void SRed_Write(Color v)\u0003Upp\nSRED_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000#\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0004SRed\bColor ()\vUpp::SRed()\fColor SRed()\u0003Upp\u0004SRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000'\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\fSGreen_Write\fvoid (Color)\u0018Upp::SGreen_Write(Color)\u001Avoid SGreen_Write(Color v)\u0003Upp\fSGREEN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000'\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u000Ech_var__SGreen\vChColor &()\u0015Upp::ch_var__SGreen()\u0019ChColor& ch_var__SGreen()\u0003Upp\u000ECH_VAR__SGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000'\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_init__SGreen\avoid ()\u0016Upp::ch_init__SGreen()\u0016void ch_init__SGreen()\u0003Upp\u000FCH_INIT__SGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000'\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_var__SGreen\vChColor &()\u0015Upp::ch_var__SGreen()\u0019ChColor& ch_var__SGreen()\u0003Upp\u000ECH_VAR__SGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000'\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0006SGreen\bColor ()\rUpp::SGreen()\u000EColor SGreen()\u0003Upp\u0006SGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000'\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\fSBrown_Write\fvoid (Color)\u0018Upp::SBrown_Write(Color)\u001Avoid SBrown_Write(Color v)\u0003Upp\fSBROWN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000'\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u000Ech_var__SBrown\vChColor &()\u0015Upp::ch_var__SBrown()\u0019ChColor& ch_var__SBrown()\u0003Upp\u000ECH_VAR__SBROWN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000'\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_init__SBrown\avoid ()\u0016Upp::ch_init__SBrown()\u0016void ch_init__SBrown()\u0003Upp\u000FCH_INIT__SBROWN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000'\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_var__SBrown\vChColor &()\u0015Upp::ch_var__SBrown()\u0019ChColor& ch_var__SBrown()\u0003Upp\u000ECH_VAR__SBROWN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000'\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0006SBrown\bColor ()\rUpp::SBrown()\u000EColor SBrown()\u0003Upp\u0006SBROWN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000%\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\vSBlue_Write\fvoid (Color)\u0017Upp::SBlue_Write(Color)\u0019void SBlue_Write(Color v)\u0003Upp\vSBLUE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000%\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_init__SBlue\avoid ()\u0015Upp::ch_init__SBlue()\u0015void ch_init__SBlue()\u0003Upp\u000ECH_INIT__SBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000%\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\rch_var__SBlue\vChColor &()\u0014Upp::ch_var__SBlue()\u0018ChColor& ch_var__SBlue()\u0003Upp\rCH_VAR__SBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000%\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0005SBlue\bColor ()\fUpp::SBlue()\rColor SBlue()\u0003Upp\u0005SBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000+\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u000ESMagenta_Write\fvoid (Color)\u001AUpp::SMagenta_Write(Color)\u001Cvoid SMagenta_Write(Color v)\u0003Upp\u000ESMAGENTA_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000+\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0010ch_var__SMagenta\vChColor &()\u0017Upp::ch_var__SMagenta()\u001BChColor& ch_var__SMagenta()\u0003Upp\u0010CH_VAR__SMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000+\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0011ch_init__SMagenta\avoid ()\u0018Upp::ch_init__SMagenta()\u0018void ch_init__SMagenta()\u0003Upp\u0011CH_INIT__SMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000+\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0010ch_var__SMagenta\vChColor &()\u0017Upp::ch_var__SMagenta()\u001BChColor& ch_var__SMagenta()\u0003Upp\u0010CH_VAR__SMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000+\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\bSMagenta\bColor ()\u000FUpp::SMagenta()\u0010Color SMagenta()\u0003Upp\bSMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000%\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\rch_var__SCyan\vChColor &()\u0014Upp::ch_var__SCyan()\u0018ChColor& ch_var__SCyan()\u0003Upp\rCH_VAR__SCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000%\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\vSCyan_Write\fvoid (Color)\u0017Upp::SCyan_Write(Color)\u0019void SCyan_Write(Color v)\u0003Upp\vSCYAN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000%\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_init__SCyan\avoid ()\u0015Upp::ch_init__SCyan()\u0015void ch_init__SCyan()\u0003Upp\u000ECH_INIT__SCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000%\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\rch_var__SCyan\vChColor &()\u0014Upp::ch_var__SCyan()\u0018ChColor& ch_var__SCyan()\u0003Upp\rCH_VAR__SCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000%\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0005SCyan\bColor ()\fUpp::SCyan()\rColor SCyan()\u0003Upp\u0005SCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000)\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\rSYellow_Write\fvoid (Color)\u0019Upp::SYellow_Write(Color)\u001Bvoid SYellow_Write(Color v)\u0003Upp\rSYELLOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000)\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u000Fch_var__SYellow\vChColor &()\u0016Upp::ch_var__SYellow()\u001AChColor& ch_var__SYellow()\u0003Upp\u000FCH_VAR__SYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000)\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0010ch_init__SYellow\avoid ()\u0017Upp::ch_init__SYellow()\u0017void ch_init__SYellow()\u0003Upp\u0010CH_INIT__SYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000)\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_var__SYellow\vChColor &()\u0016Upp::ch_var__SYellow()\u001AChColor& ch_var__SYellow()\u0003Upp\u000FCH_VAR__SYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000)\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\aSYellow\bColor ()\u000EUpp::SYellow()\u000FColor SYellow()\u0003Upp\aSYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000'\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u000Ech_var__SLtRed\vChColor &()\u0015Upp::ch_var__SLtRed()\u0019ChColor& ch_var__SLtRed()\u0003Upp\u000ECH_VAR__SLTRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000'\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0006SLtRed\bColor ()\rUpp::SLtRed()\u000EColor SLtRed()\u0003Upp\u0006SLTRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000'\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_init__SLtRed\avoid ()\u0016Upp::ch_init__SLtRed()\u0016void ch_init__SLtRed()\u0003Upp\u000FCH_INIT__SLTRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000'\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\fSLtRed_Write\fvoid (Color)\u0018Upp::SLtRed_Write(Color)\u001Avoid SLtRed_Write(Color v)\u0003Upp\fSLTRED_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000'\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u000Ech_var__SLtRed\vChColor &()\u0015Upp::ch_var__SLtRed()\u0019ChColor& ch_var__SLtRed()\u0003Upp\u000ECH_VAR__SLTRED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000+\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\bSLtGreen\bColor ()\u000FUpp::SLtGreen()\u0010Color SLtGreen()\u0003Upp\bSLTGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000+\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0010ch_var__SLtGreen\vChColor &()\u0017Upp::ch_var__SLtGreen()\u001BChColor& ch_var__SLtGreen()\u0003Upp\u0010CH_VAR__SLTGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000+\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0011ch_init__SLtGreen\avoid ()\u0018Upp::ch_init__SLtGreen()\u0018void ch_init__SLtGreen()\u0003Upp\u0011CH_INIT__SLTGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000+\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0010ch_var__SLtGreen\vChColor &()\u0017Upp::ch_var__SLtGreen()\u001BChColor& ch_var__SLtGreen()\u0003Upp\u0010CH_VAR__SLTGREEN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000+\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u000ESLtGreen_Write\fvoid (Color)\u001AUpp::SLtGreen_Write(Color)\u001Cvoid SLtGreen_Write(Color v)\u0003Upp\u000ESLTGREEN_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000-\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0011ch_var__SLtYellow\vChColor &()\u0018Upp::ch_var__SLtYellow()\u001CChColor& ch_var__SLtYellow()\u0003Upp\u0011CH_VAR__SLTYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000-\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u000FSLtYellow_Write\fvoid (Color)\u001BUpp::SLtYellow_Write(Color)\u001Dvoid SLtYellow_Write(Color v)\u0003Upp\u000FSLTYELLOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000-\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_init__SLtYellow\avoid ()\u0019Upp::ch_init__SLtYellow()\u0019void ch_init__SLtYellow()\u0003Upp\u0012CH_INIT__SLTYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000-\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0011ch_var__SLtYellow\vChColor &()\u0018Upp::ch_var__SLtYellow()\u001CChColor& ch_var__SLtYellow()\u0003Upp\u0011CH_VAR__SLTYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000-\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\tSLtYellow\bColor ()\u0010Upp::SLtYellow()\u0011Color SLtYellow()\u0003Upp\tSLTYELLOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000)\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\rSLtBlue_Write\fvoid (Color)\u0019Upp::SLtBlue_Write(Color)\u001Bvoid SLtBlue_Write(Color v)\u0003Upp\rSLTBLUE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000)\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u000Fch_var__SLtBlue\vChColor &()\u0016Upp::ch_var__SLtBlue()\u001AChColor& ch_var__SLtBlue()\u0003Upp\u000FCH_VAR__SLTBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000)\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0010ch_init__SLtBlue\avoid ()\u0017Upp::ch_init__SLtBlue()\u0017void ch_init__SLtBlue()\u0003Upp\u0010CH_INIT__SLTBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000)\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_var__SLtBlue\vChColor &()\u0016Upp::ch_var__SLtBlue()\u001AChColor& ch_var__SLtBlue()\u0003Upp\u000FCH_VAR__SLTBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000)\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\aSLtBlue\bColor ()\u000EUpp::SLtBlue()\u000FColor SLtBlue()\u0003Upp\aSLTBLUE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000/\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_var__SLtMagenta\vChColor &()\u0019Upp::ch_var__SLtMagenta()\u001DChColor& ch_var__SLtMagenta()\u0003Upp\u0012CH_VAR__SLTMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000/\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_init__SLtMagenta\avoid ()\u001AUpp::ch_init__SLtMagenta()\u001Avoid ch_init__SLtMagenta()\u0003Upp\u0013CH_INIT__SLTMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000/\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0010SLtMagenta_Write\fvoid (Color)\u001CUpp::SLtMagenta_Write(Color)\u001Evoid SLtMagenta_Write(Color v)\u0003Upp\u0010SLTMAGENTA_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000/\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\nSLtMagenta\bColor ()\u0011Upp::SLtMagenta()\u0012Color SLtMagenta()\u0003Upp\nSLTMAGENTA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000)\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u000Fch_var__SLtCyan\vChColor &()\u0016Upp::ch_var__SLtCyan()\u001AChColor& ch_var__SLtCyan()\u0003Upp\u000FCH_VAR__SLTCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000)\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0010ch_init__SLtCyan\avoid ()\u0017Upp::ch_init__SLtCyan()\u0017void ch_init__SLtCyan()\u0003Upp\u0010CH_INIT__SLTCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000)\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\aSLtCyan\bColor ()\u000EUpp::SLtCyan()\u000FColor SLtCyan()\u0003Upp\aSLTCYAN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000)\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\rSLtCyan_Write\fvoid (Color)\u0019Upp::SLtCyan_Write(Color)\u001Bvoid SLtCyan_Write(Color v)\u0003Upp\rSLTCYAN_WRITE\u0003Upp\u0003UPP\u0000\u0000\t\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\fdark_theme__\u0004bool\u0011Upp::dark_theme__\u0011bool dark_theme__\u0003Upp\fDARK_THEME__\u0003Upp\u0003UPP\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0019\u0000\u0000\u0000\b\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0006CH_END\u0000\u0006CH_END\u0006CH_END\u0000\u0006CH_END\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0011SColorPaper_Write\fvoid (Color)\u001DUpp::SColorPaper_Write(Color)\u001Fvoid SColorPaper_Write(Color v)\u0003Upp\u0011SCOLORPAPER_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000-\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\vSColorPaper\bColor ()\u0012Upp::SColorPaper()\u0013Color SColorPaper()\u0003Upp\vSCOLORPAPER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000-\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0013ch_var__SColorPaper\vChColor &()\u001AUpp::ch_var__SColorPaper()\u001EChColor& ch_var__SColorPaper()\u0003Upp\u0013CH_VAR__SCOLORPAPER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000-\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0014ch_init__SColorPaper\avoid ()\u001BUpp::ch_init__SColorPaper()\u001Bvoid ch_init__SColorPaper()\u0003Upp\u0014CH_INIT__SCOLORPAPER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000-\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_var__SColorPaper\vChColor &()\u001AUpp::ch_var__SColorPaper()\u001EChColor& ch_var__SColorPaper()\u0003Upp\u0013CH_VAR__SCOLORPAPER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u001F\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0012ch_var__SColorFace\vChColor &()\u0019Upp::ch_var__SColorFace()\u001DChColor& ch_var__SColorFace()\u0003Upp\u0012CH_VAR__SCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u001F\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_init__SColorFace\avoid ()\u001AUpp::ch_init__SColorFace()\u001Avoid ch_init__SColorFace()\u0003Upp\u0013CH_INIT__SCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u001F\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_var__SColorFace\vChColor &()\u0019Upp::ch_var__SColorFace()\u001DChColor& ch_var__SColorFace()\u0003Upp\u0012CH_VAR__SCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u001F\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\nSColorFace\bColor ()\u0011Upp::SColorFace()\u0012Color SColorFace()\u0003Upp\nSCOLORFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u001F\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0010SColorFace_Write\fvoid (Color)\u001CUpp::SColorFace_Write(Color)\u001Evoid SColorFace_Write(Color v)\u0003Upp\u0010SCOLORFACE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u001E\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0012ch_var__SColorText\vChColor &()\u0019Upp::ch_var__SColorText()\u001DChColor& ch_var__SColorText()\u0003Upp\u0012CH_VAR__SCOLORTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u001E\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_init__SColorText\avoid ()\u001AUpp::ch_init__SColorText()\u001Avoid ch_init__SColorText()\u0003Upp\u0013CH_INIT__SCOLORTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u001E\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_var__SColorText\vChColor &()\u0019Upp::ch_var__SColorText()\u001DChColor& ch_var__SColorText()\u0003Upp\u0012CH_VAR__SCOLORTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u001E\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\nSColorText\bColor ()\u0011Upp::SColorText()\u0012Color SColorText()\u0003Upp\nSCOLORTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u001E\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0010SColorText_Write\fvoid (Color)\u001CUpp::SColorText_Write(Color)\u001Evoid SColorText_Write(Color v)\u0003Upp\u0010SCOLORTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0015SColorHighlight_Write\fvoid (Color)!Upp::SColorHighlight_Write(Color)#void SColorHighlight_Write(Color v)\u0003Upp\u0015SCOLORHIGHLIGHT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u000FSColorHighlight\bColor ()\u0016Upp::SColorHighlight()\u0017Color SColorHighlight()\u0003Upp\u000FSCOLORHIGHLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0017ch_var__SColorHighlight\vChColor &()\u001EUpp::ch_var__SColorHighlight()\"ChColor& ch_var__SColorHighlight()\u0003Upp\u0017CH_VAR__SCOLORHIGHLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0018ch_init__SColorHighlight\avoid ()\u001FUpp::ch_init__SColorHighlight()\u001Fvoid ch_init__SColorHighlight()\u0003Upp\u0018CH_INIT__SCOLORHIGHLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0017ch_var__SColorHighlight\vChColor &()\u001EUpp::ch_var__SColorHighlight()\"ChColor& ch_var__SColorHighlight()\u0003Upp\u0017CH_VAR__SCOLORHIGHLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000'\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u001Bch_var__SColorHighlightText\vChColor &()\"Upp::ch_var__SColorHighlightText()&ChColor& ch_var__SColorHighlightText()\u0003Upp\u001BCH_VAR__SCOLORHIGHLIGHTTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000'\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u001Cch_init__SColorHighlightText\avoid ()#Upp::ch_init__SColorHighlightText()#void ch_init__SColorHighlightText()\u0003Upp\u001CCH_INIT__SCOLORHIGHLIGHTTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000'\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u001Bch_var__SColorHighlightText\vChColor &()\"Upp::ch_var__SColorHighlightText()&ChColor& ch_var__SColorHighlightText()\u0003Upp\u001BCH_VAR__SCOLORHIGHLIGHTTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000'\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0013SColorHighlightText\bColor ()\u001AUpp::SColorHighlightText()\u001BColor SColorHighlightText()\u0003Upp\u0013SCOLORHIGHLIGHTTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000'\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0019SColorHighlightText_Write\fvoid (Color)%Upp::SColorHighlightText_Write(Color)'void SColorHighlightText_Write(Color v)\u0003Upp\u0019SCOLORHIGHLIGHTTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u001F\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0010SColorMenu_Write\fvoid (Color)\u001CUpp::SColorMenu_Write(Color)\u001Evoid SColorMenu_Write(Color v)\u0003Upp\u0010SCOLORMENU_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u001F\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\nSColorMenu\bColor ()\u0011Upp::SColorMenu()\u0012Color SColorMenu()\u0003Upp\nSCOLORMENU\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u001F\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0012ch_var__SColorMenu\vChColor &()\u0019Upp::ch_var__SColorMenu()\u001DChColor& ch_var__SColorMenu()\u0003Upp\u0012CH_VAR__SCOLORMENU\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u001F\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_init__SColorMenu\avoid ()\u001AUpp::ch_init__SColorMenu()\u001Avoid ch_init__SColorMenu()\u0003Upp\u0013CH_INIT__SCOLORMENU\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u001F\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_var__SColorMenu\vChColor &()\u0019Upp::ch_var__SColorMenu()\u001DChColor& ch_var__SColorMenu()\u0003Upp\u0012CH_VAR__SCOLORMENU\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\"\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0016ch_var__SColorMenuText\vChColor &()\u001DUpp::ch_var__SColorMenuText()!ChColor& ch_var__SColorMenuText()\u0003Upp\u0016CH_VAR__SCOLORMENUTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\"\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0017ch_init__SColorMenuText\avoid ()\u001EUpp::ch_init__SColorMenuText()\u001Evoid ch_init__SColorMenuText()\u0003Upp\u0017CH_INIT__SCOLORMENUTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\"\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0016ch_var__SColorMenuText\vChColor &()\u001DUpp::ch_var__SColorMenuText()!ChColor& ch_var__SColorMenuText()\u0003Upp\u0016CH_VAR__SCOLORMENUTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\"\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u000ESColorMenuText\bColor ()\u0015Upp::SColorMenuText()\u0016Color SColorMenuText()\u0003Upp\u000ESCOLORMENUTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\"\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0014SColorMenuText_Write\fvoid (Color) Upp::SColorMenuText_Write(Color)\"void SColorMenuText_Write(Color v)\u0003Upp\u0014SCOLORMENUTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000!\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\nSColorInfo\bColor ()\u0011Upp::SColorInfo()\u0012Color SColorInfo()\u0003Upp\nSCOLORINFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000!\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_init__SColorInfo\avoid ()\u001AUpp::ch_init__SColorInfo()\u001Avoid ch_init__SColorInfo()\u0003Upp\u0013CH_INIT__SCOLORINFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000!\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_var__SColorInfo\vChColor &()\u0019Upp::ch_var__SColorInfo()\u001DChColor& ch_var__SColorInfo()\u0003Upp\u0012CH_VAR__SCOLORINFO\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000!\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0010SColorInfo_Write\fvoid (Color)\u001CUpp::SColorInfo_Write(Color)\u001Evoid SColorInfo_Write(Color v)\u0003Upp\u0010SCOLORINFO_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\"\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0016ch_var__SColorInfoText\vChColor &()\u001DUpp::ch_var__SColorInfoText()!ChColor& ch_var__SColorInfoText()\u0003Upp\u0016CH_VAR__SCOLORINFOTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\"\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0017ch_init__SColorInfoText\avoid ()\u001EUpp::ch_init__SColorInfoText()\u001Evoid ch_init__SColorInfoText()\u0003Upp\u0017CH_INIT__SCOLORINFOTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\"\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0016ch_var__SColorInfoText\vChColor &()\u001DUpp::ch_var__SColorInfoText()!ChColor& ch_var__SColorInfoText()\u0003Upp\u0016CH_VAR__SCOLORINFOTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\"\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u000ESColorInfoText\bColor ()\u0015Upp::SColorInfoText()\u0016Color SColorInfoText()\u0003Upp\u000ESCOLORINFOTEXT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\"\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0014SColorInfoText_Write\fvoid (Color) Upp::SColorInfoText_Write(Color)\"void SColorInfoText_Write(Color v)\u0003Upp\u0014SCOLORINFOTEXT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000!\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0017ch_init__SColorDisabled\avoid ()\u001EUpp::ch_init__SColorDisabled()\u001Evoid ch_init__SColorDisabled()\u0003Upp\u0017CH_INIT__SCOLORDISABLED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000!\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0014SColorDisabled_Write\fvoid (Color) Upp::SColorDisabled_Write(Color)\"void SColorDisabled_Write(Color v)\u0003Upp\u0014SCOLORDISABLED_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000!\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0016ch_var__SColorDisabled\vChColor &()\u001DUpp::ch_var__SColorDisabled()!ChColor& ch_var__SColorDisabled()\u0003Upp\u0016CH_VAR__SCOLORDISABLED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000!\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u000ESColorDisabled\bColor ()\u0015Upp::SColorDisabled()\u0016Color SColorDisabled()\u0003Upp\u000ESCOLORDISABLED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000!\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0016ch_var__SColorDisabled\vChColor &()\u001DUpp::ch_var__SColorDisabled()!ChColor& ch_var__SColorDisabled()\u0003Upp\u0016CH_VAR__SCOLORDISABLED\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u001F\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\vSColorLight\bColor ()\u0012Upp::SColorLight()\u0013Color SColorLight()\u0003Upp\vSCOLORLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u001F\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0014ch_init__SColorLight\avoid ()\u001BUpp::ch_init__SColorLight()\u001Bvoid ch_init__SColorLight()\u0003Upp\u0014CH_INIT__SCOLORLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u001F\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_var__SColorLight\vChColor &()\u001AUpp::ch_var__SColorLight()\u001EChColor& ch_var__SColorLight()\u0003Upp\u0013CH_VAR__SCOLORLIGHT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u001F\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0011SColorLight_Write\fvoid (Color)\u001DUpp::SColorLight_Write(Color)\u001Fvoid SColorLight_Write(Color v)\u0003Upp\u0011SCOLORLIGHT_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u001F\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0012SColorShadow_Write\fvoid (Color)\u001EUpp::SColorShadow_Write(Color) void SColorShadow_Write(Color v)\u0003Upp\u0012SCOLORSHADOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u001F\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\fSColorShadow\bColor ()\u0013Upp::SColorShadow()\u0014Color SColorShadow()\u0003Upp\fSCOLORSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u001F\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0014ch_var__SColorShadow\vChColor &()\u001BUpp::ch_var__SColorShadow()\u001FChColor& ch_var__SColorShadow()\u0003Upp\u0014CH_VAR__SCOLORSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u001F\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0015ch_init__SColorShadow\avoid ()\u001CUpp::ch_init__SColorShadow()\u001Cvoid ch_init__SColorShadow()\u0003Upp\u0015CH_INIT__SCOLORSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u001F\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0014ch_var__SColorShadow\vChColor &()\u001BUpp::ch_var__SColorShadow()\u001FChColor& ch_var__SColorShadow()\u0003Upp\u0014CH_VAR__SCOLORSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000L\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\nSColorMark\bColor ()\u0011Upp::SColorMark()\u0012Color SColorMark()\u0003Upp\nSCOLORMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000L\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_init__SColorMark\avoid ()\u001AUpp::ch_init__SColorMark()\u001Avoid ch_init__SColorMark()\u0003Upp\u0013CH_INIT__SCOLORMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000L\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0012ch_var__SColorMark\vChColor &()\u0019Upp::ch_var__SColorMark()\u001DChColor& ch_var__SColorMark()\u0003Upp\u0012CH_VAR__SCOLORMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000L\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0010SColorMark_Write\fvoid (Color)\u001CUpp::SColorMark_Write(Color)\u001Evoid SColorMark_Write(Color v)\u0003Upp\u0010SCOLORMARK_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000O\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u000ESColorMenuMark\bColor ()\u0015Upp::SColorMenuMark()\u0016Color SColorMenuMark()\u0003Upp\u000ESCOLORMENUMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000O\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0016ch_var__SColorMenuMark\vChColor &()\u001DUpp::ch_var__SColorMenuMark()!ChColor& ch_var__SColorMenuMark()\u0003Upp\u0016CH_VAR__SCOLORMENUMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000O\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0017ch_init__SColorMenuMark\avoid ()\u001EUpp::ch_init__SColorMenuMark()\u001Evoid ch_init__SColorMenuMark()\u0003Upp\u0017CH_INIT__SCOLORMENUMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000O\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0014SColorMenuMark_Write\fvoid (Color) Upp::SColorMenuMark_Write(Color)\"void SColorMenuMark_Write(Color v)\u0003Upp\u0014SCOLORMENUMARK_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000O\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0016ch_var__SColorMenuMark\vChColor &()\u001DUpp::ch_var__SColorMenuMark()!ChColor& ch_var__SColorMenuMark()\u0003Upp\u0016CH_VAR__SCOLORMENUMARK\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u00006\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0015ch_init__SColorLtFace\avoid ()\u001CUpp::ch_init__SColorLtFace()\u001Cvoid ch_init__SColorLtFace()\u0003Upp\u0015CH_INIT__SCOLORLTFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u00006\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\fSColorLtFace\bColor ()\u0013Upp::SColorLtFace()\u0014Color SColorLtFace()\u0003Upp\fSCOLORLTFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u00006\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0014ch_var__SColorLtFace\vChColor &()\u001BUpp::ch_var__SColorLtFace()\u001FChColor& ch_var__SColorLtFace()\u0003Upp\u0014CH_VAR__SCOLORLTFACE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u00006\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0012SColorLtFace_Write\fvoid (Color)\u001EUpp::SColorLtFace_Write(Color) void SColorLtFace_Write(Color v)\u0003Upp\u0012SCOLORLTFACE_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u00005\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u000ESColorDkShadow\bColor ()\u0015Upp::SColorDkShadow()\u0016Color SColorDkShadow()\u0003Upp\u000ESCOLORDKSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u00005\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0017ch_init__SColorDkShadow\avoid ()\u001EUpp::ch_init__SColorDkShadow()\u001Evoid ch_init__SColorDkShadow()\u0003Upp\u0017CH_INIT__SCOLORDKSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u00005\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0016ch_var__SColorDkShadow\vChColor &()\u001DUpp::ch_var__SColorDkShadow()!ChColor& ch_var__SColorDkShadow()\u0003Upp\u0016CH_VAR__SCOLORDKSHADOW\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u00005\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0014SColorDkShadow_Write\fvoid (Color) Upp::SColorDkShadow_Write(Color)\"void SColorDkShadow_Write(Color v)\u0003Upp\u0014SCOLORDKSHADOW_WRITE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000#\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\vSColorLabel\bColor ()\u0012Upp::SColorLabel()\u0013Color SColorLabel()\u0003Upp\vSCOLORLABEL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000#\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0014ch_init__SColorLabel\avoid ()\u001BUpp::ch_init__SColorLabel()\u001Bvoid ch_init__SColorLabel()\u0003Upp\u0014CH_INIT__SCOLORLABEL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000#\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0013ch_var__SColorLabel\vChColor &()\u001AUpp::ch_var__SColorLabel()\u001EChColor& ch_var__SColorLabel()\u0003Upp\u0013CH_VAR__SCOLORLABEL\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000#\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0011SColorLabel_Write\fvoid (Color)\u001DUpp::SColorLabel_Write(Color)\u001Fvoid SColorLabel_Write(Color v)\u0003Upp\u0011SCOLORLABEL_WRITE\u0003Upp\u0003UPP\u0000\u0000end\u0000¯Z\u0000\u0000"}]}