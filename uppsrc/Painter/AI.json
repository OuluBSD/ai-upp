{"source_files":[{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painter.h","value":"dataÿ6\u0001\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0013_Painter_Painter_h_\u0000\u0013_Painter_Painter_h_\u0013_Painter_Painter_h_\u0000\u0013_PAINTER_PAINTER_H_\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0019\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u000EPAINTER_TIMING\u0000\u000EPAINTER_TIMING\u000EPAINTER_TIMING\u0000\u000EPAINTER_TIMING\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000 PaintPainting__initialize_struct\avoid ()IUpp::PaintPainting__initialize_struct::PaintPainting__initialize_struct()\"PaintPainting__initialize_struct()\u0003Upp PAINTPAINTING__INITIALIZE_STRUCT%Upp::PaintPainting__initialize_struct%UPP::PAINTPAINTING__INITIALIZE_STRUCT\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000 PaintPainting__initialize_struct%Upp::PaintPainting__initialize_struct%Upp::PaintPainting__initialize_struct PaintPainting__initialize_struct\u0003Upp PAINTPAINTING__INITIALIZE_STRUCT%Upp::PaintPainting__initialize_struct%UPP::PAINTPAINTING__INITIALIZE_STRUCT\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000 PaintPainting__initialize_struct\avoid ()IUpp::PaintPainting__initialize_struct::PaintPainting__initialize_struct()\"PaintPainting__initialize_struct()\u0003Upp PAINTPAINTING__INITIALIZE_STRUCT%Upp::PaintPainting__initialize_struct%UPP::PAINTPAINTING__INITIALIZE_STRUCT\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0001\u001FPaintPainting__initialize_dummy'struct PaintPainting__initialize_struct$Upp::PaintPainting__initialize_dummyGstatic PaintPainting__initialize_struct PaintPainting__initialize_dummy\u0003Upp\u001FPAINTPAINTING__INITIALIZE_DUMMY\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000 PaintPainting__initialize_struct%Upp::PaintPainting__initialize_struct%Upp::PaintPainting__initialize_struct PaintPainting__initialize_struct\u0003Upp PAINTPAINTING__INITIALIZE_STRUCT%Upp::PaintPainting__initialize_struct%UPP::PAINTPAINTING__INITIALIZE_STRUCT\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u001APaintPainting__initializer\avoid ()!Upp::PaintPainting__initializer()!void PaintPainting__initializer()\u0003Upp\u001APAINTPAINTING__INITIALIZER\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\aXform2D\fUpp::Xform2D\fUpp::Xform2D\aXform2D\u0003Upp\aXFORM2D\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\t\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001x\u0006Pointf\u000FUpp::Xform2D::x\bPointf x\u0003Upp\u0001X\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\f\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001y\u0006Pointf\u000FUpp::Xform2D::y\bPointf y\u0003Upp\u0001Y\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0006Pointf\u000FUpp::Xform2D::t\bPointf t\u0003Upp\u0001T\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000v\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\tTransform\u001DPointf (double, double) const+Upp::Xform2D::Transform(double,double)const,Pointf Transform(double px, double py) const\u0003Upp\tTRANSFORM\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000M\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\tTransform\u001DPointf (const Pointf &) const+Upp::Xform2D::Transform(const Pointf&)const'Pointf Transform(const Pointf& f) const\u0003Upp\tTRANSFORM\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\nGetScaleXY\u000FPointf () const\u001FUpp::Xform2D::GetScaleXY()const\u0019Pointf GetScaleXY() const\u0003Upp\nGETSCALEXY\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\bGetScale\u000Fdouble () const\u001DUpp::Xform2D::GetScale()const\u0017double GetScale() const\u0003Upp\bGETSCALE\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\tIsRegular\rbool () const\u001EUpp::Xform2D::IsRegular()const\u0016bool IsRegular() const\u0003Upp\tISREGULAR\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0001\bIdentity\nXform2D ()\u0018Upp::Xform2D::Identity()\u0019static Xform2D Identity()\u0003Upp\bIDENTITY\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000/\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0001\vTranslation\u0018Xform2D (double, double)(Upp::Xform2D::Translation(double,double).static Xform2D Translation(double x, double y)\u0003Upp\vTRANSLATION\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000+\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0001\u0005Scale\u0018Xform2D (double, double)\"Upp::Xform2D::Scale(double,double)*static Xform2D Scale(double sx, double sy)\u0003Upp\u0005SCALE\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000#\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0001\u0005Scale\u0010Xform2D (double)\u001BUpp::Xform2D::Scale(double)\"static Xform2D Scale(double scale)\u0003Upp\u0005SCALE\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000#\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0001\bRotation\u0010Xform2D (double)\u001EUpp::Xform2D::Rotation(double)\"static Xform2D Rotation(double fi)\u0003Upp\bROTATION\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000 \u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0001\u0005Sheer\u0010Xform2D (double)\u001BUpp::Xform2D::Sheer(double)\u001Fstatic Xform2D Sheer(double fi)\u0003Upp\u0005SHEER\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000!\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0001\u0006SheerX\u0010Xform2D (double)\u001CUpp::Xform2D::SheerX(double) static Xform2D SheerX(double fi)\u0003Upp\u0006SHEERX\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u00004\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0003Map Xform2D (Pointf, Pointf, Pointf)'Upp::Xform2D::Map(Pointf,Pointf,Pointf)3static Xform2D Map(Pointf s1, Pointf s2, Pointf s3)\u0003Upp\u0003MAP\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000U\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0001\u0003Map8Xform2D (Pointf, Pointf, Pointf, Pointf, Pointf, Pointf)<Upp::Xform2D::Map(Pointf,Pointf,Pointf,Pointf,Pointf,Pointf)Tstatic Xform2D Map(Pointf s1, Pointf s2, Pointf s3, Pointf t1, Pointf t2, Pointf t3)\u0003Upp\u0003MAP\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\n\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\aXform2D\avoid ()\u0017Upp::Xform2D::Xform2D()\tXform2D()\u0003Upp\aXFORM2D\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u00005\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\toperator**Xform2D (const Xform2D &, const Xform2D &)-Upp::operator*(const Xform2D&,const Xform2D&)5Xform2D operator*(const Xform2D& a, const Xform2D& b)\u0003Upp\tOPERATOR*\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000!\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\aInverse\u0019Xform2D (const Xform2D &)\u001CUpp::Inverse(const Xform2D&)!Xform2D Inverse(const Xform2D& m)\u0003Upp\aINVERSE\u0003Upp\u0003UPP\u0000\u0000\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u000EPainterOptions\u0013Upp::PainterOptions\u0013Upp::PainterOptions\u0013enum PainterOptions\u0003Upp\u000EPAINTEROPTIONS\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\r\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\fLINECAP_BUTT\u0013Upp::PainterOptions\u0011Upp::LINECAP_BUTT\fLINECAP_BUTT\u0003Upp\fLINECAP_BUTT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u000F\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u000ELINECAP_SQUARE\u0013Upp::PainterOptions\u0013Upp::LINECAP_SQUARE\u000ELINECAP_SQUARE\u0003Upp\u000ELINECAP_SQUARE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u000E\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\rLINECAP_ROUND\u0013Upp::PainterOptions\u0012Upp::LINECAP_ROUND\rLINECAP_ROUND\u0003Upp\rLINECAP_ROUND\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u000F\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u000ELINEJOIN_MITER\u0013Upp::PainterOptions\u0013Upp::LINEJOIN_MITER\u000ELINEJOIN_MITER\u0003Upp\u000ELINEJOIN_MITER\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u000F\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u000ELINEJOIN_ROUND\u0013Upp::PainterOptions\u0013Upp::LINEJOIN_ROUND\u000ELINEJOIN_ROUND\u0003Upp\u000ELINEJOIN_ROUND\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u000F\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u000ELINEJOIN_BEVEL\u0013Upp::PainterOptions\u0013Upp::LINEJOIN_BEVEL\u000ELINEJOIN_BEVEL\u0003Upp\u000ELINEJOIN_BEVEL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0014\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\nFILL_EXACT\u0013Upp::PainterOptions\u000FUpp::FILL_EXACT\nFILL_EXACT\u0003Upp\nFILL_EXACT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0014\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\tFILL_HPAD\u0013Upp::PainterOptions\u000EUpp::FILL_HPAD\tFILL_HPAD\u0003Upp\tFILL_HPAD\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0014\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\fFILL_HREPEAT\u0013Upp::PainterOptions\u0011Upp::FILL_HREPEAT\fFILL_HREPEAT\u0003Upp\fFILL_HREPEAT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0014\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\rFILL_HREFLECT\u0013Upp::PainterOptions\u0012Upp::FILL_HREFLECT\rFILL_HREFLECT\u0003Upp\rFILL_HREFLECT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000\u0014\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\tFILL_VPAD\u0013Upp::PainterOptions\u000EUpp::FILL_VPAD\tFILL_VPAD\u0003Upp\tFILL_VPAD\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0014\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\fFILL_VREPEAT\u0013Upp::PainterOptions\u0011Upp::FILL_VREPEAT\fFILL_VREPEAT\u0003Upp\fFILL_VREPEAT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0015\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\rFILL_VREFLECT\u0013Upp::PainterOptions\u0012Upp::FILL_VREFLECT\rFILL_VREFLECT\u0003Upp\rFILL_VREFLECT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000&\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\bFILL_PAD\u0013Upp::PainterOptions\rUpp::FILL_PAD\bFILL_PAD\u0003Upp\bFILL_PAD\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000,\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\vFILL_REPEAT\u0013Upp::PainterOptions\u0010Upp::FILL_REPEAT\vFILL_REPEAT\u0003Upp\vFILL_REPEAT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000.\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\fFILL_REFLECT\u0013Upp::PainterOptions\u0011Upp::FILL_REFLECT\fFILL_REFLECT\u0003Upp\fFILL_REFLECT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0016\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\tFILL_FAST\u0013Upp::PainterOptions\u000EUpp::FILL_FAST\tFILL_FAST\u0003Upp\tFILL_FAST\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u0015\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\fGRADIENT_PAD\u0013Upp::PainterOptions\u0011Upp::GRADIENT_PAD\fGRADIENT_PAD\u0003Upp\fGRADIENT_PAD\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0015\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u000FGRADIENT_REPEAT\u0013Upp::PainterOptions\u0014Upp::GRADIENT_REPEAT\u000FGRADIENT_REPEAT\u0003Upp\u000FGRADIENT_REPEAT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000\u0015\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0010GRADIENT_REFLECT\u0013Upp::PainterOptions\u0015Upp::GRADIENT_REFLECT\u0010GRADIENT_REFLECT\u0003Upp\u0010GRADIENT_REFLECT\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0001\u0000\u0000\u0001\u0000\u0000\aPainter\fUpp::Painter\fUpp::Painter\u0015Painter : public Draw\u0003Upp\aPAINTER\fUpp::Painter\fUPP::PAINTER\tUpp::Draw\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u001E\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0001\u0000\aGetInfo\u000Edword () const\u001CUpp::Painter::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u001F\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0001\u0000\bOffsetOp\fvoid (Point)\u001DUpp::Painter::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000#\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)!Upp::Painter::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000&\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0001\u0000\tClipoffOp\u0013bool (const Rect &)$Upp::Painter::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0000N\u0000\u0000\u0000*\u0000\u0000\u0000N\u0000\u0000\u0000\u0000\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)(Upp::Painter::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000,\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)*Upp::Painter::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000/\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const,Upp::Painter::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000C\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)/Upp::Painter::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000g\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)IUpp::Painter::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)^void DrawImageOp(int x, int y, int cx, int cy, const Image& img, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000P\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)3Upp::Painter::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000V\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)QUpp::Painter::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000Z\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)pUpp::Painter::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000W\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color):Upp::Painter::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000P\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)8Upp::Painter::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u0000p\u0000\u0000\u0000]\u0000\u0000\u0000\u0000\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)LUpp::Painter::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000C\u0000\u0000\u0000^\u0000\u0000\u0000\u0000\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)9Upp::Painter::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& p)\u0003Upp\u000EDRAWPAINTINGOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000.\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0001\u0000\aClearOp\u0013void (const RGBA &)\"Upp::Painter::ClearOp(const RGBA&)\u001Fvoid ClearOp(const RGBA& color)\u0003Upp\aCLEAROP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u00005\u0000\u0000\u0000c\u0000\u0000\u0000\u0000\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool)(Upp::Painter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0000d\u0000\u0000\u00005\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool)(Upp::Painter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000L\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool);Upp::Painter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000:\u0000\u0000\u0000f\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)-Upp::Painter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000Z\u0000\u0000\u0000g\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)EUpp::Painter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u0000H\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool)7Upp::Painter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0000i\u0000\u0000\u0000a\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)CUpp::Painter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u00007\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)IUpp::Painter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u001D\u0000\u0000\u0000l\u0000\u0000\u0000\u0000\u0001\u0000\aCloseOp\avoid ()\u0017Upp::Painter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0000m\u0000\u0000\u0000\u001B\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0001\u0000\u0005DivOp\avoid ()\u0015Upp::Painter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u0000-\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp\u0013void (const RGBA &)!Upp::Painter::FillOp(const RGBA&)\u001Evoid FillOp(const RGBA& color)\u0003Upp\u0006FILLOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0000p\u0000\u0000\u0000T\u0000\u0000\u0000p\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp,void (const Image &, const Xform2D &, dword)7Upp::Painter::FillOp(const Image&,const Xform2D&,dword)Evoid FillOp(const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\u0006FILLOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000%\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpFvoid (const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)MUpp::Painter::FillOp(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)bvoid FillOp(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000%\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpNvoid (const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)TUpp::Painter::FillOp(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)jvoid FillOp(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000%\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp7void (const RGBA &, const RGBA &, const Xform2D &, int)@Upp::Painter::FillOp(const RGBA&,const RGBA&,const Xform2D&,int)Wvoid FillOp(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000>\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpGvoid (const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)NUpp::Painter::FillOp(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)hvoid FillOp(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u0000<\u0000\u0000\u0000|\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp\u001Bvoid (double, const RGBA &)*Upp::Painter::StrokeOp(double,const RGBA&)-void StrokeOp(double width, const RGBA& rgba)\u0003Upp\bSTROKEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000}\u0000\u0000\u0000)\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp4void (double, const Image &, const Xform2D &, dword)@Upp::Painter::StrokeOp(double,const Image&,const Xform2D&,dword)Uvoid StrokeOp(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\bSTROKEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpNvoid (double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)VUpp::Painter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)rvoid StrokeOp(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp?void (double, const RGBA &, const RGBA &, const Xform2D &, int)IUpp::Painter::StrokeOp(double,const RGBA&,const RGBA&,const Xform2D&,int)gvoid StrokeOp(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpVvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)]Upp::Painter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)zvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)WUpp::Painter::StrokeOp(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)xvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\avoid ()\u0016Upp::Painter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)1Upp::Painter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)GUpp::Painter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\vColorStopOp\u001Bvoid (double, const RGBA &)-Upp::Painter::ColorStopOp(double,const RGBA&)/void ColorStopOp(double pos, const RGBA& color)\u0003Upp\vCOLORSTOPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\fClearStopsOp\avoid ()\u001CUpp::Painter::ClearStopsOp()\u0013void ClearStopsOp()\u0003Upp\fCLEARSTOPSOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\tOpacityOp\rvoid (double)\u001FUpp::Painter::OpacityOp(double)\u0018void OpacityOp(double o)\u0003Upp\tOPACITYOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\tLineCapOp\nvoid (int)\u001CUpp::Painter::LineCapOp(int)\u001Bvoid LineCapOp(int linecap)\u0003Upp\tLINECAPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\nLineJoinOp\nvoid (int)\u001DUpp::Painter::LineJoinOp(int)\u001Dvoid LineJoinOp(int linejoin)\u0003Upp\nLINEJOINOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\fMiterLimitOp\rvoid (double)\"Upp::Painter::MiterLimitOp(double)\u001Bvoid MiterLimitOp(double l)\u0003Upp\fMITERLIMITOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\tEvenOddOp\vvoid (bool)\u001DUpp::Painter::EvenOddOp(bool)\u001Cvoid EvenOddOp(bool evenodd)\u0003Upp\tEVENODDOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006DashOp%void (const Vector<double> &, double)*Upp::Painter::DashOp(const Vector&,double)9void DashOp(const Vector<double>& dash, double start = 0)\u0003Upp\u0006DASHOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006DashOp\u001Dvoid (const String &, double)*Upp::Painter::DashOp(const String&,double)1void DashOp(const String& dash, double start = 0)\u0003Upp\u0006DASHOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\bInvertOp\vvoid (bool)\u001CUpp::Painter::InvertOp(bool)\u001Avoid InvertOp(bool invert)\u0003Upp\bINVERTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\rImageFilterOp\nvoid (int) Upp::Painter::ImageFilterOp(int)\u001Evoid ImageFilterOp(int filter)\u0003Upp\rIMAGEFILTEROP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\vTransformOp\u0016void (const Xform2D &))Upp::Painter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u001D\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u0017Upp::Painter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¡\u0000\u0000\u0000\u001B\u0000\u0000\u0000¡\u0000\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u0015Upp::Painter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0000£\u0000\u0000\u0000!\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0001\u0000\vBeginMaskOp\avoid ()\u001BUpp::Painter::BeginMaskOp()\u0012void BeginMaskOp()\u0003Upp\vBEGINMASKOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000:\u0000\u0000\u0000¤\u0000\u0000\u0000\u0000\u0001\u0000\rBeginOnPathOp\u0013void (double, bool)(Upp::Painter::BeginOnPathOp(double,bool)+void BeginOnPathOp(double q, bool absolute)\u0003Upp\rBEGINONPATHOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0000§\u0000\u0000\u0000?\u0000\u0000\u0000§\u0000\u0000\u0000\u0000\u0000\u0000\u0006DoArc0&void (double, double, const Xform2D &)2Upp::Painter::DoArc0(double,double,const Xform2D&)<void DoArc0(double theta, double th_sweep, const Xform2D& m)\u0003Upp\u0006DOARC0\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\u0000¨\u0000\u0000\u0000Z\u0000\u0000\u0000¨\u0000\u0000\u0000\u0000\u0000\u0000\u0005DoArc=void (const Pointf &, const Pointf &, double, double, double)EUpp::Painter::DoArc(const Pointf&,const Pointf&,double,double,double)Wvoid DoArc(const Pointf& c, const Pointf& r, double angle, double sweep, double xangle)\u0003Upp\u0005DOARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\u0000©\u0000\u0000\u00004\u0000\u0000\u0000ª\u0000\u0000\u0000\u0000\u0000\u0000\bDoSvgArcGvoid (const Pointf &, double, int, int, const Pointf &, const Pointf &)PUpp::Painter::DoSvgArc(const Pointf&,double,int,int,const Pointf&,const Pointf&)gvoid DoSvgArc(const Pointf& rr, double xangle, int large, int sweep, const Pointf& p, const Pointf& p0)\u0003Upp\bDOSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\u0000«\u0000\u0000\u0000.\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u000EDrawLineStroke\u0011void (int, Color)'Upp::Painter::DrawLineStroke(int,Color)+void DrawLineStroke(int width, Color color)\u0003Upp\u000EDRAWLINESTROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000®\u0000\u0000\u0000\u0001\u0000\u0000\u0000®\u0000\u0000\u0000/\u0000\u0000\u0000®\u0000\u0000\u0000\u0000\u0000\u0000\u0005Clear\u0013void (const RGBA &) Upp::Painter::Clear(const RGBA&)*void Clear(const RGBA& color = RGBAZero())\u0003Upp\u0005CLEAR\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\u0000°\u0000\u0000\u0000)\u0000\u0000\u0000°\u0000\u0000\u0000\u0000\u0000\u0000\u0004Move\u001FPainter &(const Pointf &, bool)&Upp::Painter::Move(const Pointf&,bool)(Painter& Move(const Pointf& p, bool rel)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000±\u0000\u0000\u0000\u001F\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0004Move\u0019Painter &(const Pointf &)!Upp::Painter::Move(const Pointf&)\u001EPainter& Move(const Pointf& p)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0000²\u0000\u0000\u0000,\u0000\u0000\u0000²\u0000\u0000\u0000\u0000\u0000\u0000\u0004Move\u001FPainter &(double, double, bool)&Upp::Painter::Move(double,double,bool)+Painter& Move(double x, double y, bool rel)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000\"\u0000\u0000\u0000³\u0000\u0000\u0000\u0000\u0000\u0000\u0004Move\u0019Painter &(double, double)!Upp::Painter::Move(double,double)!Painter& Move(double x, double y)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\u0000´\u0000\u0000\u0000\"\u0000\u0000\u0000´\u0000\u0000\u0000\u0000\u0000\u0000\aRelMove\u0019Painter &(const Pointf &)$Upp::Painter::RelMove(const Pointf&)!Painter& RelMove(const Pointf& p)\u0003Upp\aRELMOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000%\u0000\u0000\u0000µ\u0000\u0000\u0000\u0000\u0000\u0000\aRelMove\u0019Painter &(double, double)$Upp::Painter::RelMove(double,double)$Painter& RelMove(double x, double y)\u0003Upp\aRELMOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0000\u0000\u0000·\u0000\u0000\u0000)\u0000\u0000\u0000·\u0000\u0000\u0000\u0000\u0000\u0000\u0004Line\u001FPainter &(const Pointf &, bool)&Upp::Painter::Line(const Pointf&,bool)(Painter& Line(const Pointf& p, bool rel)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\u0000¸\u0000\u0000\u0000\u001F\u0000\u0000\u0000¸\u0000\u0000\u0000\u0000\u0000\u0000\u0004Line\u0019Painter &(const Pointf &)!Upp::Painter::Line(const Pointf&)\u001EPainter& Line(const Pointf& p)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000,\u0000\u0000\u0000¹\u0000\u0000\u0000\u0000\u0000\u0000\u0004Line\u001FPainter &(double, double, bool)&Upp::Painter::Line(double,double,bool)+Painter& Line(double x, double y, bool rel)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000\"\u0000\u0000\u0000º\u0000\u0000\u0000\u0000\u0000\u0000\u0004Line\u0019Painter &(double, double)!Upp::Painter::Line(double,double)!Painter& Line(double x, double y)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000»\u0000\u0000\u0000\"\u0000\u0000\u0000»\u0000\u0000\u0000\u0000\u0000\u0000\aRelLine\u0019Painter &(const Pointf &)$Upp::Painter::RelLine(const Pointf&)!Painter& RelLine(const Pointf& p)\u0003Upp\aRELLINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000¼\u0000\u0000\u0000%\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\aRelLine\u0019Painter &(double, double)$Upp::Painter::RelLine(double,double)$Painter& RelLine(double x, double y)\u0003Upp\aRELLINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0000¾\u0000\u0000\u0000@\u0000\u0000\u0000¾\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic/Painter &(const Pointf &, const Pointf &, bool)9Upp::Painter::Quadratic(const Pointf&,const Pointf&,bool)?Painter& Quadratic(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\u0000¿\u0000\u0000\u00006\u0000\u0000\u0000¿\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic)Painter &(const Pointf &, const Pointf &)4Upp::Painter::Quadratic(const Pointf&,const Pointf&)5Painter& Quadratic(const Pointf& p1, const Pointf& p)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u0000$\u0000\u0000\u0000À\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic\u0019Painter &(const Pointf &)&Upp::Painter::Quadratic(const Pointf&)#Painter& Quadratic(const Pointf& p)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0000Á\u0000\u0000\u00001\u0000\u0000\u0000Á\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic\u001FPainter &(double, double, bool)+Upp::Painter::Quadratic(double,double,bool)0Painter& Quadratic(double x, double y, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000G\u0000\u0000\u0000Â\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic/Painter &(double, double, double, double, bool)9Upp::Painter::Quadratic(double,double,double,double,bool)FPainter& Quadratic(double x1, double y1, double x, double y, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0000\u0000\u0000.\u0000\u0000\u0000Ã\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic\u001FPainter &(const Pointf &, bool)+Upp::Painter::Quadratic(const Pointf&,bool)-Painter& Quadratic(const Pointf& p, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000=\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic)Painter &(double, double, double, double)4Upp::Painter::Quadratic(double,double,double,double)<Painter& Quadratic(double x1, double y1, double x, double y)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000'\u0000\u0000\u0000Å\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic\u0019Painter &(double, double)&Upp::Painter::Quadratic(double,double)&Painter& Quadratic(double x, double y)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u00009\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0000\u0000\u0000\fRelQuadratic)Painter &(const Pointf &, const Pointf &)7Upp::Painter::RelQuadratic(const Pointf&,const Pointf&)8Painter& RelQuadratic(const Pointf& p1, const Pointf& p)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000@\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0000\u0000\u0000\fRelQuadratic)Painter &(double, double, double, double)7Upp::Painter::RelQuadratic(double,double,double,double)?Painter& RelQuadratic(double x1, double y1, double x, double y)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000*\u0000\u0000\u0000È\u0000\u0000\u0000\u0000\u0000\u0000\fRelQuadratic\u0019Painter &(double, double))Upp::Painter::RelQuadratic(double,double))Painter& RelQuadratic(double x, double y)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000'\u0000\u0000\u0000É\u0000\u0000\u0000\u0000\u0000\u0000\fRelQuadratic\u0019Painter &(const Pointf &))Upp::Painter::RelQuadratic(const Pointf&)&Painter& RelQuadratic(const Pointf& p)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0000\u0000\u0000N\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic?Painter &(const Pointf &, const Pointf &, const Pointf &, bool)CUpp::Painter::Cubic(const Pointf&,const Pointf&,const Pointf&,bool)MPainter& Cubic(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ì\u0000\u0000\u0000<\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic/Painter &(const Pointf &, const Pointf &, bool)5Upp::Painter::Cubic(const Pointf&,const Pointf&,bool);Painter& Cubic(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000D\u0000\u0000\u0000Í\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic9Painter &(const Pointf &, const Pointf &, const Pointf &)>Upp::Painter::Cubic(const Pointf&,const Pointf&,const Pointf&)CPainter& Cubic(const Pointf& p1, const Pointf& p2, const Pointf& p)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\u0000Î\u0000\u0000\u00002\u0000\u0000\u0000Î\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic)Painter &(const Pointf &, const Pointf &)0Upp::Painter::Cubic(const Pointf&,const Pointf&)1Painter& Cubic(const Pointf& p2, const Pointf& p)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000Y\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic?Painter &(double, double, double, double, double, double, bool)CUpp::Painter::Cubic(double,double,double,double,double,double,bool)XPainter& Cubic(double x1, double y1, double x2, double y2, double x, double y, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0000\u0000\u0000C\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic/Painter &(double, double, double, double, bool)5Upp::Painter::Cubic(double,double,double,double,bool)BPainter& Cubic(double x2, double y2, double x, double y, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ñ\u0000\u0000\u0000O\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic9Painter &(double, double, double, double, double, double)>Upp::Painter::Cubic(double,double,double,double,double,double)NPainter& Cubic(double x1, double y1, double x2, double y2, double x, double y)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0000\u0000\u00009\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic)Painter &(double, double, double, double)0Upp::Painter::Cubic(double,double,double,double)8Painter& Cubic(double x2, double y2, double x, double y)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000G\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0000\u0000\u0000\bRelCubic9Painter &(const Pointf &, const Pointf &, const Pointf &)AUpp::Painter::RelCubic(const Pointf&,const Pointf&,const Pointf&)FPainter& RelCubic(const Pointf& p1, const Pointf& p2, const Pointf& p)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ô\u0000\u0000\u00005\u0000\u0000\u0000Ô\u0000\u0000\u0000\u0000\u0000\u0000\bRelCubic)Painter &(const Pointf &, const Pointf &)3Upp::Painter::RelCubic(const Pointf&,const Pointf&)4Painter& RelCubic(const Pointf& p2, const Pointf& p)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000R\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0000\u0000\u0000\bRelCubic9Painter &(double, double, double, double, double, double)AUpp::Painter::RelCubic(double,double,double,double,double,double)QPainter& RelCubic(double x1, double y1, double x2, double y2, double x, double y)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ö\u0000\u0000\u0000<\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0000\u0000\u0000\bRelCubic)Painter &(double, double, double, double)3Upp::Painter::RelCubic(double,double,double,double);Painter& RelCubic(double x2, double y2, double x, double y)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0000\u0000\u0000U\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc?Painter &(const Pointf &, const Pointf &, double, double, bool)AUpp::Painter::Arc(const Pointf&,const Pointf&,double,double,bool)TPainter& Arc(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0000\u0000\u0000Z\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc?Painter &(const Pointf &, double, double, double, double, bool)AUpp::Painter::Arc(const Pointf&,double,double,double,double,bool)YPainter& Arc(const Pointf& c, double rx, double ry, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000N\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc7Painter &(const Pointf &, double, double, double, bool):Upp::Painter::Arc(const Pointf&,double,double,double,bool)MPainter& Arc(const Pointf& c, double r, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\u0000Û\u0000\u0000\u0000]\u0000\u0000\u0000Û\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc?Painter &(double, double, double, double, double, double, bool)AUpp::Painter::Arc(double,double,double,double,double,double,bool)\\Painter& Arc(double x, double y, double rx, double ry, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ü\u0000\u0000\u0000Q\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc7Painter &(double, double, double, double, double, bool):Upp::Painter::Arc(double,double,double,double,double,bool)PPainter& Arc(double x, double y, double r, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0000\u0000\u0000K\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc9Painter &(const Pointf &, const Pointf &, double, double)<Upp::Painter::Arc(const Pointf&,const Pointf&,double,double)JPainter& Arc(const Pointf& c, const Pointf& r, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0000\u0000\u0000P\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc9Painter &(const Pointf &, double, double, double, double)<Upp::Painter::Arc(const Pointf&,double,double,double,double)OPainter& Arc(const Pointf& c, double rx, double ry, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0000ß\u0000\u0000\u0000D\u0000\u0000\u0000ß\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc1Painter &(const Pointf &, double, double, double)5Upp::Painter::Arc(const Pointf&,double,double,double)CPainter& Arc(const Pointf& c, double r, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000à\u0000\u0000\u0000\u0001\u0000\u0000\u0000à\u0000\u0000\u0000S\u0000\u0000\u0000à\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc9Painter &(double, double, double, double, double, double)<Upp::Painter::Arc(double,double,double,double,double,double)RPainter& Arc(double x, double y, double rx, double ry, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0000\u0000\u0000á\u0000\u0000\u0000G\u0000\u0000\u0000á\u0000\u0000\u0000\u0000\u0000\u0000\u0003Arc1Painter &(double, double, double, double, double)5Upp::Painter::Arc(double,double,double,double,double)FPainter& Arc(double x, double y, double r, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\u0000â\u0000\u0000\u0000N\u0000\u0000\u0000â\u0000\u0000\u0000\u0000\u0000\u0000\u0006RelArc9Painter &(const Pointf &, const Pointf &, double, double)?Upp::Painter::RelArc(const Pointf&,const Pointf&,double,double)MPainter& RelArc(const Pointf& c, const Pointf& r, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u0000S\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0006RelArc9Painter &(const Pointf &, double, double, double, double)?Upp::Painter::RelArc(const Pointf&,double,double,double,double)RPainter& RelArc(const Pointf& c, double rx, double ry, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000ä\u0000\u0000\u0000G\u0000\u0000\u0000ä\u0000\u0000\u0000\u0000\u0000\u0000\u0006RelArc1Painter &(const Pointf &, double, double, double)8Upp::Painter::RelArc(const Pointf&,double,double,double)FPainter& RelArc(const Pointf& c, double r, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000V\u0000\u0000\u0000å\u0000\u0000\u0000\u0000\u0000\u0000\u0006RelArc9Painter &(double, double, double, double, double, double)?Upp::Painter::RelArc(double,double,double,double,double,double)UPainter& RelArc(double x, double y, double rx, double ry, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000æ\u0000\u0000\u0000J\u0000\u0000\u0000æ\u0000\u0000\u0000\u0000\u0000\u0000\u0006RelArc1Painter &(double, double, double, double, double)8Upp::Painter::RelArc(double,double,double,double,double)IPainter& RelArc(double x, double y, double r, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0000\u0000\u0000c\u0000\u0000\u0000è\u0000\u0000\u0000\u0000\u0000\u0000\u0006SvgArcCPainter &(const Pointf &, double, bool, bool, const Pointf &, bool)GUpp::Painter::SvgArc(const Pointf&,double,bool,bool,const Pointf&,bool)bPainter& SvgArc(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\u0000é\u0000\u0000\u0000h\u0000\u0000\u0000é\u0000\u0000\u0000\u0000\u0000\u0000\u0006SvgArcCPainter &(double, double, double, bool, bool, const Pointf &, bool)GUpp::Painter::SvgArc(double,double,double,bool,bool,const Pointf&,bool)gPainter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000ê\u0000\u0000\u0000k\u0000\u0000\u0000ê\u0000\u0000\u0000\u0000\u0000\u0000\u0006SvgArcCPainter &(double, double, double, bool, bool, double, double, bool)GUpp::Painter::SvgArc(double,double,double,bool,bool,double,double,bool)jPainter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, double x, double y, bool rel)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ë\u0000\u0000\u0000Y\u0000\u0000\u0000ë\u0000\u0000\u0000\u0000\u0000\u0000\u0006SvgArc=Painter &(const Pointf &, double, bool, bool, const Pointf &)BUpp::Painter::SvgArc(const Pointf&,double,bool,bool,const Pointf&)XPainter& SvgArc(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000ì\u0000\u0000\u0000^\u0000\u0000\u0000ì\u0000\u0000\u0000\u0000\u0000\u0000\u0006SvgArc=Painter &(double, double, double, bool, bool, const Pointf &)BUpp::Painter::SvgArc(double,double,double,bool,bool,const Pointf&)]Painter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\u0000í\u0000\u0000\u0000a\u0000\u0000\u0000í\u0000\u0000\u0000\u0000\u0000\u0000\u0006SvgArc=Painter &(double, double, double, bool, bool, double, double)BUpp::Painter::SvgArc(double,double,double,bool,bool,double,double)`Painter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, double x, double y)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\u0000î\u0000\u0000\u0000\\\u0000\u0000\u0000î\u0000\u0000\u0000\u0000\u0000\u0000\tRelSvgArc=Painter &(const Pointf &, double, bool, bool, const Pointf &)EUpp::Painter::RelSvgArc(const Pointf&,double,bool,bool,const Pointf&)[Painter& RelSvgArc(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\tRELSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000ï\u0000\u0000\u0000a\u0000\u0000\u0000ï\u0000\u0000\u0000\u0000\u0000\u0000\tRelSvgArc=Painter &(double, double, double, bool, bool, const Pointf &)EUpp::Painter::RelSvgArc(double,double,double,bool,bool,const Pointf&)`Painter& RelSvgArc(double rx, double ry, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\tRELSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000d\u0000\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0000\tRelSvgArc=Painter &(double, double, double, bool, bool, double, double)EUpp::Painter::RelSvgArc(double,double,double,bool,bool,double,double)cPainter& RelSvgArc(double rx, double ry, double xangle, bool large, bool sweep, double x, double y)\u0003Upp\tRELSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000ò\u0000\u0000\u0000\u0011\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0000\u0005Close\vPainter &()\u0015Upp::Painter::Close()\u0010Painter& Close()\u0003Upp\u0005CLOSE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000ó\u0000\u0000\u0000\u000F\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0000\u0003Div\vPainter &()\u0013Upp::Painter::Div()\u000EPainter& Div()\u0003Upp\u0003DIV\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000õ\u0000\u0000\u0000\u001A\u0000\u0000\u0000õ\u0000\u0000\u0000\u0000\u0000\u0000\u0004Path\u0014Painter &(CParser &)\u001CUpp::Painter::Path(CParser&)\u0019Painter& Path(CParser& p)\u0003Upp\u0004PATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000ö\u0000\u0000\u0000 \u0000\u0000\u0000ö\u0000\u0000\u0000\u0000\u0000\u0000\u0004Path\u0017Painter &(const char *)\u001FUpp::Painter::Path(const char*)\u001FPainter& Path(const char *path)\u0003Upp\u0004PATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000ø\u0000\u0000\u0000!\u0000\u0000\u0000ø\u0000\u0000\u0000\u0000\u0000\u0000\u0004Fill\u0017Painter &(const RGBA &)\u001FUpp::Painter::Fill(const RGBA&) Painter& Fill(const RGBA& color)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000ù\u0000\u0000\u0000b\u0000\u0000\u0000ù\u0000\u0000\u0000\u0000\u0000\u0000\u0004Fill0Painter &(const Image &, const Xform2D &, dword)5Upp::Painter::Fill(const Image&,const Xform2D&,dword)aPainter& Fill(const Image& image, const Xform2D& transsrc = Xform2D::Identity(), dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0000\u0000\u0000ú\u0000\u0000\u0000I\u0000\u0000\u0000ú\u0000\u0000\u0000\u0000\u0000\u0000\u0004Fill/Painter &(const Image &, Pointf, Pointf, dword)4Upp::Painter::Fill(const Image&,Pointf,Pointf,dword)HPainter& Fill(const Image& image, Pointf p1, Pointf p2, dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u001F\u0000\u0000\u0000ü\u0000\u0000\u0000\u0000\u0000\u0000\u0004Fill?Painter &(const Image &, double, double, double, double, dword)BUpp::Painter::Fill(const Image&,double,double,double,double,dword)^Painter& Fill(const Image& image, double x1, double y1, double x2, double y2, dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000ý\u0000\u0000\u0000N\u0000\u0000\u0000þ\u0000\u0000\u0000\u0000\u0000\u0000\u0004FillJPainter &(const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)KUpp::Painter::Fill(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)sPainter& Fill(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0004FillJPainter &(double, double, const RGBA &, double, double, const RGBA &, int)KUpp::Painter::Fill(double,double,const RGBA&,double,double,const RGBA&,int){Painter& Fill(double x1, double y1, const RGBA& color1, double x2, double y2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u001F\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0000\u0000\u0000\u0004Fill=Painter &(const RGBA &, const RGBA &, const Xform2D &, dword)@Upp::Painter::Fill(const RGBA&,const RGBA&,const Xform2D&,dword)_Painter& Fill(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0001\u0000\u0000W\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0000\u0000\u0000\u0004FillRPainter &(const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)RUpp::Painter::Fill(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int){Painter& Fill(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0001\u0000\u0000\\\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000\u0000\u0004FillRPainter &(double, double, const RGBA &, double, double, double, const RGBA &, int)RUpp::Painter::Fill(double,double,const RGBA&,double,double,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Fill(double fx, double fy, const RGBA& color1, double cx, double cy, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\a\u0001\u0000\u0000\u0001\u0000\u0000\u0000\a\u0001\u0000\u0000F\u0000\u0000\u0000\b\u0001\u0000\u0000\u0000\u0000\u0000\u0004FillBPainter &(const Pointf &, const RGBA &, double, const RGBA &, int)DUpp::Painter::Fill(const Pointf&,const RGBA&,double,const RGBA&,int)jPainter& Fill(const Pointf& c, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\u0000\t\u0001\u0000\u0000F\u0000\u0000\u0000\n\u0001\u0000\u0000\u0000\u0000\u0000\u0004FillBPainter &(double, double, const RGBA &, double, const RGBA &, int)DUpp::Painter::Fill(double,double,const RGBA&,double,const RGBA&,int)mPainter& Fill(double x, double y, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\v\u0001\u0000\u0000\u0001\u0000\u0000\u0000\v\u0001\u0000\u0000A\u0000\u0000\u0000\f\u0001\u0000\u0000\u0000\u0000\u0000\u0004FillKPainter &(const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)LUpp::Painter::Fill(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)yPainter& Fill(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0001\u0000\u00001\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0000\u0000\u0000\u0006Stroke\u001FPainter &(double, const RGBA &)(Upp::Painter::Stroke(double,const RGBA&)0Painter& Stroke(double width, const RGBA& color)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000\\\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\u0006Stroke8Painter &(double, const Image &, const Xform2D &, dword)>Upp::Painter::Stroke(double,const Image&,const Xform2D&,dword)[Painter& Stroke(double width, const Image& image, const Xform2D& transsrc, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0001\u0000\u0000!\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeGPainter &(double, const Image &, const Pointf &, const Pointf &, dword)KUpp::Painter::Stroke(double,const Image&,const Pointf&,const Pointf&,dword)fPainter& Stroke(double width, const Image& image, const Pointf& p1, const Pointf& p2, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0001\u0000\u0000!\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeGPainter &(double, const Image &, double, double, double, double, dword)KUpp::Painter::Stroke(double,const Image&,double,double,double,double,dword)nPainter& Stroke(double width, const Image& image, double x1, double y1, double x2, double y2, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0001\u0000\u0000P\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeRPainter &(double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)TUpp::Painter::Stroke(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000T\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeRPainter &(double, double, double, const RGBA &, double, double, const RGBA &, int)TUpp::Painter::Stroke(double,double,double,const RGBA&,double,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, double x1, double y1, const RGBA& color1, double x2, double y2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0001\u0000\u0000!\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeEPainter &(double, const RGBA &, const RGBA &, const Xform2D &, dword)IUpp::Painter::Stroke(double,const RGBA&,const RGBA&,const Xform2D&,dword)oPainter& Stroke(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000Y\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeZPainter &(double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)[Upp::Painter::Stroke(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0001\u0000\u0000\\\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeZPainter &(double, double, double, const RGBA &, double, double, double, const RGBA &, int)[Upp::Painter::Stroke(double,double,double,const RGBA&,double,double,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, double fx, double fy, const RGBA& color1, double x, double y, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0001\u0000\u0000H\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeJPainter &(double, const Pointf &, const RGBA &, double, const RGBA &, int)MUpp::Painter::Stroke(double,const Pointf&,const RGBA&,double,const RGBA&,int)zPainter& Stroke(double width, const Pointf& c, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000\u0000 \u0001\u0000\u0000H\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeJPainter &(double, double, double, const RGBA &, double, const RGBA &, int)MUpp::Painter::Stroke(double,double,double,const RGBA&,double,const RGBA&,int)}Painter& Stroke(double width, double x, double y, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000\"\u0001\u0000\u0000C\u0000\u0000\u0000$\u0001\u0000\u0000\u0000\u0000\u0000\u0006StrokeSPainter &(double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)UUpp::Painter::Stroke(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000\u0010\u0000\u0000\u0000&\u0001\u0000\u0000\u0000\u0000\u0000\u0004Clip\vPainter &()\u0014Upp::Painter::Clip()\u000FPainter& Clip()\u0003Upp\u0004CLIP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u00006\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\tCharacter$Painter &(const Pointf &, int, Font)/Upp::Painter::Character(const Pointf&,int,Font)5Painter& Character(const Pointf& p, int ch, Font fnt)\u0003Upp\tCHARACTER\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u0000)\u0001\u0000\u00009\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000\u0000\tCharacter$Painter &(double, double, int, Font)/Upp::Painter::Character(double,double,int,Font)8Painter& Character(double x, double y, int ch, Font fnt)\u0003Upp\tCHARACTER\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000a\u0000\u0000\u0000*\u0001\u0000\u0000\u0000\u0000\u0000\u0004TextCPainter &(const Pointf &, const wchar *, Font, int, const double *)EUpp::Painter::Text(const Pointf&,const wchar*,Font,int,const double*)]Painter& Text(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000+\u0001\u0000\u0000\u0001\u0000\u0000\u0000+\u0001\u0000\u0000d\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000\u0000\u0004TextCPainter &(double, double, const wchar *, Font, int, const double *)EUpp::Painter::Text(double,double,const wchar*,Font,int,const double*)`Painter& Text(double x, double y, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000,\u0001\u0000\u0000\u0001\u0000\u0000\u0000,\u0001\u0000\u0000T\u0000\u0000\u0000,\u0001\u0000\u0000\u0000\u0000\u0000\u0004Text@Painter &(const Pointf &, const WString &, Font, const double *)CUpp::Painter::Text(const Pointf&,const WString&,Font,const double*)PPainter& Text(const Pointf& p, const WString& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u0000W\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000\u0000\u0004Text@Painter &(double, double, const WString &, Font, const double *)CUpp::Painter::Text(double,double,const WString&,Font,const double*)SPainter& Text(double x, double y, const WString& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000\u0000.\u0001\u0000\u0000S\u0000\u0000\u0000.\u0001\u0000\u0000\u0000\u0000\u0000\u0004Text?Painter &(const Pointf &, const String &, Font, const double *)BUpp::Painter::Text(const Pointf&,const String&,Font,const double*)OPainter& Text(const Pointf& p, const String& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u0000/\u0001\u0000\u0000V\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0004Text?Painter &(double, double, const String &, Font, const double *)BUpp::Painter::Text(double,double,const String&,Font,const double*)RPainter& Text(double x, double y, const String& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u00000\u0001\u0000\u0000`\u0000\u0000\u00000\u0001\u0000\u0000\u0000\u0000\u0000\u0004TextBPainter &(const Pointf &, const char *, Font, int, const double *)DUpp::Painter::Text(const Pointf&,const char*,Font,int,const double*)\\Painter& Text(const Pointf& p, const char *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\u00001\u0001\u0000\u0000c\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000\u0000\u0004TextBPainter &(double, double, const char *, Font, int, const double *)DUpp::Painter::Text(double,double,const char*,Font,int,const double*)_Painter& Text(double x, double y, const char *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\u00003\u0001\u0000\u0000]\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\aEndPath\avoid ()\u0017Upp::Painter::EndPath()\u000Evoid EndPath()\u0003Upp\aENDPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00005\u0001\u0000\u0000\u0001\u0000\u0000\u00005\u0001\u0000\u0000\r\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000\u0000\u0005Begin\avoid ()\u0015Upp::Painter::Begin()\fvoid Begin()\u0003Upp\u0005BEGIN\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00006\u0001\u0000\u0000\u0001\u0000\u0000\u00006\u0001\u0000\u0000\v\u0000\u0000\u00006\u0001\u0000\u0000\u0000\u0000\u0000\u0003End\avoid ()\u0013Upp::Painter::End()\nvoid End()\u0003Upp\u0003END\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00008\u0001\u0000\u0000\u0001\u0000\u0000\u00008\u0001\u0000\u0000\u0011\u0000\u0000\u00008\u0001\u0000\u0000\u0000\u0000\u0000\tBeginMask\avoid ()\u0019Upp::Painter::BeginMask()\u0010void BeginMask()\u0003Upp\tBEGINMASK\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00009\u0001\u0000\u0000\u0001\u0000\u0000\u00009\u0001\u0000\u00002\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000\u0000\vBeginOnPath\u0013void (double, bool)&Upp::Painter::BeginOnPath(double,bool)1void BeginOnPath(double q, bool absolute = false)\u0003Upp\vBEGINONPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\u0000;\u0001\u0000\u00002\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000\u0000\tColorStop\u001FPainter &(double, const RGBA &)+Upp::Painter::ColorStop(double,const RGBA&)1Painter& ColorStop(double pos, const RGBA& color)\u0003Upp\tCOLORSTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0000<\u0001\u0000\u0000\u0016\u0000\u0000\u0000<\u0001\u0000\u0000\u0000\u0000\u0000\nClearStops\vPainter &()\u001AUpp::Painter::ClearStops()\u0015Painter& ClearStops()\u0003Upp\nCLEARSTOPS\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\u0000=\u0001\u0000\u0000\u001B\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000\u0000\aOpacity\u0011Painter &(double)\u001DUpp::Painter::Opacity(double)\u001APainter& Opacity(double o)\u0003Upp\aOPACITY\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u0000>\u0001\u0000\u0000\u001E\u0000\u0000\u0000>\u0001\u0000\u0000\u0000\u0000\u0000\aLineCap\u000EPainter &(int)\u001AUpp::Painter::LineCap(int)\u001DPainter& LineCap(int linecap)\u0003Upp\aLINECAP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\u0000?\u0001\u0000\u0000 \u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000\u0000\bLineJoin\u000EPainter &(int)\u001BUpp::Painter::LineJoin(int)\u001FPainter& LineJoin(int linejoin)\u0003Upp\bLINEJOIN\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\u0000@\u0001\u0000\u0000\u001E\u0000\u0000\u0000@\u0001\u0000\u0000\u0000\u0000\u0000\nMiterLimit\u0011Painter &(double) Upp::Painter::MiterLimit(double)\u001DPainter& MiterLimit(double l)\u0003Upp\nMITERLIMIT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000A\u0001\u0000\u0000\u0001\u0000\u0000\u0000A\u0001\u0000\u00008\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0000\u0000\u0004Dash)Painter &(const Vector<double> &, double)(Upp::Painter::Dash(const Vector&,double)7Painter& Dash(const Vector<double>& dash, double start)\u0003Upp\u0004DASH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0000\u0000\u0000B\u0001\u0000\u00002\u0000\u0000\u0000B\u0001\u0000\u0000\u0000\u0000\u0000\u0004Dash\u001FPainter &(const char *, double)&Upp::Painter::Dash(const char*,double)1Painter& Dash(const char *dash, double start = 0)\u0003Upp\u0004DASH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000C\u0001\u0000\u0000\u0001\u0000\u0000\u0000C\u0001\u0000\u0000&\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000\u0000\aEvenOdd\u000FPainter &(bool)\u001BUpp::Painter::EvenOdd(bool)%Painter& EvenOdd(bool evenodd = true)\u0003Upp\aEVENODD\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000D\u0001\u0000\u0000\u0001\u0000\u0000\u0000D\u0001\u0000\u0000\u001F\u0000\u0000\u0000D\u0001\u0000\u0000\u0000\u0000\u0000\u0006Invert\u000FPainter &(bool)\u001AUpp::Painter::Invert(bool)\u001EPainter& Invert(bool b = true)\u0003Upp\u0006INVERT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000E\u0001\u0000\u0000!\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\vImageFilter\u000EPainter &(int)\u001EUpp::Painter::ImageFilter(int) Painter& ImageFilter(int filter)\u0003Upp\vIMAGEFILTER\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u0000%\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000\u0000\tTransform\u001APainter &(const Xform2D &)'Upp::Painter::Transform(const Xform2D&)$Painter& Transform(const Xform2D& m)\u0003Upp\tTRANSFORM\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\u0000H\u0001\u0000\u0000'\u0000\u0000\u0000H\u0001\u0000\u0000\u0000\u0000\u0000\tTranslate\u0019Painter &(double, double)&Upp::Painter::Translate(double,double)&Painter& Translate(double x, double y)\u0003Upp\tTRANSLATE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0000\u0000\u0000I\u0001\u0000\u0000$\u0000\u0000\u0000I\u0001\u0000\u0000\u0000\u0000\u0000\tTranslate\u0019Painter &(const Pointf &)&Upp::Painter::Translate(const Pointf&)#Painter& Translate(const Pointf& p)\u0003Upp\tTRANSLATE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000J\u0001\u0000\u0000\u0001\u0000\u0000\u0000J\u0001\u0000\u0000\u001A\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\u0006Rotate\u0011Painter &(double)\u001CUpp::Painter::Rotate(double)\u0019Painter& Rotate(double a)\u0003Upp\u0006ROTATE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000K\u0001\u0000\u0000\u0001\u0000\u0000\u0000K\u0001\u0000\u0000-\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000\u0000\u0005Scale\u0019Painter &(double, double)\"Upp::Painter::Scale(double,double),Painter& Scale(double scalex, double scaley)\u0003Upp\u0005SCALE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000L\u0001\u0000\u0000\u0001\u0000\u0000\u0000L\u0001\u0000\u0000\u001D\u0000\u0000\u0000L\u0001\u0000\u0000\u0000\u0000\u0000\u0005Scale\u0011Painter &(double)\u001BUpp::Painter::Scale(double)\u001CPainter& Scale(double scale)\u0003Upp\u0005SCALE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000N\u0001\u0000\u0000\u0001\u0000\u0000\u0000N\u0001\u0000\u0000\"\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000\u0005Paint\u0017void (const Painting &)$Upp::Painter::Paint(const Painting&)\u001Dvoid Paint(const Painting& p)\u0003Upp\u0005PAINT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000P\u0001\u0000\u0000\u0001\u0000\u0000\u0000P\u0001\u0000\u0000=\u0000\u0000\u0000P\u0001\u0000\u0000\u0000\u0000\u0000\tRectangle)Painter &(double, double, double, double)4Upp::Painter::Rectangle(double,double,double,double)<Painter& Rectangle(double x, double y, double cx, double cy)\u0003Upp\tRECTANGLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Q\u0001\u0000\u0000\u0001\u0000\u0000\u0000Q\u0001\u0000\u0000N\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\u0010RoundedRectangle1Painter &(double, double, double, double, double)BUpp::Painter::RoundedRectangle(double,double,double,double,double)MPainter& RoundedRectangle(double x, double y, double cx, double cy, double r)\u0003Upp\u0010ROUNDEDRECTANGLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000R\u0001\u0000\u0000\u0001\u0000\u0000\u0000R\u0001\u0000\u0000Z\u0000\u0000\u0000R\u0001\u0000\u0000\u0000\u0000\u0000\u0010RoundedRectangle9Painter &(double, double, double, double, double, double)IUpp::Painter::RoundedRectangle(double,double,double,double,double,double)YPainter& RoundedRectangle(double x, double y, double cx, double cy, double r1, double r2)\u0003Upp\u0010ROUNDEDRECTANGLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000S\u0001\u0000\u0000\u0001\u0000\u0000\u0000S\u0001\u0000\u0000;\u0000\u0000\u0000S\u0001\u0000\u0000\u0000\u0000\u0000\aEllipse)Painter &(double, double, double, double)2Upp::Painter::Ellipse(double,double,double,double):Painter& Ellipse(double x, double y, double rx, double ry)\u0003Upp\aELLIPSE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000T\u0001\u0000\u0000\u0001\u0000\u0000\u0000T\u0001\u0000\u0000.\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\u0006Circle!Painter &(double, double, double)*Upp::Painter::Circle(double,double,double)-Painter& Circle(double x, double y, double r)\u0003Upp\u0006CIRCLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000V\u0001\u0000\u0000\u0001\u0000\u0000\u0000V\u0001\u0000\u00000\u0000\u0000\u0000V\u0001\u0000\u0000\u0000\u0000\u0000\bRectPath\u001DPainter &(int, int, int, int)'Upp::Painter::RectPath(int,int,int,int)/Painter& RectPath(int x, int y, int cx, int cy)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000W\u0001\u0000\u0000\u0001\u0000\u0000\u0000W\u0001\u0000\u0000!\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000\u0000\bRectPath\u0017Painter &(const Rect &)#Upp::Painter::RectPath(const Rect&) Painter& RectPath(const Rect& r)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000X\u0001\u0000\u0000\u0001\u0000\u0000\u0000X\u0001\u0000\u0000<\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\bRectPath)Painter &(double, double, double, double)3Upp::Painter::RectPath(double,double,double,double);Painter& RectPath(double x, double y, double cx, double cy)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000Y\u0001\u0000\u0000\u0001\u0000\u0000\u0000Y\u0001\u0000\u0000\"\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000\u0000\u0000\bRectPath\u0018Painter &(const Rectf &)$Upp::Painter::RectPath(const Rectf&)!Painter& RectPath(const Rectf& r)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000C\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u000EPaintCharacter+void (Painter &, const Pointf &, int, Font)4Upp::PaintCharacter(Painter&,const Pointf&,int,Font)Cvoid PaintCharacter(Painter& sw, const Pointf& p, int ch, Font fnt)\u0003Upp\u000EPAINTCHARACTER\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u0001\u0000\u0000\u0000i\u0001\u0000\u0000\u0001\u0000\u0000\rImageBuffer__\u0012Upp::ImageBuffer__\u0012Upp::ImageBuffer__\rImageBuffer__\u0003Upp\rIMAGEBUFFER__\u0012Upp::ImageBuffer__\u0012UPP::IMAGEBUFFER__\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000e\u0001\u0000\u0000\u0001\u0000\u0000\u0000e\u0001\u0000\u0000\u000F\u0000\u0000\u0000e\u0001\u0000\u0000\u0001\u0000\u0000\u0002ib\vImageBuffer\u0016Upp::ImageBuffer__::ib\u000EImageBuffer ib\u0003Upp\u0002IB\u0012Upp::ImageBuffer__\u0012UPP::IMAGEBUFFER__\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0001\u0000\u0000\u0001\u0000\u0000\u0000h\u0001\u0000\u0000#\u0000\u0000\u0000h\u0001\u0000\u0000\u0001\u0000\u0000\rImageBuffer__\vvoid (Size)'Upp::ImageBuffer__::ImageBuffer__(Size)\u0016ImageBuffer__(Size sz)\u0003Upp\rIMAGEBUFFER__\u0012Upp::ImageBuffer__\u0012UPP::IMAGEBUFFER__\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000k\u0001\u0000\u0000\u0000\u0000\u0000\u0000k\u0001\u0000\u0000\u0001\u0000\u0000\u0000r\u0001\u0000\u0000\u0001\u0000\u0000\fImagePainter\u0011Upp::ImagePainter\u0011Upp::ImagePainter:ImagePainter : private ImageBuffer__, public BufferPainter\u0003Upp\fIMAGEPAINTER\u0011Upp::ImagePainter\u0011UPP::IMAGEPAINTER%Upp::ImageBuffer__;Upp::BufferPainter\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\u0000m\u0001\u0000\u00003\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000\u0000\fImagePainter\u0010void (Size, int))Upp::ImagePainter::ImagePainter(Size,int)2ImagePainter(Size sz, int mode = MODE_ANTIALIASED)\u0003Upp\fIMAGEPAINTER\u0011Upp::ImagePainter\u0011UPP::IMAGEPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0001\u0000\u0000\u0001\u0000\u0000\u0000n\u0001\u0000\u0000:\u0000\u0000\u0000n\u0001\u0000\u0000\u0000\u0000\u0000\fImagePainter\u0014void (int, int, int),Upp::ImagePainter::ImagePainter(int,int,int)9ImagePainter(int cx, int cy, int mode = MODE_ANTIALIASED)\u0003Upp\fIMAGEPAINTER\u0011Upp::ImagePainter\u0011UPP::IMAGEPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000p\u0001\u0000\u0000\u0001\u0000\u0000\u0000p\u0001\u0000\u0000:\u0000\u0000\u0000p\u0001\u0000\u0000\u0001\u0000\u0000\tGetResult\bImage ()\u001EUpp::ImagePainter::GetResult()\u0011Image GetResult()\u0003Upp\tGETRESULT\u0011Upp::ImagePainter\u0011UPP::IMAGEPAINTER\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0001\u0000\u0000\u0001\u0000\u0000\u0000q\u0001\u0000\u0000*\u0000\u0000\u0000q\u0001\u0000\u0000\u0001\u0000\u0000\u000Eoperator Image\bImage ()#Upp::ImagePainter::operator Image()\u0010operator Image()\u0003Upp\u000EOPERATOR IMAGE\u0011Upp::ImagePainter\u0011UPP::IMAGEPAINTER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0001\u0000\u0000\u0000{\u0001\u0000\u0000\u0001\u0000\u0000\vDrawPainter\u0010Upp::DrawPainter\u0010Upp::DrawPainter!DrawPainter : public ImagePainter\u0003Upp\vDRAWPAINTER\u0010Upp::DrawPainter\u0010UPP::DRAWPAINTER\u0011Upp::ImagePainter\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000u\u0001\u0000\u0000\u0001\u0000\u0000\u0000u\u0001\u0000\u0000\b\u0000\u0000\u0000u\u0001\u0000\u0000\u0001\u0000\u0000\u0001w\u0006Draw &\u0013Upp::DrawPainter::w\aDraw& w\u0003Upp\u0001W\u0010Upp::DrawPainter\u0010UPP::DRAWPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0001\u0000\u0000\u0001\u0000\u0000\u0000x\u0001\u0000\u0000;\u0000\u0000\u0000x\u0001\u0000\u0000\u0000\u0000\u0000\vDrawPainter\u0018void (Draw &, Size, int)-Upp::DrawPainter::DrawPainter(Draw&,Size,int):DrawPainter(Draw& w, Size sz, int mode = MODE_ANTIALIASED)\u0003Upp\vDRAWPAINTER\u0010Upp::DrawPainter\u0010UPP::DRAWPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0001\u0000\u0000\u0001\u0000\u0000\u0000y\u0001\u0000\u0000j\u0000\u0000\u0000y\u0001\u0000\u0000\u0001\u0000\u0000\vDrawPainter\u001Cvoid (Draw &, int, int, int)0Upp::DrawPainter::DrawPainter(Draw&,int,int,int)ADrawPainter(Draw& w, int cx, int cy, int mode = MODE_ANTIALIASED)\u0003Upp\vDRAWPAINTER\u0010Upp::DrawPainter\u0010UPP::DRAWPAINTER\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0001\u0000\u0000\u0001\u0000\u0000\u0000z\u0001\u0000\u0000\u000F\u0000\u0000\u0000z\u0001\u0000\u0000\u0000\u0000\u0000\f~DrawPainter\u0010void () noexcept\u0015Upp::DrawPainter::~()\u000E~DrawPainter()\u0003Upp\f~DRAWPAINTER\u0010Upp::DrawPainter\u0010UPP::DRAWPAINTER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000\u0000}\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ã\u0001\u0000\u0000\u0001\u0000\u0000\nNilPainter\u000FUpp::NilPainter\u000FUpp::NilPainter\u001BNilPainter : public Painter\u0003Upp\nNILPAINTER\u000FUpp::NilPainter\u000FUPP::NILPAINTER\fUpp::Painter\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0001\u0000\u0000*\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0000\u0001\u0000\aClearOp\u0013void (const RGBA &)%Upp::NilPainter::ClearOp(const RGBA&)\u001Fvoid ClearOp(const RGBA& color)\u0003Upp\aCLEAROP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool)+Upp::NilPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool)+Upp::NilPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)>Upp::NilPainter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)0Upp::NilPainter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)HUpp::NilPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool):Upp::NilPainter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)FUpp::NilPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)LUpp::NilPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\aCloseOp\avoid ()\u001AUpp::NilPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0005DivOp\avoid ()\u0018Upp::NilPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006FillOp\u0013void (const RGBA &)$Upp::NilPainter::FillOp(const RGBA&)\u001Evoid FillOp(const RGBA& color)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006FillOp,void (const Image &, const Xform2D &, dword):Upp::NilPainter::FillOp(const Image&,const Xform2D&,dword)Evoid FillOp(const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006FillOpFvoid (const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)PUpp::NilPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)bvoid FillOp(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006FillOp7void (const RGBA &, const RGBA &, const Xform2D &, int)CUpp::NilPainter::FillOp(const RGBA&,const RGBA&,const Xform2D&,int)Wvoid FillOp(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006FillOpNvoid (const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)WUpp::NilPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)jvoid FillOp(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0006FillOpGvoid (const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)QUpp::NilPainter::FillOp(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)hvoid FillOp(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\bStrokeOp\u001Bvoid (double, const RGBA &)-Upp::NilPainter::StrokeOp(double,const RGBA&)-void StrokeOp(double width, const RGBA& rgba)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\bStrokeOp4void (double, const Image &, const Xform2D &, dword)CUpp::NilPainter::StrokeOp(double,const Image&,const Xform2D&,dword)Uvoid StrokeOp(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\bStrokeOpNvoid (double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)YUpp::NilPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)rvoid StrokeOp(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000\u0000 \u0001\u0000\u0000#\u0000\u0000\u0000¢\u0001\u0000\u0000\u0000\u0001\u0000\bStrokeOp?void (double, const RGBA &, const RGBA &, const Xform2D &, int)LUpp::NilPainter::StrokeOp(double,const RGBA&,const RGBA&,const Xform2D&,int)gvoid StrokeOp(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000£\u0001\u0000\u0000\u0001\u0000\u0000\u0000£\u0001\u0000\u0000#\u0000\u0000\u0000¥\u0001\u0000\u0000\u0000\u0001\u0000\bStrokeOpVvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)`Upp::NilPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)zvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¦\u0001\u0000\u0000\u0001\u0000\u0000\u0000¦\u0001\u0000\u0000<\u0000\u0000\u0000¨\u0001\u0000\u0000\u0000\u0001\u0000\bStrokeOpOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)ZUpp::NilPainter::StrokeOp(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)xvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000ª\u0001\u0000\u0000\u0001\u0000\u0000\u0000ª\u0001\u0000\u0000\u0018\u0000\u0000\u0000ª\u0001\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\avoid ()\u0019Upp::NilPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¬\u0001\u0000\u0000\u0001\u0000\u0000\u0000¬\u0001\u0000\u0000>\u0000\u0000\u0000¬\u0001\u0000\u0000\u0000\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)4Upp::NilPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000­\u0001\u0000\u0000\u0001\u0000\u0000\u0000­\u0001\u0000\u0000/\u0000\u0000\u0000®\u0001\u0000\u0000\u0000\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)JUpp::NilPainter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000°\u0001\u0000\u0000\u0001\u0000\u0000\u0000°\u0001\u0000\u0000:\u0000\u0000\u0000°\u0001\u0000\u0000\u0000\u0001\u0000\vColorStopOp\u001Bvoid (double, const RGBA &)0Upp::NilPainter::ColorStopOp(double,const RGBA&)/void ColorStopOp(double pos, const RGBA& color)\u0003Upp\vCOLORSTOPOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000±\u0001\u0000\u0000\u0001\u0000\u0000\u0000±\u0001\u0000\u0000\u001E\u0000\u0000\u0000±\u0001\u0000\u0000\u0000\u0001\u0000\fClearStopsOp\avoid ()\u001FUpp::NilPainter::ClearStopsOp()\u0013void ClearStopsOp()\u0003Upp\fCLEARSTOPSOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000³\u0001\u0000\u0000\u0001\u0000\u0000\u0000³\u0001\u0000\u0000#\u0000\u0000\u0000³\u0001\u0000\u0000\u0000\u0001\u0000\tOpacityOp\rvoid (double)\"Upp::NilPainter::OpacityOp(double)\u0018void OpacityOp(double o)\u0003Upp\tOPACITYOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000´\u0001\u0000\u0000\u0001\u0000\u0000\u0000´\u0001\u0000\u0000&\u0000\u0000\u0000´\u0001\u0000\u0000\u0000\u0001\u0000\tLineCapOp\nvoid (int)\u001FUpp::NilPainter::LineCapOp(int)\u001Bvoid LineCapOp(int linecap)\u0003Upp\tLINECAPOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000µ\u0001\u0000\u0000\u0001\u0000\u0000\u0000µ\u0001\u0000\u0000(\u0000\u0000\u0000µ\u0001\u0000\u0000\u0000\u0001\u0000\nLineJoinOp\nvoid (int) Upp::NilPainter::LineJoinOp(int)\u001Dvoid LineJoinOp(int linejoin)\u0003Upp\nLINEJOINOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¶\u0001\u0000\u0000\u0001\u0000\u0000\u0000¶\u0001\u0000\u0000&\u0000\u0000\u0000¶\u0001\u0000\u0000\u0000\u0001\u0000\fMiterLimitOp\rvoid (double)%Upp::NilPainter::MiterLimitOp(double)\u001Bvoid MiterLimitOp(double l)\u0003Upp\fMITERLIMITOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000·\u0001\u0000\u0000\u0001\u0000\u0000\u0000·\u0001\u0000\u0000'\u0000\u0000\u0000·\u0001\u0000\u0000\u0000\u0001\u0000\tEvenOddOp\vvoid (bool) Upp::NilPainter::EvenOddOp(bool)\u001Cvoid EvenOddOp(bool evenodd)\u0003Upp\tEVENODDOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¸\u0001\u0000\u0000\u0001\u0000\u0000\u0000¸\u0001\u0000\u0000@\u0000\u0000\u0000¸\u0001\u0000\u0000\u0000\u0001\u0000\u0006DashOp%void (const Vector<double> &, double)-Upp::NilPainter::DashOp(const Vector&,double)5void DashOp(const Vector<double>& dash, double start)\u0003Upp\u0006DASHOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¹\u0001\u0000\u0000\u0001\u0000\u0000\u0000¹\u0001\u0000\u0000%\u0000\u0000\u0000¹\u0001\u0000\u0000\u0000\u0001\u0000\bInvertOp\vvoid (bool)\u001FUpp::NilPainter::InvertOp(bool)\u001Avoid InvertOp(bool invert)\u0003Upp\bINVERTOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000º\u0001\u0000\u0000\u0001\u0000\u0000\u0000º\u0001\u0000\u0000)\u0000\u0000\u0000º\u0001\u0000\u0000\u0000\u0001\u0000\rImageFilterOp\nvoid (int)#Upp::NilPainter::ImageFilterOp(int)\u001Evoid ImageFilterOp(int filter)\u0003Upp\rIMAGEFILTEROP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¼\u0001\u0000\u0000\u0001\u0000\u0000\u0000¼\u0001\u0000\u0000-\u0000\u0000\u0000¼\u0001\u0000\u0000\u0000\u0001\u0000\vTransformOp\u0016void (const Xform2D &),Upp::NilPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¾\u0001\u0000\u0000\u0001\u0000\u0000\u0000¾\u0001\u0000\u0000\u0019\u0000\u0000\u0000¾\u0001\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u001AUpp::NilPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000¿\u0001\u0000\u0000\u0001\u0000\u0000\u0000¿\u0001\u0000\u0000\u0017\u0000\u0000\u0000¿\u0001\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u0018Upp::NilPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000Á\u0001\u0000\u0000\u0001\u0000\u0000\u0000Á\u0001\u0000\u0000\u001D\u0000\u0000\u0000Á\u0001\u0000\u0000\u0000\u0001\u0000\vBeginMaskOp\avoid ()\u001EUpp::NilPainter::BeginMaskOp()\u0012void BeginMaskOp()\u0003Upp\vBEGINMASKOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000Â\u0001\u0000\u0000\u0001\u0000\u0000\u0000Â\u0001\u0000\u00001\u0000\u0000\u0000Â\u0001\u0000\u0000\u0000\u0001\u0000\rBeginOnPathOp\u0013void (double, bool)+Upp::NilPainter::BeginOnPathOp(double,bool)&void BeginOnPathOp(double q, bool abs)\u0003Upp\rBEGINONPATHOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Å\u0001\u0000\u0000\u0000\u0000\u0000\u0000Å\u0001\u0000\u0000N\u0000\u0000\u0000Å\u0001\u0000\u0000\u0000\u0000\u0000\tRenderSVG7bool (Painter &, const char *, Event<String, String &>)*Upp::RenderSVG(Painter&,const char*,Event)Mbool RenderSVG(Painter& p, const char *svg, Event<String, String&> resloader)\u0003Upp\tRENDERSVG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Æ\u0001\u0000\u0000\u0000\u0000\u0000\u0000Æ\u0001\u0000\u0000,\u0000\u0000\u0000Æ\u0001\u0000\u0000\u0000\u0000\u0000\tRenderSVG\u001Ebool (Painter &, const char *)$Upp::RenderSVG(Painter&,const char*)+bool RenderSVG(Painter& p, const char *svg)\u0003Upp\tRENDERSVG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000È\u0001\u0000\u0000\u0000\u0000\u0000\u0000È\u0001\u0000\u0000B\u0000\u0000\u0000È\u0001\u0000\u0000\u0000\u0000\u0000\u0010GetSVGDimensions%void (const char *, Sizef &, Rectf &)0Upp::GetSVGDimensions(const char*,Sizef&,Rectf&)Avoid GetSVGDimensions(const char *svg, Sizef& sz, Rectf& viewbox)\u0003Upp\u0010GETSVGDIMENSIONS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000É\u0001\u0000\u0000\u0000\u0000\u0000\u0000É\u0001\u0000\u0000(\u0000\u0000\u0000É\u0001\u0000\u0000\u0000\u0000\u0000\u0011GetSVGBoundingBox\u0014Rectf (const char *)#Upp::GetSVGBoundingBox(const char*)(Rectf GetSVGBoundingBox(const char *svg)\u0003Upp\u0011GETSVGBOUNDINGBOX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ê\u0001\u0000\u0000-\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0000\u0000\u0000\u0015GetSVGPathBoundingBox\u0014Rectf (const char *)'Upp::GetSVGPathBoundingBox(const char*)-Rectf GetSVGPathBoundingBox(const char *path)\u0003Upp\u0015GETSVGPATHBOUNDINGBOX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0001\u0000\u0000P\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0000\u0000\u0000\u000ERenderSVGImage3Image (Size, const char *, Event<String, String &>)+Upp::RenderSVGImage(Size,const char*,Event)PImage RenderSVGImage(Size sz, const char *svg, Event<String, String&> resloader)\u0003Upp\u000ERENDERSVGIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000Í\u0001\u0000\u0000\u0000\u0000\u0000\u0000Í\u0001\u0000\u0000.\u0000\u0000\u0000Í\u0001\u0000\u0000\u0000\u0000\u0000\u000ERenderSVGImage\u001AImage (Size, const char *)%Upp::RenderSVGImage(Size,const char*).Image RenderSVGImage(Size sz, const char *svg)\u0003Upp\u000ERENDERSVGIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000Ï\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ï\u0001\u0000\u0000\u001B\u0000\u0000\u0000Ï\u0001\u0000\u0000\u0000\u0000\u0000\u0005IsSVG\u0013bool (const char *)\u0017Upp::IsSVG(const char*)\u001Bbool IsSVG(const char *svg)\u0003Upp\u0005ISSVG\u0003Upp\u0003UPP\u0000\u0000end\u0000ì\t\u0001\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painter.hpp","value":"data[\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0005Clear\u0013void (const RGBA &) Upp::Painter::Clear(const RGBA&)*void Clear(const RGBA& color = RGBAZero())\u0003Upp\u0005CLEAR\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0004Move\u001FPainter &(const Pointf &, bool)&Upp::Painter::Move(const Pointf&,bool)(Painter& Move(const Pointf& p, bool rel)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0004Line\u001FPainter &(const Pointf &, bool)&Upp::Painter::Line(const Pointf&,bool)(Painter& Line(const Pointf& p, bool rel)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\tQuadratic/Painter &(const Pointf &, const Pointf &, bool)9Upp::Painter::Quadratic(const Pointf&,const Pointf&,bool)?Painter& Quadratic(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\tQuadratic\u001FPainter &(const Pointf &, bool)+Upp::Painter::Quadratic(const Pointf&,bool)-Painter& Quadratic(const Pointf& p, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0005Cubic?Painter &(const Pointf &, const Pointf &, const Pointf &, bool)CUpp::Painter::Cubic(const Pointf&,const Pointf&,const Pointf&,bool)MPainter& Cubic(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0005Cubic/Painter &(const Pointf &, const Pointf &, bool)5Upp::Painter::Cubic(const Pointf&,const Pointf&,bool);Painter& Cubic(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0003Arc?Painter &(const Pointf &, const Pointf &, double, double, bool)AUpp::Painter::Arc(const Pointf&,const Pointf&,double,double,bool)TPainter& Arc(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0006SvgArcCPainter &(const Pointf &, double, bool, bool, const Pointf &, bool)GUpp::Painter::SvgArc(const Pointf&,double,bool,bool,const Pointf&,bool)bPainter& SvgArc(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0005Close\vPainter &()\u0015Upp::Painter::Close()\u0010Painter& Close()\u0003Upp\u0005CLOSE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0003Div\vPainter &()\u0013Upp::Painter::Div()\u000EPainter& Div()\u0003Upp\u0003DIV\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill\u0017Painter &(const RGBA &)\u001FUpp::Painter::Fill(const RGBA&) Painter& Fill(const RGBA& color)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill0Painter &(const Image &, const Xform2D &, dword)5Upp::Painter::Fill(const Image&,const Xform2D&,dword)aPainter& Fill(const Image& image, const Xform2D& transsrc = Xform2D::Identity(), dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0004FillJPainter &(const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)KUpp::Painter::Fill(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)sPainter& Fill(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\u0004FillRPainter &(const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)RUpp::Painter::Fill(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int){Painter& Fill(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0006Stroke\u001FPainter &(double, const RGBA &)(Upp::Painter::Stroke(double,const RGBA&)0Painter& Stroke(double width, const RGBA& color)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000p\u0000\u0000\u0000\u0000\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0006Stroke8Painter &(double, const Image &, const Xform2D &, dword)>Upp::Painter::Stroke(double,const Image&,const Xform2D&,dword)[Painter& Stroke(double width, const Image& image, const Xform2D& transsrc, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeRPainter &(double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)TUpp::Painter::Stroke(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeZPainter &(double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)[Upp::Painter::Stroke(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Clip\vPainter &()\u0014Upp::Painter::Clip()\u000FPainter& Clip()\u0003Upp\u0004CLIP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tColorStop\u001FPainter &(double, const RGBA &)+Upp::Painter::ColorStop(double,const RGBA&)1Painter& ColorStop(double pos, const RGBA& color)\u0003Upp\tCOLORSTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nClearStops\vPainter &()\u001AUpp::Painter::ClearStops()\u0015Painter& ClearStops()\u0003Upp\nCLEARSTOPS\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aOpacity\u0011Painter &(double)\u001DUpp::Painter::Opacity(double)\u001APainter& Opacity(double o)\u0003Upp\aOPACITY\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\aLineCap\u000EPainter &(int)\u001AUpp::Painter::LineCap(int)\u001DPainter& LineCap(int linecap)\u0003Upp\aLINECAP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000£\u0000\u0000\u0000\u0000\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\bLineJoin\u000EPainter &(int)\u001BUpp::Painter::LineJoin(int)\u001FPainter& LineJoin(int linejoin)\u0003Upp\bLINEJOIN\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000©\u0000\u0000\u0000\u0000\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\nMiterLimit\u0011Painter &(double) Upp::Painter::MiterLimit(double)\u001DPainter& MiterLimit(double l)\u0003Upp\nMITERLIMIT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000¯\u0000\u0000\u0000\u0000\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\aEvenOdd\u000FPainter &(bool)\u001BUpp::Painter::EvenOdd(bool)%Painter& EvenOdd(bool evenodd = true)\u0003Upp\aEVENODD\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000µ\u0000\u0000\u0000\u0000\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0006Invert\u000FPainter &(bool)\u001AUpp::Painter::Invert(bool)\u001EPainter& Invert(bool b = true)\u0003Upp\u0006INVERT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\u0000»\u0000\u0000\u0000\u0001\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\vImageFilter\u000EPainter &(int)\u001EUpp::Painter::ImageFilter(int) Painter& ImageFilter(int filter)\u0003Upp\vIMAGEFILTER\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000Â\u0000\u0000\u0000\u0000\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0004Dash)Painter &(const Vector<double> &, double)(Upp::Painter::Dash(const Vector&,double)7Painter& Dash(const Vector<double>& dash, double start)\u0003Upp\u0004DASH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ó\u0000\u0000\u0000\u0001\u0000\u0000\u0004Dash\u001FPainter &(const char *, double)&Upp::Painter::Dash(const char*,double)1Painter& Dash(const char *dash, double start = 0)\u0003Upp\u0004DASH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\tTransform\u001APainter &(const Xform2D &)'Upp::Painter::Transform(const Xform2D&)$Painter& Transform(const Xform2D& m)\u0003Upp\tTRANSFORM\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000Û\u0000\u0000\u0000\u0000\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0000\u0000\u0000\u0001\u0000\u0000\u0005Begin\avoid ()\u0015Upp::Painter::Begin()\fvoid Begin()\u0003Upp\u0005BEGIN\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000à\u0000\u0000\u0000\u0000\u0000\u0000\u0000à\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0000\u0000\u0003End\avoid ()\u0013Upp::Painter::End()\nvoid End()\u0003Upp\u0003END\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000å\u0000\u0000\u0000\u0000\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\tBeginMask\avoid ()\u0019Upp::Painter::BeginMask()\u0010void BeginMask()\u0003Upp\tBEGINMASK\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000ê\u0000\u0000\u0000\u0000\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\vBeginOnPath\u0013void (double, bool)&Upp::Painter::BeginOnPath(double,bool),void BeginOnPath(double q, bool abs = false)\u0003Upp\vBEGINONPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000ï\u0000\u0000\u0000\u0000\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\tCharacter$Painter &(const Pointf &, int, Font)/Upp::Painter::Character(const Pointf&,int,Font)5Painter& Character(const Pointf& p, int ch, Font fnt)\u0003Upp\tCHARACTER\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ö\u0000\u0000\u0000\u0000\u0000\u0000\u0000õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000ú\u0000\u0000\u0000\u0001\u0000\u0000\u0004TextCPainter &(const Pointf &, const wchar *, Font, int, const double *)EUpp::Painter::Text(const Pointf&,const wchar*,Font,int,const double*)]Painter& Text(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0000\u0004Move\u0019Painter &(const Pointf &)!Upp::Painter::Move(const Pointf&)\u001EPainter& Move(const Pointf& p)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\u0004Line\u0019Painter &(const Pointf &)!Upp::Painter::Line(const Pointf&)\u001EPainter& Line(const Pointf& p)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\v\u0001\u0000\u0000\u0000\u0000\u0000\u0000\n\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\tQuadratic)Painter &(const Pointf &, const Pointf &)4Upp::Painter::Quadratic(const Pointf&,const Pointf&)5Painter& Quadratic(const Pointf& p1, const Pointf& p)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\tQuadratic\u0019Painter &(const Pointf &)&Upp::Painter::Quadratic(const Pointf&)#Painter& Quadratic(const Pointf& p)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0005Cubic9Painter &(const Pointf &, const Pointf &, const Pointf &)>Upp::Painter::Cubic(const Pointf&,const Pointf&,const Pointf&)CPainter& Cubic(const Pointf& p1, const Pointf& p2, const Pointf& p)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000 \u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\u0005Cubic)Painter &(const Pointf &, const Pointf &)0Upp::Painter::Cubic(const Pointf&,const Pointf&)1Painter& Cubic(const Pointf& p2, const Pointf& p)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0000+\u0001\u0000\u0000\u0001\u0000\u0000\aRelMove\u0019Painter &(const Pointf &)$Upp::Painter::RelMove(const Pointf&)!Painter& RelMove(const Pointf& p)\u0003Upp\aRELMOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000.\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\aRelLine\u0019Painter &(const Pointf &)$Upp::Painter::RelLine(const Pointf&)!Painter& RelLine(const Pointf& p)\u0003Upp\aRELLINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00009\u0001\u0000\u0000\u0001\u0000\u0000\fRelQuadratic)Painter &(const Pointf &, const Pointf &)7Upp::Painter::RelQuadratic(const Pointf&,const Pointf&)8Painter& RelQuadratic(const Pointf& p1, const Pointf& p)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000<\u0001\u0000\u0000\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\fRelQuadratic\u0019Painter &(const Pointf &))Upp::Painter::RelQuadratic(const Pointf&)&Painter& RelQuadratic(const Pointf& p)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\bRelCubic9Painter &(const Pointf &, const Pointf &, const Pointf &)AUpp::Painter::RelCubic(const Pointf&,const Pointf&,const Pointf&)FPainter& RelCubic(const Pointf& p1, const Pointf& p2, const Pointf& p)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0000\u0000\u0000N\u0001\u0000\u0000\u0001\u0000\u0000\bRelCubic)Painter &(const Pointf &, const Pointf &)3Upp::Painter::RelCubic(const Pointf&,const Pointf&)4Painter& RelCubic(const Pointf& p2, const Pointf& p)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\u0000P\u0001\u0000\u0000\u0001\u0000\u0000\u0000U\u0001\u0000\u0000\u0001\u0000\u0000\u0004Move\u001FPainter &(double, double, bool)&Upp::Painter::Move(double,double,bool)+Painter& Move(double x, double y, bool rel)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\u0000W\u0001\u0000\u0000\u0001\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0004Line\u001FPainter &(double, double, bool)&Upp::Painter::Line(double,double,bool)+Painter& Line(double x, double y, bool rel)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000_\u0001\u0000\u0000\u0000\u0000\u0000\u0000^\u0001\u0000\u0000\u0001\u0000\u0000\u0000c\u0001\u0000\u0000\u0001\u0000\u0000\tQuadratic/Painter &(double, double, double, double, bool)9Upp::Painter::Quadratic(double,double,double,double,bool)FPainter& Quadratic(double x1, double y1, double x, double y, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000f\u0001\u0000\u0000\u0000\u0000\u0000\u0000e\u0001\u0000\u0000\u0001\u0000\u0000\u0000j\u0001\u0000\u0000\u0001\u0000\u0000\tQuadratic\u001FPainter &(double, double, bool)+Upp::Painter::Quadratic(double,double,bool)0Painter& Quadratic(double x, double y, bool rel)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000\u0000\u0000l\u0001\u0000\u0000\u0001\u0000\u0000\u0000q\u0001\u0000\u0000\u0001\u0000\u0000\u0005Cubic?Painter &(double, double, double, double, double, double, bool)CUpp::Painter::Cubic(double,double,double,double,double,double,bool)XPainter& Cubic(double x1, double y1, double x2, double y2, double x, double y, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000s\u0001\u0000\u0000\u0001\u0000\u0000\u0000x\u0001\u0000\u0000\u0001\u0000\u0000\u0005Cubic/Painter &(double, double, double, double, bool)5Upp::Painter::Cubic(double,double,double,double,bool)BPainter& Cubic(double x2, double y2, double x, double y, bool rel)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000{\u0001\u0000\u0000\u0000\u0000\u0000\u0000z\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0001\u0000\u0000\u0001\u0000\u0000\u0004Move\u0019Painter &(double, double)!Upp::Painter::Move(double,double)!Painter& Move(double x, double y)\u0003Upp\u0004MOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004Line\u0019Painter &(double, double)!Upp::Painter::Line(double,double)!Painter& Line(double x, double y)\u0003Upp\u0004LINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tQuadratic)Painter &(double, double, double, double)4Upp::Painter::Quadratic(double,double,double,double)<Painter& Quadratic(double x1, double y1, double x, double y)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\tQuadratic\u0019Painter &(double, double)&Upp::Painter::Quadratic(double,double)&Painter& Quadratic(double x, double y)\u0003Upp\tQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0005Cubic9Painter &(double, double, double, double, double, double)>Upp::Painter::Cubic(double,double,double,double,double,double)NPainter& Cubic(double x1, double y1, double x2, double y2, double x, double y)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000¢\u0001\u0000\u0000\u0001\u0000\u0000\u0005Cubic)Painter &(double, double, double, double)0Upp::Painter::Cubic(double,double,double,double)8Painter& Cubic(double x2, double y2, double x, double y)\u0003Upp\u0005CUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000¥\u0001\u0000\u0000\u0000\u0000\u0000\u0000¤\u0001\u0000\u0000\u0001\u0000\u0000\u0000©\u0001\u0000\u0000\u0001\u0000\u0000\aRelMove\u0019Painter &(double, double)$Upp::Painter::RelMove(double,double)$Painter& RelMove(double x, double y)\u0003Upp\aRELMOVE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000¬\u0001\u0000\u0000\u0000\u0000\u0000\u0000«\u0001\u0000\u0000\u0001\u0000\u0000\u0000°\u0001\u0000\u0000\u0001\u0000\u0000\aRelLine\u0019Painter &(double, double)$Upp::Painter::RelLine(double,double)$Painter& RelLine(double x, double y)\u0003Upp\aRELLINE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000³\u0001\u0000\u0000\u0000\u0000\u0000\u0000²\u0001\u0000\u0000\u0001\u0000\u0000\u0000·\u0001\u0000\u0000\u0001\u0000\u0000\fRelQuadratic)Painter &(double, double, double, double)7Upp::Painter::RelQuadratic(double,double,double,double)?Painter& RelQuadratic(double x1, double y1, double x, double y)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000º\u0001\u0000\u0000\u0000\u0000\u0000\u0000¹\u0001\u0000\u0000\u0001\u0000\u0000\u0000¾\u0001\u0000\u0000\u0001\u0000\u0000\fRelQuadratic\u0019Painter &(double, double))Upp::Painter::RelQuadratic(double,double))Painter& RelQuadratic(double x, double y)\u0003Upp\fRELQUADRATIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Á\u0001\u0000\u0000\u0000\u0000\u0000\u0000À\u0001\u0000\u0000\u0001\u0000\u0000\u0000Å\u0001\u0000\u0000\u0001\u0000\u0000\bRelCubic9Painter &(double, double, double, double, double, double)AUpp::Painter::RelCubic(double,double,double,double,double,double)QPainter& RelCubic(double x1, double y1, double x2, double y2, double x, double y)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000È\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ì\u0001\u0000\u0000\u0001\u0000\u0000\bRelCubic)Painter &(double, double, double, double)3Upp::Painter::RelCubic(double,double,double,double);Painter& RelCubic(double x2, double y2, double x, double y)\u0003Upp\bRELCUBIC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ï\u0001\u0000\u0000\u0000\u0000\u0000\u0000Î\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc?Painter &(const Pointf &, double, double, double, double, bool)AUpp::Painter::Arc(const Pointf&,double,double,double,double,bool)YPainter& Arc(const Pointf& c, double rx, double ry, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Õ\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ô\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc7Painter &(const Pointf &, double, double, double, bool):Upp::Painter::Arc(const Pointf&,double,double,double,bool)MPainter& Arc(const Pointf& c, double r, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Û\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ú\u0001\u0000\u0000\u0001\u0000\u0000\u0000Þ\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc?Painter &(double, double, double, double, double, double, bool)AUpp::Painter::Arc(double,double,double,double,double,double,bool)\\Painter& Arc(double x, double y, double rx, double ry, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000á\u0001\u0000\u0000\u0000\u0000\u0000\u0000à\u0001\u0000\u0000\u0001\u0000\u0000\u0000ä\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc7Painter &(double, double, double, double, double, bool):Upp::Painter::Arc(double,double,double,double,double,bool)PPainter& Arc(double x, double y, double r, double angle, double sweep, bool rel)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ç\u0001\u0000\u0000\u0000\u0000\u0000\u0000æ\u0001\u0000\u0000\u0001\u0000\u0000\u0000ê\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc9Painter &(const Pointf &, const Pointf &, double, double)<Upp::Painter::Arc(const Pointf&,const Pointf&,double,double)JPainter& Arc(const Pointf& c, const Pointf& r, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000í\u0001\u0000\u0000\u0000\u0000\u0000\u0000ì\u0001\u0000\u0000\u0001\u0000\u0000\u0000ð\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc9Painter &(const Pointf &, double, double, double, double)<Upp::Painter::Arc(const Pointf&,double,double,double,double)OPainter& Arc(const Pointf& c, double rx, double ry, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ó\u0001\u0000\u0000\u0000\u0000\u0000\u0000ò\u0001\u0000\u0000\u0001\u0000\u0000\u0000ö\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc1Painter &(const Pointf &, double, double, double)5Upp::Painter::Arc(const Pointf&,double,double,double)CPainter& Arc(const Pointf& c, double r, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ù\u0001\u0000\u0000\u0000\u0000\u0000\u0000ø\u0001\u0000\u0000\u0001\u0000\u0000\u0000ü\u0001\u0000\u0000\u0001\u0000\u0000\u0003Arc9Painter &(double, double, double, double, double, double)<Upp::Painter::Arc(double,double,double,double,double,double)RPainter& Arc(double x, double y, double rx, double ry, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ÿ\u0001\u0000\u0000\u0000\u0000\u0000\u0000þ\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0001\u0000\u0000\u0003Arc1Painter &(double, double, double, double, double)5Upp::Painter::Arc(double,double,double,double,double)FPainter& Arc(double x, double y, double r, double angle, double sweep)\u0003Upp\u0003ARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0006\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0002\u0000\u0000\u0001\u0000\u0000\u0000\t\u0002\u0000\u0000\u0001\u0000\u0000\u0006RelArc9Painter &(const Pointf &, const Pointf &, double, double)?Upp::Painter::RelArc(const Pointf&,const Pointf&,double,double)MPainter& RelArc(const Pointf& c, const Pointf& r, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\f\u0002\u0000\u0000\u0000\u0000\u0000\u0000\v\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0002\u0000\u0000\u0001\u0000\u0000\u0006RelArc9Painter &(const Pointf &, double, double, double, double)?Upp::Painter::RelArc(const Pointf&,double,double,double,double)RPainter& RelArc(const Pointf& c, double rx, double ry, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0012\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0002\u0000\u0000\u0001\u0000\u0000\u0006RelArc1Painter &(const Pointf &, double, double, double)8Upp::Painter::RelArc(const Pointf&,double,double,double)FPainter& RelArc(const Pointf& c, double r, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0018\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0002\u0000\u0000\u0001\u0000\u0000\u0006RelArc9Painter &(double, double, double, double, double, double)?Upp::Painter::RelArc(double,double,double,double,double,double)UPainter& RelArc(double x, double y, double rx, double ry, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001E\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0002\u0000\u0000\u0001\u0000\u0000\u0000!\u0002\u0000\u0000\u0001\u0000\u0000\u0006RelArc1Painter &(double, double, double, double, double)8Upp::Painter::RelArc(double,double,double,double,double)IPainter& RelArc(double x, double y, double r, double angle, double sweep)\u0003Upp\u0006RELARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000$\u0002\u0000\u0000\u0000\u0000\u0000\u0000#\u0002\u0000\u0000\u0001\u0000\u0000\u0000'\u0002\u0000\u0000\u0001\u0000\u0000\u0006SvgArcCPainter &(double, double, double, bool, bool, const Pointf &, bool)GUpp::Painter::SvgArc(double,double,double,bool,bool,const Pointf&,bool)gPainter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000*\u0002\u0000\u0000\u0000\u0000\u0000\u0000)\u0002\u0000\u0000\u0001\u0000\u0000\u0000-\u0002\u0000\u0000\u0001\u0000\u0000\u0006SvgArcCPainter &(double, double, double, bool, bool, double, double, bool)GUpp::Painter::SvgArc(double,double,double,bool,bool,double,double,bool)jPainter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, double x, double y, bool rel)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u00000\u0002\u0000\u0000\u0000\u0000\u0000\u0000/\u0002\u0000\u0000\u0001\u0000\u0000\u00003\u0002\u0000\u0000\u0001\u0000\u0000\u0006SvgArc=Painter &(const Pointf &, double, bool, bool, const Pointf &)BUpp::Painter::SvgArc(const Pointf&,double,bool,bool,const Pointf&)XPainter& SvgArc(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u00006\u0002\u0000\u0000\u0000\u0000\u0000\u00005\u0002\u0000\u0000\u0001\u0000\u0000\u00009\u0002\u0000\u0000\u0001\u0000\u0000\u0006SvgArc=Painter &(double, double, double, bool, bool, const Pointf &)BUpp::Painter::SvgArc(double,double,double,bool,bool,const Pointf&)]Painter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000<\u0002\u0000\u0000\u0000\u0000\u0000\u0000;\u0002\u0000\u0000\u0001\u0000\u0000\u0000?\u0002\u0000\u0000\u0001\u0000\u0000\u0006SvgArc=Painter &(double, double, double, bool, bool, double, double)BUpp::Painter::SvgArc(double,double,double,bool,bool,double,double)`Painter& SvgArc(double rx, double ry, double xangle, bool large, bool sweep, double x, double y)\u0003Upp\u0006SVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000B\u0002\u0000\u0000\u0000\u0000\u0000\u0000A\u0002\u0000\u0000\u0001\u0000\u0000\u0000E\u0002\u0000\u0000\u0001\u0000\u0000\tRelSvgArc=Painter &(const Pointf &, double, bool, bool, const Pointf &)EUpp::Painter::RelSvgArc(const Pointf&,double,bool,bool,const Pointf&)[Painter& RelSvgArc(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\tRELSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000H\u0002\u0000\u0000\u0000\u0000\u0000\u0000G\u0002\u0000\u0000\u0001\u0000\u0000\u0000K\u0002\u0000\u0000\u0001\u0000\u0000\tRelSvgArc=Painter &(double, double, double, bool, bool, const Pointf &)EUpp::Painter::RelSvgArc(double,double,double,bool,bool,const Pointf&)`Painter& RelSvgArc(double rx, double ry, double xangle, bool large, bool sweep, const Pointf& p)\u0003Upp\tRELSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000N\u0002\u0000\u0000\u0000\u0000\u0000\u0000M\u0002\u0000\u0000\u0001\u0000\u0000\u0000Q\u0002\u0000\u0000\u0001\u0000\u0000\tRelSvgArc=Painter &(double, double, double, bool, bool, double, double)EUpp::Painter::RelSvgArc(double,double,double,bool,bool,double,double)cPainter& RelSvgArc(double rx, double ry, double xangle, bool large, bool sweep, double x, double y)\u0003Upp\tRELSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000end\u0000.Q\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h","value":"datao\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000D(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)IUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)?Upp::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.)\u0004enum\u0003UppD(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\PAINTER\\PAINTING.H:1:1)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u000EPAINTING_CLEARIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0013Upp::PAINTING_CLEAR\u000EPAINTING_CLEAR\u0003Upp\u000EPAINTING_CLEAR\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\rPAINTING_MOVEIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0012Upp::PAINTING_MOVE\rPAINTING_MOVE\u0003Upp\rPAINTING_MOVE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0011PAINTING_MOVE_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0016Upp::PAINTING_MOVE_REL\u0011PAINTING_MOVE_REL\u0003Upp\u0011PAINTING_MOVE_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\rPAINTING_LINEIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0012Upp::PAINTING_LINE\rPAINTING_LINE\u0003Upp\rPAINTING_LINE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0011PAINTING_LINE_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0016Upp::PAINTING_LINE_REL\u0011PAINTING_LINE_REL\u0003Upp\u0011PAINTING_LINE_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0013\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0012PAINTING_QUADRATICIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0017Upp::PAINTING_QUADRATIC\u0012PAINTING_QUADRATIC\u0003Upp\u0012PAINTING_QUADRATIC\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0017\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0016PAINTING_QUADRATIC_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001BUpp::PAINTING_QUADRATIC_REL\u0016PAINTING_QUADRATIC_REL\u0003Upp\u0016PAINTING_QUADRATIC_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0014PAINTING_QUADRATIC_SIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0019Upp::PAINTING_QUADRATIC_S\u0014PAINTING_QUADRATIC_S\u0003Upp\u0014PAINTING_QUADRATIC_S\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0019\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0018PAINTING_QUADRATIC_S_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001DUpp::PAINTING_QUADRATIC_S_REL\u0018PAINTING_QUADRATIC_S_REL\u0003Upp\u0018PAINTING_QUADRATIC_S_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u000F\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u000EPAINTING_CUBICIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0013Upp::PAINTING_CUBIC\u000EPAINTING_CUBIC\u0003Upp\u000EPAINTING_CUBIC\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0013\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0012PAINTING_CUBIC_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0017Upp::PAINTING_CUBIC_REL\u0012PAINTING_CUBIC_REL\u0003Upp\u0012PAINTING_CUBIC_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0011\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0010PAINTING_CUBIC_SIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0015Upp::PAINTING_CUBIC_S\u0010PAINTING_CUBIC_S\u0003Upp\u0010PAINTING_CUBIC_S\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0014PAINTING_CUBIC_S_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0019Upp::PAINTING_CUBIC_S_REL\u0014PAINTING_CUBIC_S_REL\u0003Upp\u0014PAINTING_CUBIC_S_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000\r\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\fPAINTING_ARCIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0011Upp::PAINTING_ARC\fPAINTING_ARC\u0003Upp\fPAINTING_ARC\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0010PAINTING_ARC_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0015Upp::PAINTING_ARC_REL\u0010PAINTING_ARC_REL\u0003Upp\u0010PAINTING_ARC_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u000FPAINTING_SVGARCIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0014Upp::PAINTING_SVGARC\u000FPAINTING_SVGARC\u0003Upp\u000FPAINTING_SVGARC\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0013PAINTING_SVGARC_RELIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0018Upp::PAINTING_SVGARC_REL\u0013PAINTING_SVGARC_REL\u0003Upp\u0013PAINTING_SVGARC_REL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u000EPAINTING_CLOSEIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0013Upp::PAINTING_CLOSE\u000EPAINTING_CLOSE\u0003Upp\u000EPAINTING_CLOSE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\r\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\fPAINTING_DIVIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0011Upp::PAINTING_DIV\fPAINTING_DIV\u0003Upp\fPAINTING_DIV\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0013PAINTING_FILL_SOLIDIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0018Upp::PAINTING_FILL_SOLID\u0013PAINTING_FILL_SOLID\u0003Upp\u0013PAINTING_FILL_SOLID\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0013PAINTING_FILL_IMAGEIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0018Upp::PAINTING_FILL_IMAGE\u0013PAINTING_FILL_IMAGE\u0003Upp\u0013PAINTING_FILL_IMAGE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0016PAINTING_FILL_GRADIENTIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001BUpp::PAINTING_FILL_GRADIENT\u0016PAINTING_FILL_GRADIENT\u0003Upp\u0016PAINTING_FILL_GRADIENT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0014PAINTING_FILL_RADIALIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0019Upp::PAINTING_FILL_RADIAL\u0014PAINTING_FILL_RADIAL\u0003Upp\u0014PAINTING_FILL_RADIAL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0015PAINTING_STROKE_SOLIDIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001AUpp::PAINTING_STROKE_SOLID\u0015PAINTING_STROKE_SOLID\u0003Upp\u0015PAINTING_STROKE_SOLID\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0015PAINTING_STROKE_IMAGEIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001AUpp::PAINTING_STROKE_IMAGE\u0015PAINTING_STROKE_IMAGE\u0003Upp\u0015PAINTING_STROKE_IMAGE\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0018PAINTING_STROKE_GRADIENTIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001DUpp::PAINTING_STROKE_GRADIENT\u0018PAINTING_STROKE_GRADIENT\u0003Upp\u0018PAINTING_STROKE_GRADIENT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0016PAINTING_STROKE_RADIALIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001BUpp::PAINTING_STROKE_RADIAL\u0016PAINTING_STROKE_RADIAL\u0003Upp\u0016PAINTING_STROKE_RADIAL\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u000E\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\rPAINTING_CLIPIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0012Upp::PAINTING_CLIP\rPAINTING_CLIP\u0003Upp\rPAINTING_CLIP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\u0013\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0012PAINTING_CHARACTERIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0017Upp::PAINTING_CHARACTER\u0012PAINTING_CHARACTER\u0003Upp\u0012PAINTING_CHARACTER\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u000E\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\rPAINTING_TEXTIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0012Upp::PAINTING_TEXT\rPAINTING_TEXT\u0003Upp\rPAINTING_TEXT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0013\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0012PAINTING_COLORSTOPIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0017Upp::PAINTING_COLORSTOP\u0012PAINTING_COLORSTOP\u0003Upp\u0012PAINTING_COLORSTOP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u0014\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0013PAINTING_CLEARSTOPSIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0018Upp::PAINTING_CLEARSTOPS\u0013PAINTING_CLEARSTOPS\u0003Upp\u0013PAINTING_CLEARSTOPS\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0011\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0010PAINTING_OPACITYIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0015Upp::PAINTING_OPACITY\u0010PAINTING_OPACITY\u0003Upp\u0010PAINTING_OPACITY\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000\u0011\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0010PAINTING_LINECAPIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0015Upp::PAINTING_LINECAP\u0010PAINTING_LINECAP\u0003Upp\u0010PAINTING_LINECAP\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000\u0012\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0011PAINTING_LINEJOINIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0016Upp::PAINTING_LINEJOIN\u0011PAINTING_LINEJOIN\u0003Upp\u0011PAINTING_LINEJOIN\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0014\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0013PAINTING_MITERLIMITIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0018Upp::PAINTING_MITERLIMIT\u0013PAINTING_MITERLIMIT\u0003Upp\u0013PAINTING_MITERLIMIT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0011\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0010PAINTING_EVENODDIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0015Upp::PAINTING_EVENODD\u0010PAINTING_EVENODD\u0003Upp\u0010PAINTING_EVENODD\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u000E\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\rPAINTING_DASHIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0012Upp::PAINTING_DASH\rPAINTING_DASH\u0003Upp\rPAINTING_DASH\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0013\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0012PAINTING_TRANSFORMIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0017Upp::PAINTING_TRANSFORM\u0012PAINTING_TRANSFORM\u0003Upp\u0012PAINTING_TRANSFORM\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u000F\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u000EPAINTING_BEGINIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0013Upp::PAINTING_BEGIN\u000EPAINTING_BEGIN\u0003Upp\u000EPAINTING_BEGIN\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\r\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\fPAINTING_ENDIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0011Upp::PAINTING_END\fPAINTING_END\u0003Upp\fPAINTING_END\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0013\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0012PAINTING_BEGINMASKIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0017Upp::PAINTING_BEGINMASK\u0012PAINTING_BEGINMASK\u0003Upp\u0012PAINTING_BEGINMASK\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0015\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u0014PAINTING_BEGINONPATHIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0019Upp::PAINTING_BEGINONPATH\u0014PAINTING_BEGINONPATH\u0003Upp\u0014PAINTING_BEGINONPATH\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0010\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u000FPAINTING_INVERTIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u0014Upp::PAINTING_INVERT\u000FPAINTING_INVERT\u0003Upp\u000FPAINTING_INVERT\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0019\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0018PAINTING_FILL_GRADIENT_XIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001DUpp::PAINTING_FILL_GRADIENT_X\u0018PAINTING_FILL_GRADIENT_X\u0003Upp\u0018PAINTING_FILL_GRADIENT_X\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u001B\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u001APAINTING_STROKE_GRADIENT_XIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001FUpp::PAINTING_STROKE_GRADIENT_X\u001APAINTING_STROKE_GRADIENT_X\u0003Upp\u001APAINTING_STROKE_GRADIENT_X\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0017\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0016PAINTING_FILL_RADIAL_XIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001BUpp::PAINTING_FILL_RADIAL_X\u0016PAINTING_FILL_RADIAL_X\u0003Upp\u0016PAINTING_FILL_RADIAL_X\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0019\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0018PAINTING_STROKE_RADIAL_XIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001DUpp::PAINTING_STROKE_RADIAL_X\u0018PAINTING_STROKE_RADIAL_X\u0003Upp\u0018PAINTING_STROKE_RADIAL_X\u0003Upp\u0003UPP\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0016\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0015PAINTING_IMAGE_FILTERIUpp::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.h:1:1)\u001AUpp::PAINTING_IMAGE_FILTER\u0015PAINTING_IMAGE_FILTER\u0003Upp\u0015PAINTING_IMAGE_FILTER\u0003Upp\u0003UPP\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000FPaintingPainter\u0014Upp::PaintingPainter\u0014Upp::PaintingPainter PaintingPainter : public Painter\u0003Upp\u000FPAINTINGPAINTER\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\fUpp::Painter\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0011\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0003cmd\fStringStream\u0019Upp::PaintingPainter::cmd\u0010StringStream cmd\u0003Upp\u0003CMD\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0012\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0004data\nValueArray\u001AUpp::PaintingPainter::data\u000FValueArray data\u0003Upp\u0004DATA\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u0012\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0004size\u0005Sizef\u001AUpp::PaintingPainter::size\nSizef size\u0003Upp\u0004SIZE\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000/\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0003Put\nvoid (int)\u001EUpp::PaintingPainter::Put(int)\u000Fvoid Put(int c)\u0003Upp\u0003PUT\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u00001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0005Put32\nvoid (int) Upp::PaintingPainter::Put32(int)\u0011void Put32(int c)\u0003Upp\u0005PUT32\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000>\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0003Put\u0013void (const RGBA &)&Upp::PaintingPainter::Put(const RGBA&)\u0017void Put(const RGBA& c)\u0003Upp\u0003PUT\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000S\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0004Putf\u0015void (const double &))Upp::PaintingPainter::Putf(const double&)\u001Avoid Putf(const double& d)\u0003Upp\u0004PUTF\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000_\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0004Putf\u0015void (const Pointf &))Upp::PaintingPainter::Putf(const Pointf&)\u001Avoid Putf(const Pointf& p)\u0003Upp\u0004PUTF\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000;\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0004Putf\u0016void (const Xform2D &)*Upp::PaintingPainter::Putf(const Xform2D&)\u001Bvoid Putf(const Xform2D& m)\u0003Upp\u0004PUTF\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000>\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0003Put\u0013void (const Font &)&Upp::PaintingPainter::Put(const Font&)\u0017void Put(const Font& f)\u0003Upp\u0003PUT\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000*\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0001\u0000\aClearOp\u0013void (const RGBA &)*Upp::PaintingPainter::ClearOp(const RGBA&)\u001Fvoid ClearOp(const RGBA& color)\u0003Upp\aCLEAROP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u00001\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool)0Upp::PaintingPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u00001\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool)0Upp::PaintingPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000H\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)CUpp::PaintingPainter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u00006\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)5Upp::PaintingPainter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000V\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)MUpp::PaintingPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000D\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool)?Upp::PaintingPainter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000]\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)KUpp::PaintingPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000V\u0000\u0000\u00003\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)QUpp::PaintingPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0019\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0001\u0000\aCloseOp\avoid ()\u001FUpp::PaintingPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0017\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0001\u0000\u0005DivOp\avoid ()\u001DUpp::PaintingPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000)\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp\u0013void (const RGBA &))Upp::PaintingPainter::FillOp(const RGBA&)\u001Evoid FillOp(const RGBA& color)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000P\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp,void (const Image &, const Xform2D &, dword)?Upp::PaintingPainter::FillOp(const Image&,const Xform2D&,dword)Evoid FillOp(const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u0000!\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpFvoid (const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)UUpp::PaintingPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)bvoid FillOp(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000!\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp7void (const RGBA &, const RGBA &, const Xform2D &, int)HUpp::PaintingPainter::FillOp(const RGBA&,const RGBA&,const Xform2D&,int)Wvoid FillOp(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u0000b\u0000\u0000\u0000!\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpNvoid (const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)\\Upp::PaintingPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)jvoid FillOp(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000:\u0000\u0000\u0000f\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpGvoid (const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)VUpp::PaintingPainter::FillOp(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)hvoid FillOp(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u00008\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp\u001Bvoid (double, const RGBA &)2Upp::PaintingPainter::StrokeOp(double,const RGBA&)-void StrokeOp(double width, const RGBA& rgba)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0000i\u0000\u0000\u0000%\u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp4void (double, const Image &, const Xform2D &, dword)HUpp::PaintingPainter::StrokeOp(double,const Image&,const Xform2D&,dword)Uvoid StrokeOp(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000k\u0000\u0000\u0000#\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpNvoid (double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)^Upp::PaintingPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)rvoid StrokeOp(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0000\u0000\u0000<\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp?void (double, const RGBA &, const RGBA &, const Xform2D &, int)QUpp::PaintingPainter::StrokeOp(double,const RGBA&,const RGBA&,const Xform2D&,int)gvoid StrokeOp(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0000p\u0000\u0000\u0000#\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpVvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)eUpp::PaintingPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)zvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u0000\u0000\u0000<\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)_Upp::PaintingPainter::StrokeOp(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)xvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000\u0018\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\avoid ()\u001EUpp::PaintingPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000>\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)9Upp::PaintingPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u0000/\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)OUpp::PaintingPainter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000}\u0000\u0000\u0000:\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0001\u0000\vColorStopOp\u001Bvoid (double, const RGBA &)5Upp::PaintingPainter::ColorStopOp(double,const RGBA&)/void ColorStopOp(double pos, const RGBA& color)\u0003Upp\vCOLORSTOPOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000\u001E\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0001\u0000\fClearStopsOp\avoid ()$Upp::PaintingPainter::ClearStopsOp()\u0013void ClearStopsOp()\u0003Upp\fCLEARSTOPSOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\tOpacityOp\rvoid (double)'Upp::PaintingPainter::OpacityOp(double)\u0018void OpacityOp(double o)\u0003Upp\tOPACITYOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\tLineCapOp\nvoid (int)$Upp::PaintingPainter::LineCapOp(int)\u001Bvoid LineCapOp(int linecap)\u0003Upp\tLINECAPOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\nLineJoinOp\nvoid (int)%Upp::PaintingPainter::LineJoinOp(int)\u001Dvoid LineJoinOp(int linejoin)\u0003Upp\nLINEJOINOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\fMiterLimitOp\rvoid (double)*Upp::PaintingPainter::MiterLimitOp(double)\u001Bvoid MiterLimitOp(double l)\u0003Upp\fMITERLIMITOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\tEvenOddOp\vvoid (bool)%Upp::PaintingPainter::EvenOddOp(bool)\u001Cvoid EvenOddOp(bool evenodd)\u0003Upp\tEVENODDOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006DashOp%void (const Vector<double> &, double)2Upp::PaintingPainter::DashOp(const Vector&,double)5void DashOp(const Vector<double>& dash, double start)\u0003Upp\u0006DASHOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\bInvertOp\vvoid (bool)$Upp::PaintingPainter::InvertOp(bool)\u001Avoid InvertOp(bool invert)\u0003Upp\bINVERTOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\rImageFilterOp\nvoid (int)(Upp::PaintingPainter::ImageFilterOp(int)\u001Evoid ImageFilterOp(int filter)\u0003Upp\rIMAGEFILTEROP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\vTransformOp\u0016void (const Xform2D &)1Upp::PaintingPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u001FUpp::PaintingPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u001DUpp::PaintingPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\vBeginMaskOp\avoid ()#Upp::PaintingPainter::BeginMaskOp()\u0012void BeginMaskOp()\u0003Upp\vBEGINMASKOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\rBeginOnPathOp\u0013void (double, bool)0Upp::PaintingPainter::BeginOnPathOp(double,bool)&void BeginOnPathOp(double q, bool abs)\u0003Upp\rBEGINONPATHOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tGetResult\vPainting ()!Upp::PaintingPainter::GetResult()\u0014Painting GetResult()\u0003Upp\tGETRESULT\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0011operator Painting\vPainting ())Upp::PaintingPainter::operator Painting()\u0013operator Painting()\u0003Upp\u0011OPERATOR PAINTING\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006Create\u0015void (double, double)+Upp::PaintingPainter::Create(double,double)!void Create(double cx, double cy)\u0003Upp\u0006CREATE\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006Create\fvoid (Sizef)#Upp::PaintingPainter::Create(Sizef)\u0015void Create(Sizef sz)\u0003Upp\u0006CREATE\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aGetSize\u000ESizef () const$Upp::PaintingPainter::GetSize()const\u0015Sizef GetSize() const\u0003Upp\aGETSIZE\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000FPaintingPainter\avoid ()'Upp::PaintingPainter::PaintingPainter()\u0011PaintingPainter()\u0003Upp\u000FPAINTINGPAINTER\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000FPaintingPainter\u0015void (double, double)4Upp::PaintingPainter::PaintingPainter(double,double)%PaintingPainter(double cx, double cy)\u0003Upp\u000FPAINTINGPAINTER\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000FPaintingPainter\fvoid (Sizef),Upp::PaintingPainter::PaintingPainter(Sizef)\u0019PaintingPainter(Sizef sz)\u0003Upp\u000FPAINTINGPAINTER\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000end\u0000{[\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.h","value":"datap\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0012LinearPathConsumer\u0017Upp::LinearPathConsumer\u0017Upp::LinearPathConsumer\u0012LinearPathConsumer\u0003Upp\u0012LINEARPATHCONSUMER\u0017Upp::LinearPathConsumer\u0017UPP::LINEARPATHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0004Move\u0015void (const Pointf &),Upp::LinearPathConsumer::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\u0017Upp::LinearPathConsumer\u0017UPP::LINEARPATHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000'\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0004Line\u0015void (const Pointf &),Upp::LinearPathConsumer::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\u0017Upp::LinearPathConsumer\u0017UPP::LINEARPATHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0001\u0000\u0003End\avoid ()\u001EUpp::LinearPathConsumer::End()\nvoid End()\u0003Upp\u0003END\u0017Upp::LinearPathConsumer\u0017UPP::LINEARPATHCONSUMER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000+\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0014ApproximateQuadraticSvoid (LinearPathConsumer &, const Pointf &, const Pointf &, const Pointf &, double)_Upp::ApproximateQuadratic(LinearPathConsumer&,const Pointf&,const Pointf&,const Pointf&,double)xvoid ApproximateQuadratic(LinearPathConsumer& t, const Pointf& p1, const Pointf& p2, const Pointf& p3, double tolerance)\u0003Upp\u0014APPROXIMATEQUADRATIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000'\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0010ApproximateCubiccvoid (LinearPathConsumer &, const Pointf &, const Pointf &, const Pointf &, const Pointf &, double)iUpp::ApproximateCubic(LinearPathConsumer&,const Pointf&,const Pointf&,const Pointf&,const Pointf&,double)ÿ\u0000\u0000\u0000void ApproximateCubic(LinearPathConsumer& t, const Pointf& x0, const Pointf& x1, const Pointf& x2, const Pointf& x, double tolerance)\u0003Upp\u0010APPROXIMATECUBIC\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0010LinearPathFilter\u0015Upp::LinearPathFilter\u0015Upp::LinearPathFilter%LinearPathFilter : LinearPathConsumer\u0003Upp\u0010LINEARPATHFILTER\u0015Upp::LinearPathFilter\u0015UPP::LINEARPATHFILTER\u0017Upp::LinearPathConsumer\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0001\u0000\u0003End\avoid ()\u001CUpp::LinearPathFilter::End()\nvoid End()\u0003Upp\u0003END\u0015Upp::LinearPathFilter\u0015UPP::LINEARPATHFILTER\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0006target\u0014LinearPathConsumer *\u001DUpp::LinearPathFilter::target\u001ALinearPathConsumer *target\u0003Upp\u0006TARGET\u0015Upp::LinearPathFilter\u0015UPP::LINEARPATHFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000A\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\aPutMove\u0015void (const Pointf &)-Upp::LinearPathFilter::PutMove(const Pointf&)\u001Dvoid PutMove(const Pointf& p)\u0003Upp\aPUTMOVE\u0015Upp::LinearPathFilter\u0015UPP::LINEARPATHFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000A\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\aPutLine\u0015void (const Pointf &)-Upp::LinearPathFilter::PutLine(const Pointf&)\u001Dvoid PutLine(const Pointf& p)\u0003Upp\aPUTLINE\u0015Upp::LinearPathFilter\u0015UPP::LINEARPATHFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000?\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0006PutEnd\avoid ()\u001FUpp::LinearPathFilter::PutEnd()\rvoid PutEnd()\u0003Upp\u0006PUTEND\u0015Upp::LinearPathFilter\u0015UPP::LINEARPATHFILTER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\aStroker\fUpp::Stroker\fUpp::Stroker!Stroker : public LinearPathFilter\u0003Upp\aSTROKER\fUpp::Stroker\fUPP::STROKER\u0015Upp::LinearPathFilter\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000#\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0001\u0000\u0004Move\u0015void (const Pointf &)!Upp::Stroker::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000#\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0001\u0000\u0004Line\u0015void (const Pointf &)!Upp::Stroker::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0001\u0000\u0003End\avoid ()\u0013Upp::Stroker::End()\nvoid End()\u0003Upp\u0003END\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\n\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0002w2\u0006double\u0010Upp::Stroker::w2\tdouble w2\u0003Upp\u0002W2\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0006qmiter\u0006double\u0014Upp::Stroker::qmiter\rdouble qmiter\u0003Upp\u0006QMITER\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\v\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0003fid\u0006double\u0011Upp::Stroker::fid\ndouble fid\u0003Upp\u0003FID\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\n\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0002tw\u0006double\u0010Upp::Stroker::tw\tdouble tw\u0003Upp\u0002TW\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\n\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0002p0\u0006Pointf\u0010Upp::Stroker::p0\tPointf p0\u0003Upp\u0002P0\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u000E\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0002v0\u0006Pointf\u0010Upp::Stroker::v0\tPointf v0\u0003Upp\u0002V0\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0012\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0002o0\u0006Pointf\u0010Upp::Stroker::o0\tPointf o0\u0003Upp\u0002O0\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0016\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0002a0\u0006Pointf\u0010Upp::Stroker::a0\tPointf a0\u0003Upp\u0002A0\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u001A\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0002b0\u0006Pointf\u0010Upp::Stroker::b0\tPointf b0\u0003Upp\u0002B0\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\n\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0002p1\u0006Pointf\u0010Upp::Stroker::p1\tPointf p1\u0003Upp\u0002P1\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u000E\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0002v1\u0006Pointf\u0010Upp::Stroker::v1\tPointf v1\u0003Upp\u0002V1\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0012\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0002o1\u0006Pointf\u0010Upp::Stroker::o1\tPointf o1\u0003Upp\u0002O1\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0016\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0002a1\u0006Pointf\u0010Upp::Stroker::a1\tPointf a1\u0003Upp\u0002A1\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u001A\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0002b1\u0006Pointf\u0010Upp::Stroker::b1\tPointf b1\u0003Upp\u0002B1\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\n\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0002p2\u0006Pointf\u0010Upp::Stroker::p2\tPointf p2\u0003Upp\u0002P2\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u000F\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\alinecap\u0003int\u0015Upp::Stroker::linecap\vint linecap\u0003Upp\aLINECAP\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0010\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\blinejoin\u0003int\u0016Upp::Stroker::linejoin\fint linejoin\u0003Upp\bLINEJOIN\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000\u000F\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\apreclip\u0005Rectf\u0015Upp::Stroker::preclip\rRectf preclip\u0003Upp\aPRECLIP\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000\r\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0005lines\u0003int\u0013Upp::Stroker::lines\tint lines\u0003Upp\u0005LINES\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0010\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0006Finish\avoid ()\u0016Upp::Stroker::Finish()\rvoid Finish()\u0003Upp\u0006FINISH\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000L\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0005Round=void (const Pointf &, const Pointf &, const Pointf &, double)EUpp::Stroker::Round(const Pointf&,const Pointf&,const Pointf&,double)Ivoid Round(const Pointf& p, const Pointf& v1, const Pointf& v2, double r)\u0003Upp\u0005ROUND\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000/\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0003CapUvoid (const Pointf &, const Pointf &, const Pointf &, const Pointf &, const Pointf &)XUpp::Stroker::Cap(const Pointf&,const Pointf&,const Pointf&,const Pointf&,const Pointf&)bvoid Cap(const Pointf& p0, const Pointf& v0, const Pointf& o0, const Pointf& a0, const Pointf& b0)\u0003Upp\u0003CAP\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000(\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\nPreClipped\u0015bool (Pointf, Pointf)'Upp::Stroker::PreClipped(Pointf,Pointf)%bool PreClipped(Pointf p2, Pointf p3)\u0003Upp\nPRECLIPPED\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000n\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init6void (double, double, double, int, int, const Rectf &)=Upp::Stroker::Init(double,double,double,int,int,const Rectf&)mvoid Init(double width, double miterlimit, double tolerance, int linecap, int linejoin, const Rectf& preclip)\u0003Upp\u0004INIT\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0006Dasher\vUpp::Dasher\vUpp::Dasher Dasher : public LinearPathFilter\u0003Upp\u0006DASHER\vUpp::Dasher\vUPP::DASHER\u0015Upp::LinearPathFilter\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000#\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0001\u0000\u0004Move\u0015void (const Pointf &) Upp::Dasher::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000#\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0001\u0000\u0004Line\u0015void (const Pointf &) Upp::Dasher::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u001E\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\apattern\u0016const Vector<double> *\u0014Upp::Dasher::pattern\u001Dconst Vector<double> *pattern\u0003Upp\aPATTERN\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0018\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\bpatterni\u0003int\u0015Upp::Dasher::patterni\fint patterni\u0003Upp\bPATTERNI\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0013\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0003sum\u0006double\u0010Upp::Dasher::sum\ndouble sum\u0003Upp\u0003SUM\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0018\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0003rem\u0006double\u0010Upp::Dasher::rem\ndouble rem\u0003Upp\u0003REM\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0014\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0004flag\u0004bool\u0011Upp::Dasher::flag\tbool flag\u0003Upp\u0004FLAG\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000\u0012\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0002p0\u0006Pointf\u000FUpp::Dasher::p0\tPointf p0\u0003Upp\u0002P0\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u001D\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0003Put\u0015void (const Pointf &)\u001FUpp::Dasher::Put(const Pointf&)\u0019void Put(const Pointf& p)\u0003Upp\u0003PUT\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000:\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init%void (const Vector<double> &, double)'Upp::Dasher::Init(const Vector&,double)9void Init(const Vector<double>& pattern, double distance)\u0003Upp\u0004INIT\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\vTransformer\u0010Upp::Transformer\u0010Upp::Transformer%Transformer : public LinearPathFilter\u0003Upp\vTRANSFORMER\u0010Upp::Transformer\u0010UPP::TRANSFORMER\u0015Upp::LinearPathFilter\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000#\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0001\u0000\u0004Move\u0015void (const Pointf &)%Upp::Transformer::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\u0010Upp::Transformer\u0010UPP::TRANSFORMER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000#\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0001\u0000\u0004Line\u0015void (const Pointf &)%Upp::Transformer::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\u0010Upp::Transformer\u0010UPP::TRANSFORMER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0015\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0005xform\u000Fconst Xform2D &\u0017Upp::Transformer::xform\u0014const Xform2D& xform\u0003Upp\u0005XFORM\u0010Upp::Transformer\u0010UPP::TRANSFORMER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u00004\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\vTransformer\u0016void (const Xform2D &)-Upp::Transformer::Transformer(const Xform2D&)!Transformer(const Xform2D& xform)\u0003Upp\vTRANSFORMER\u0010Upp::Transformer\u0010UPP::TRANSFORMER\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\nRasterizer\u000FUpp::Rasterizer\u000FUpp::Rasterizer&Rasterizer : public LinearPathConsumer\u0003Upp\nRASTERIZER\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0017Upp::LinearPathConsumer\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000#\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0001\u0000\u0004Move\u0015void (const Pointf &)$Upp::Rasterizer::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000V\u0000\u0000\u0000#\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0001\u0000\u0004Line\u0015void (const Pointf &)$Upp::Rasterizer::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0005\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0004Cell\u0015Upp::Rasterizer::Cell\u0015Upp::Rasterizer::Cell\u0015Cell : Moveable<Cell>\u0003Upp\u0004CELL\u0015Upp::Rasterizer::Cell\u0015UPP::RASTERIZER::CELL\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000Z\u0000\u0000\u0000\u0002\u0000\u0000\u0000Z\u0000\u0000\u0000\t\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0001x\u0005int16\u0018Upp::Rasterizer::Cell::x\aint16 x\u0003Upp\u0001X\u0015Upp::Rasterizer::Cell\u0015UPP::RASTERIZER::CELL\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000[\u0000\u0000\u0000\u0002\u0000\u0000\u0000[\u0000\u0000\u0000\r\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0005cover\u0005int16\u001CUpp::Rasterizer::Cell::cover\vint16 cover\u0003Upp\u0005COVER\u0015Upp::Rasterizer::Cell\u0015UPP::RASTERIZER::CELL\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\\\u0000\u0000\u0000\u0002\u0000\u0000\u0000\\\u0000\u0000\u0000\f\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0004area\u0003int\u001BUpp::Rasterizer::Cell::area\bint area\u0003Upp\u0004AREA\u0015Upp::Rasterizer::Cell\u0015UPP::RASTERIZER::CELL\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000^\u0000\u0000\u0000\u0002\u0000\u0000\u0000^\u0000\u0000\u00009\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\toperator<\u0019bool (const Cell &) const2Upp::Rasterizer::Cell::operator<(const Cell&)const#bool operator<(const Cell& b) const\u0003Upp\tOPERATOR<\u0015Upp::Rasterizer::Cell\u0015UPP::RASTERIZER::CELL\u0000\u0000\u0005\u0000\u0000\u0000\u0004\u0000\u0000\u0000a\u0000\u0000\u0000\u0004\u0000\u0000\u0000a\u0000\u0000\u0000\u001B\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000G(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.h:98:5)XUpp::Rasterizer::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.h:98:5)MUpp::Rasterizer::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.)\u0004enum\u0003UppG(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\PAINTER\\LINEARPATH.H:98:5)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\v\u0000\u0000\u0000a\u0000\u0000\u0000\v\u0000\u0000\u0000a\u0000\u0000\u0000\u0019\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\tSVO_ALLOCXUpp::Rasterizer::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.h:98:5)\u001AUpp::Rasterizer::SVO_ALLOC\tSVO_ALLOC\u0003Upp\tSVO_ALLOC\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0002\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\tCellArray\u001AUpp::Rasterizer::CellArray\u001AUpp::Rasterizer::CellArray\tCellArray\u0003Upp\tCELLARRAY\u001AUpp::Rasterizer::CellArray\u001AUPP::RASTERIZER::CELLARRAY\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000d\u0000\u0000\u0000\u0002\u0000\u0000\u0000d\u0000\u0000\u0000\u000E\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0005count\u0003int!Upp::Rasterizer::CellArray::count\tint count\u0003Upp\u0005COUNT\u001AUpp::Rasterizer::CellArray\u001AUPP::RASTERIZER::CELLARRAY\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000e\u0000\u0000\u0000\u0002\u0000\u0000\u0000e\u0000\u0000\u0000\u000E\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0005alloc\u0003int!Upp::Rasterizer::CellArray::alloc\tint alloc\u0003Upp\u0005ALLOC\u001AUpp::Rasterizer::CellArray\u001AUPP::RASTERIZER::CELLARRAY\u0000\u0000\u0003\u0000\u0000\u0000\u0002\u0000\u0000\u0000f\u0000\u0000\u0000\u0002\u0000\u0000\u0000f\u0000\u0000\u0000\u0003\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000K(anonymous union at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.h:103:3)gUpp::Rasterizer::CellArray::(anonymous union at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.h:103:3)ZUpp::Rasterizer::CellArray::(anonymous at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.)\u0000\u0003UppK(ANONYMOUS UNION AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\PAINTER\\LINEARPATH.H:103:3)K(anonymous union at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\LinearPath.h:103:3)K(ANONYMOUS UNION AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\PAINTER\\LINEARPATH.H:103:3)\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000g\u0000\u0000\u0000\u0003\u0000\u0000\u0000g\u0000\u0000\u0000\f\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0003ptr\u0006Cell *\u001FUpp::Rasterizer::CellArray::ptr\tCell *ptr\u0003Upp\u0003PTR\u001AUpp::Rasterizer::CellArray\u001AUPP::RASTERIZER::CELLARRAY\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000h\u0000\u0000\u0000\u0003\u0000\u0000\u0000h\u0000\u0000\u0000\u0017\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0003svo\bCell[15]\u001FUpp::Rasterizer::CellArray::svo\fCell svo[15]\u0003Upp\u0003SVO\u001AUpp::Rasterizer::CellArray\u001AUPP::RASTERIZER::CELLARRAY\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000k\u0000\u0000\u0000\u0002\u0000\u0000\u0000k\u0000\u0000\u0000@\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\bCell *()!Upp::Rasterizer::CellArray::Get()\vCell *Get()\u0003Upp\u0003GET\u001AUpp::Rasterizer::CellArray\u001AUPP::RASTERIZER::CELLARRAY\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000m\u0000\u0000\u0000\u0002\u0000\u0000\u0000m\u0000\u0000\u00007\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\tCellArray\avoid ()'Upp::Rasterizer::CellArray::CellArray()\vCellArray()\u0003Upp\tCELLARRAY\u001AUpp::Rasterizer::CellArray\u001AUPP::RASTERIZER::CELLARRAY\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0000p\u0000\u0000\u0000!\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\bcliprect\u0005Rectf\u0019Upp::Rasterizer::cliprect\u000ERectf cliprect\u0003Upp\bCLIPRECT\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000\u001B\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0002p0\u0006Pointf\u0013Upp::Rasterizer::p0\tPointf p0\u0003Upp\u0002P0\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000\u001D\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0004cell\u0011Buffer<CellArray>\u0015Upp::Rasterizer::cell\u0016Buffer<CellArray> cell\u0003Upp\u0004CELL\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000\u001E\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0005min_y\u0003int\u0016Upp::Rasterizer::min_y\tint min_y\u0003Upp\u0005MIN_Y\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u001E\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0005max_y\u0003int\u0016Upp::Rasterizer::max_y\tint max_y\u0003Upp\u0005MAX_Y\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u001B\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0002sz\u0004Size\u0013Upp::Rasterizer::sz\aSize sz\u0003Upp\u0002SZ\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000\u001B\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0002mx\u0003int\u0013Upp::Rasterizer::mx\u0006int mx\u0003Upp\u0002MX\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000\r\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init\avoid ()\u0017Upp::Rasterizer::Init()\vvoid Init()\u0003Upp\u0004INIT\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u0000\u001D\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000\bAddCells\u0010Cell *(int, int)\"Upp::Rasterizer::AddCells(int,int)\u001CCell *AddCells(int y, int n)\u0003Upp\bADDCELLS\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000%\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\tAddCells2\u0017void (CellArray &, int)*Upp::Rasterizer::AddCells2(CellArray&,int)#void AddCells2(CellArray& a, int n)\u0003Upp\tADDCELLS2\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u0000:\u0000\u0000\u0000|\u0000\u0000\u0000\u0000\u0000\u0000\vRenderHLine\u001Evoid (int, int, int, int, int)1Upp::Rasterizer::RenderHLine(int,int,int,int,int)8void RenderHLine(int ey, int x1, int y1, int x2, int y2)\u0003Upp\vRENDERHLINE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000}\u0000\u0000\u0000;\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\bLineClip%void (double, double, double, double)6Upp::Rasterizer::LineClip(double,double,double,double)9void LineClip(double x1, double y1, double x2, double y2)\u0003Upp\bLINECLIP\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000\u0014\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0003CvX\fint (double)\u001CUpp::Rasterizer::CvX(double)\u0011int CvX(double x)\u0003Upp\u0003CVX\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0000\u0000\u0000\u0003CvY\fint (double)\u001CUpp::Rasterizer::CvY(double)\u0011int CvY(double y)\u0003Upp\u0003CVY\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006CvLine%void (double, double, double, double)4Upp::Rasterizer::CvLine(double,double,double,double)7void CvLine(double x1, double y1, double x2, double y2)\u0003Upp\u0006CVLINE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\vBeginRender(bool (int, const Cell *&, const Cell *&);Upp::Rasterizer::BeginRender(int,const Cell*&,const Cell*&)7bool BeginRender(int y, const Cell *&c, const Cell *&e)\u0003Upp\vBEGINRENDER\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004Free\avoid ()\u0017Upp::Rasterizer::Free()\vvoid Free()\u0003Upp\u0004FREE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0003Q8Y\fint (double)\u001CUpp::Rasterizer::Q8Y(double)\u0018static int Q8Y(double y)\u0003Upp\u0003Q8Y\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003Q8X\fint (double)\u001CUpp::Rasterizer::Q8X(double)\u0011int Q8X(double x)\u0003Upp\u0003Q8X\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Filler\u0017Upp::Rasterizer::Filler\u0017Upp::Rasterizer::Filler\u0006Filler\u0003Upp\u0006FILLER\u0017Upp::Rasterizer::Filler\u0017UPP::RASTERIZER::FILLER\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\u000Fvoid (int, int)'Upp::Rasterizer::Filler::Start(int,int)\u001Avoid Start(int x, int len)\u0003Upp\u0005START\u0017Upp::Rasterizer::Filler\u0017UPP::RASTERIZER::FILLER\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\nvoid (int)$Upp::Rasterizer::Filler::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0017Upp::Rasterizer::Filler\u0017UPP::RASTERIZER::FILLER\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u000Fvoid (int, int)(Upp::Rasterizer::Filler::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0017Upp::Rasterizer::Filler\u0017UPP::RASTERIZER::FILLER\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0003End\avoid ()\u001EUpp::Rasterizer::Filler::End()\nvoid End()\u0003Upp\u0003END\u0017Upp::Rasterizer::Filler\u0017UPP::RASTERIZER::FILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\aLineRaw\u0019void (int, int, int, int))Upp::Rasterizer::LineRaw(int,int,int,int),void LineRaw(int x1, int y1, int x2, int y2)\u0003Upp\aLINERAW\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\aSetClip\u0014void (const Rectf &)&Upp::Rasterizer::SetClip(const Rectf&)\u001Fvoid SetClip(const Rectf& rect)\u0003Upp\aSETCLIP\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aGetClip\u000ERectf () const\u001FUpp::Rasterizer::GetClip()const\u0015Rectf GetClip() const\u0003Upp\aGETCLIP\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004MinY\fint () const\u001CUpp::Rasterizer::MinY()const\u0010int MinY() const\u0003Upp\u0004MINY\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004MaxY\fint () const\u001CUpp::Rasterizer::MaxY()const\u0010int MaxY() const\u0003Upp\u0004MAXY\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bNotEmpty\nbool (int)\u001EUpp::Rasterizer::NotEmpty(int)\u0014bool NotEmpty(int y)\u0003Upp\bNOTEMPTY\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006Render\u001Avoid (int, Filler &, bool))Upp::Rasterizer::Render(int,Filler&,bool)+void Render(int y, Filler& g, bool evenodd)\u0003Upp\u0006RENDER\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005Reset\avoid ()\u0018Upp::Rasterizer::Reset()\fvoid Reset()\u0003Upp\u0005RESET\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006Create\u0015void (int, int, bool)%Upp::Rasterizer::Create(int,int,bool)*void Create(int cx, int cy, bool subpixel)\u0003Upp\u0006CREATE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nRasterizer\u0015void (int, int, bool))Upp::Rasterizer::Rasterizer(int,int,bool))Rasterizer(int cx, int cy, bool subpixel)\u0003Upp\nRASTERIZER\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nRasterizer\avoid ()\u001DUpp::Rasterizer::Rasterizer()\fRasterizer()\u0003Upp\nRASTERIZER\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\v~Rasterizer\u0010void () noexcept\u0014Upp::Rasterizer::~()\r~Rasterizer()\u0003Upp\v~RASTERIZER\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000¢\u0000\u0000\u0000\u0000\u0000\u0000\u0000¢\u0000\u0000\u0000Z\u0000\u0000\u0000¢\u0000\u0000\u0000\u0000\u0000\u0000\u000FApproximateChar6void (LinearPathConsumer &, Pointf, int, Font, double)@Upp::ApproximateChar(LinearPathConsumer&,Pointf,int,Font,double)Zvoid ApproximateChar(LinearPathConsumer& t, Pointf at, int ch, Font fnt, double tolerance)\u0003Upp\u000FAPPROXIMATECHAR\u0003Upp\u0003UPP\u0000\u0000end\u0000G\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h","value":"dataâ\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0004Mul8\u0018RGBA (const RGBA &, int)\u001AUpp::Mul8(const RGBA&,int)!RGBA Mul8(const RGBA& s, int mul)\u0003Upp\u0004MUL8\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\nSpanSource\u000FUpp::SpanSource\u000FUpp::SpanSource\nSpanSource\u0003Upp\nSPANSOURCE\u000FUpp::SpanSource\u000FUPP::SPANSOURCE\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000C\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0001\u0000\u0003Get+void (RGBA *, int, int, unsigned int) const5Upp::SpanSource::Get(RGBA*,int,int,unsigned int)const:void Get(RGBA *span, int x, int y, unsigned int len) const\u0003Upp\u0003GET\u000FUpp::SpanSource\u000FUPP::SPANSOURCE\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\v~SpanSource\u0010void () noexcept\u0014Upp::SpanSource::~()\r~SpanSource()\u0003Upp\v~SPANSOURCE\u000FUpp::SpanSource\u000FUPP::SPANSOURCE\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\fClippingLine\u0011Upp::ClippingLine\u0011Upp::ClippingLine\u0015ClippingLine : NoCopy\u0003Upp\fCLIPPINGLINE\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\vUpp::NoCopy\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\v\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0004data\u0006byte *\u0017Upp::ClippingLine::data\nbyte *data\u0003Upp\u0004DATA\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000V\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u001AUpp::ClippingLine::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000a\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set\u0018void (const byte *, int)'Upp::ClippingLine::Set(const byte*,int) void Set(const byte *s, int len)\u0003Upp\u0003SET\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000J\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\aSetFull\avoid ()\u001CUpp::ClippingLine::SetFull()\u000Evoid SetFull()\u0003Upp\aSETFULL\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u00007\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\aIsEmpty\rbool () const!Upp::ClippingLine::IsEmpty()const\u0014bool IsEmpty() const\u0003Upp\aISEMPTY\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000C\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0006IsFull\rbool () const Upp::ClippingLine::IsFull()const\u0013bool IsFull() const\u0003Upp\u0006ISFULL\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u00006\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u001Eoperator const unsigned char *\u0014const byte *() const.Upp::ClippingLine::operator const byte*()const\u001Doperator const byte *() const\u0003Upp\u001EOPERATOR CONST UNSIGNED CHAR *\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u00006\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\fClippingLine\avoid ()!Upp::ClippingLine::ClippingLine()\u000EClippingLine()\u0003Upp\fCLIPPINGLINE\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u00002\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\r~ClippingLine\u0010void () noexcept\u0016Upp::ClippingLine::~()\u000F~ClippingLine()\u0003Upp\r~CLIPPINGLINE\u0011Upp::ClippingLine\u0011UPP::CLIPPINGLINE\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\rPainterTarget\u0012Upp::PainterTarget\u0012Upp::PainterTarget\"PainterTarget : LinearPathConsumer\u0003Upp\rPAINTERTARGET\u0012Upp::PainterTarget\u0012UPP::PAINTERTARGET\u0017Upp::LinearPathConsumer\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000C\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0001\u0000\u0004Fill)void (double, SpanSource *, const RGBA &)8Upp::PainterTarget::Fill(double,SpanSource*,const RGBA&):void Fill(double width, SpanSource *ss, const RGBA& color)\u0003Upp\u0004FILL\u0012Upp::PainterTarget\u0012UPP::PAINTERTARGET\u0000\u0000\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\rBufferPainter\u0012Upp::BufferPainter\u0012Upp::BufferPainter\u001EBufferPainter : public Painter\u0003Upp\rBUFFERPAINTER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\fUpp::Painter\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000*\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0001\u0000\aClearOp\u0013void (const RGBA &)(Upp::BufferPainter::ClearOp(const RGBA&)\u001Fvoid ClearOp(const RGBA& color)\u0003Upp\aCLEAROP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u00001\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool).Upp::BufferPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u00001\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool).Upp::BufferPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000H\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)AUpp::BufferPainter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u00006\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)3Upp::BufferPainter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000V\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)KUpp::BufferPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000D\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool)=Upp::BufferPainter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000]\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)IUpp::BufferPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u00003\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)OUpp::BufferPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0019\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0001\u0000\aCloseOp\avoid ()\u001DUpp::BufferPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0017\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0001\u0000\u0005DivOp\avoid ()\u001BUpp::BufferPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000>\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)7Upp::BufferPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000)\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp\u0013void (const RGBA &)'Upp::BufferPainter::FillOp(const RGBA&)\u001Evoid FillOp(const RGBA& color)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000P\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp,void (const Image &, const Xform2D &, dword)=Upp::BufferPainter::FillOp(const Image&,const Xform2D&,dword)Evoid FillOp(const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000!\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpFvoid (const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)SUpp::BufferPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)bvoid FillOp(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000!\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOp7void (const RGBA &, const RGBA &, const Xform2D &, int)FUpp::BufferPainter::FillOp(const RGBA&,const RGBA&,const Xform2D&,int)Wvoid FillOp(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000!\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpNvoid (const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)ZUpp::BufferPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)jvoid FillOp(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000:\u0000\u0000\u0000A\u0000\u0000\u0000\u0000\u0001\u0000\u0006FillOpGvoid (const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)TUpp::BufferPainter::FillOp(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)hvoid FillOp(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u00008\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp\u001Bvoid (double, const RGBA &)0Upp::BufferPainter::StrokeOp(double,const RGBA&)-void StrokeOp(double width, const RGBA& rgba)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0000\u0000\u0000%\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp4void (double, const Image &, const Xform2D &, dword)FUpp::BufferPainter::StrokeOp(double,const Image&,const Xform2D&,dword)Uvoid StrokeOp(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000#\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpNvoid (double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)\\Upp::BufferPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)rvoid StrokeOp(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000#\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOp?void (double, const RGBA &, const RGBA &, const Xform2D &, int)OUpp::BufferPainter::StrokeOp(double,const RGBA&,const RGBA&,const Xform2D&,int)gvoid StrokeOp(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000#\u0000\u0000\u0000N\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpVvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)cUpp::BufferPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)zvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000<\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0001\u0000\bStrokeOpOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)]Upp::BufferPainter::StrokeOp(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)xvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000\u0018\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\avoid ()\u001CUpp::BufferPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000:\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0001\u0000\vColorStopOp\u001Bvoid (double, const RGBA &)3Upp::BufferPainter::ColorStopOp(double,const RGBA&)/void ColorStopOp(double pos, const RGBA& color)\u0003Upp\vCOLORSTOPOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000V\u0000\u0000\u0000\u001E\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0001\u0000\fClearStopsOp\avoid ()\"Upp::BufferPainter::ClearStopsOp()\u0013void ClearStopsOp()\u0003Upp\fCLEARSTOPSOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000#\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0001\u0000\tOpacityOp\rvoid (double)%Upp::BufferPainter::OpacityOp(double)\u0018void OpacityOp(double o)\u0003Upp\tOPACITYOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000&\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0001\u0000\tLineCapOp\nvoid (int)\"Upp::BufferPainter::LineCapOp(int)\u001Bvoid LineCapOp(int linecap)\u0003Upp\tLINECAPOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000(\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0001\u0000\nLineJoinOp\nvoid (int)#Upp::BufferPainter::LineJoinOp(int)\u001Dvoid LineJoinOp(int linejoin)\u0003Upp\nLINEJOINOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000&\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0001\u0000\fMiterLimitOp\rvoid (double)(Upp::BufferPainter::MiterLimitOp(double)\u001Bvoid MiterLimitOp(double l)\u0003Upp\fMITERLIMITOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000'\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0001\u0000\tEvenOddOp\vvoid (bool)#Upp::BufferPainter::EvenOddOp(bool)\u001Cvoid EvenOddOp(bool evenodd)\u0003Upp\tEVENODDOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u00008\u0000\u0000\u0000]\u0000\u0000\u0000\u0000\u0001\u0000\u0006DashOp\u001Dvoid (const String &, double)0Upp::BufferPainter::DashOp(const String&,double)-void DashOp(const String& dash, double start)\u0003Upp\u0006DASHOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000@\u0000\u0000\u0000^\u0000\u0000\u0000\u0000\u0001\u0000\u0006DashOp%void (const Vector<double> &, double)0Upp::BufferPainter::DashOp(const Vector&,double)5void DashOp(const Vector<double>& dash, double start)\u0003Upp\u0006DASHOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000%\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0001\u0000\bInvertOp\vvoid (bool)\"Upp::BufferPainter::InvertOp(bool)\u001Avoid InvertOp(bool invert)\u0003Upp\bINVERTOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000)\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0001\u0000\rImageFilterOp\nvoid (int)&Upp::BufferPainter::ImageFilterOp(int)\u001Evoid ImageFilterOp(int filter)\u0003Upp\rIMAGEFILTEROP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u0000b\u0000\u0000\u0000-\u0000\u0000\u0000b\u0000\u0000\u0000\u0000\u0001\u0000\vTransformOp\u0016void (const Xform2D &)/Upp::BufferPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0000d\u0000\u0000\u0000\u0019\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u001DUpp::BufferPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000\u0017\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u001BUpp::BufferPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u001D\u0000\u0000\u0000g\u0000\u0000\u0000\u0000\u0001\u0000\vBeginMaskOp\avoid ()!Upp::BufferPainter::BeginMaskOp()\u0012void BeginMaskOp()\u0003Upp\vBEGINMASKOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u00001\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0001\u0000\rBeginOnPathOp\u0013void (double, bool).Upp::BufferPainter::BeginOnPathOp(double,bool)&void BeginOnPathOp(double q, bool abs)\u0003Upp\rBEGINONPATHOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000k\u0000\u0000\u0000\u0002\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000K(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:108:2)_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:108:2)SUpp::BufferPainter::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.)\u0004enum\u0003UppK(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\PAINTER\\BUFFERPAINTER.H:108:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000l\u0000\u0000\u0000\u0002\u0000\u0000\u0000l\u0000\u0000\u0000\u0006\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0004MOVE_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:108:2)\u0018Upp::BufferPainter::MOVE\u0004MOVE\u0003Upp\u0004MOVE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000l\u0000\u0000\u0000\b\u0000\u0000\u0000l\u0000\u0000\u0000\f\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0004LINE_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:108:2)\u0018Upp::BufferPainter::LINE\u0004LINE\u0003Upp\u0004LINE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\a\u0000\u0000\u0000\u000E\u0000\u0000\u0000l\u0000\u0000\u0000\u000E\u0000\u0000\u0000l\u0000\u0000\u0000\u0017\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\tQUADRATIC_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:108:2)\u001DUpp::BufferPainter::QUADRATIC\tQUADRATIC\u0003Upp\tQUADRATIC\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\a\u0000\u0000\u0000\u0019\u0000\u0000\u0000l\u0000\u0000\u0000\u0019\u0000\u0000\u0000l\u0000\u0000\u0000\u001E\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0005CUBIC_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:108:2)\u0019Upp::BufferPainter::CUBIC\u0005CUBIC\u0003Upp\u0005CUBIC\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\a\u0000\u0000\u0000 \u0000\u0000\u0000l\u0000\u0000\u0000 \u0000\u0000\u0000l\u0000\u0000\u0000$\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0004CHAR_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:108:2)\u0018Upp::BufferPainter::CHAR\u0004CHAR\u0003Upp\u0004CHAR\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0000\u0000\u0000\u0002\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\nLinearData\u001EUpp::BufferPainter::LinearData\u001EUpp::BufferPainter::LinearData\nLinearData\u0003Upp\nLINEARDATA\u001EUpp::BufferPainter::LinearData\u001EUPP::BUFFERPAINTER::LINEARDATA\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000o\u0000\u0000\u0000\u0002\u0000\u0000\u0000o\u0000\u0000\u0000\r\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0004type\u0003int$Upp::BufferPainter::LinearData::type\bint type\u0003Upp\u0004TYPE\u001EUpp::BufferPainter::LinearData\u001EUPP::BUFFERPAINTER::LINEARDATA\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000p\u0000\u0000\u0000\u0002\u0000\u0000\u0000p\u0000\u0000\u0000\n\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0001p\u0006Pointf!Upp::BufferPainter::LinearData::p\bPointf p\u0003Upp\u0001P\u001EUpp::BufferPainter::LinearData\u001EUPP::BUFFERPAINTER::LINEARDATA\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000\u0002\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\rQuadraticData!Upp::BufferPainter::QuadraticData!Upp::BufferPainter::QuadraticData\u001AQuadraticData : LinearData\u0003Upp\rQUADRATICDATA!Upp::BufferPainter::QuadraticData!UPP::BUFFERPAINTER::QUADRATICDATA\u001EUpp::BufferPainter::LinearData\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000s\u0000\u0000\u0000\u0002\u0000\u0000\u0000s\u0000\u0000\u0000\v\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0002p1\u0006Pointf%Upp::BufferPainter::QuadraticData::p1\tPointf p1\u0003Upp\u0002P1!Upp::BufferPainter::QuadraticData!UPP::BUFFERPAINTER::QUADRATICDATA\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u0002\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\tCubicData\u001DUpp::BufferPainter::CubicData\u001DUpp::BufferPainter::CubicData\u0019CubicData : QuadraticData\u0003Upp\tCUBICDATA\u001DUpp::BufferPainter::CubicData\u001DUPP::BUFFERPAINTER::CUBICDATA!Upp::BufferPainter::QuadraticData\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000v\u0000\u0000\u0000\u0002\u0000\u0000\u0000v\u0000\u0000\u0000\v\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0002p2\u0006Pointf!Upp::BufferPainter::CubicData::p2\tPointf p2\u0003Upp\u0002P2\u001DUpp::BufferPainter::CubicData\u001DUPP::BUFFERPAINTER::CUBICDATA\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0000\u0000\u0000\u0002\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\bCharData\u001CUpp::BufferPainter::CharData\u001CUpp::BufferPainter::CharData\u0015CharData : LinearData\u0003Upp\bCHARDATA\u001CUpp::BufferPainter::CharData\u001CUPP::BUFFERPAINTER::CHARDATA\u001EUpp::BufferPainter::LinearData\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000y\u0000\u0000\u0000\u0002\u0000\u0000\u0000y\u0000\u0000\u0000\t\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0002ch\u0003int Upp::BufferPainter::CharData::ch\u0006int ch\u0003Upp\u0002CH\u001CUpp::BufferPainter::CharData\u001CUPP::BUFFERPAINTER::CHARDATA\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000z\u0000\u0000\u0000\u0002\u0000\u0000\u0000z\u0000\u0000\u0000\u000E\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\a_filler\u0003int%Upp::BufferPainter::CharData::_filler\vint _filler\u0003Upp\a_FILLER\u001CUpp::BufferPainter::CharData\u001CUPP::BUFFERPAINTER::CHARDATA\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000{\u0000\u0000\u0000\u0002\u0000\u0000\u0000{\u0000\u0000\u0000\n\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0003fnt\u0004Font!Upp::BufferPainter::CharData::fnt\bFont fnt\u0003Upp\u0003FNT\u001CUpp::BufferPainter::CharData\u001CUPP::BUFFERPAINTER::CHARDATA\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000}\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bPathLine\u001CUpp::BufferPainter::PathLine\u001CUpp::BufferPainter::PathLine\u001DPathLine : Moveable<PathLine>\u0003Upp\bPATHLINE\u001CUpp::BufferPainter::PathLine\u001CUPP::BUFFERPAINTER::PATHLINE\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000~\u0000\u0000\u0000\u0002\u0000\u0000\u0000~\u0000\u0000\u0000\n\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0001p\u0006Pointf\u001FUpp::BufferPainter::PathLine::p\bPointf p\u0003Upp\u0001P\u001CUpp::BufferPainter::PathLine\u001CUPP::BUFFERPAINTER::PATHLINE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u007F\u0000\u0000\u0000\f\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\u0003len\u0006double!Upp::BufferPainter::PathLine::len\ndouble len\u0003Upp\u0003LEN\u001CUpp::BufferPainter::PathLine\u001CUPP::BUFFERPAINTER::PATHLINE\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\bDashInfo\u001CUpp::BufferPainter::DashInfo\u001CUpp::BufferPainter::DashInfo\bDashInfo\u0003Upp\bDASHINFO\u001CUpp::BufferPainter::DashInfo\u001CUPP::BUFFERPAINTER::DASHINFO\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004dash\u001CWithDeepCopy<Vector<double>>\"Upp::BufferPainter::DashInfo::dash!WithDeepCopy<Vector<double>> dash\u0003Upp\u0004DASH\u001CUpp::BufferPainter::DashInfo\u001CUPP::BUFFERPAINTER::DASHINFO\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005start\u0006double#Upp::BufferPainter::DashInfo::start\fdouble start\u0003Upp\u0005START\u001CUpp::BufferPainter::DashInfo\u001CUPP::BUFFERPAINTER::DASHINFO\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tColorStop\u001DUpp::BufferPainter::ColorStop\u001DUpp::BufferPainter::ColorStop\u001FColorStop : Moveable<ColorStop>\u0003Upp\tCOLORSTOP\u001DUpp::BufferPainter::ColorStop\u001DUPP::BUFFERPAINTER::COLORSTOP\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004stop\u0006double#Upp::BufferPainter::ColorStop::stop\vdouble stop\u0003Upp\u0004STOP\u001DUpp::BufferPainter::ColorStop\u001DUPP::BUFFERPAINTER::COLORSTOP\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005color\u0004RGBA$Upp::BufferPainter::ColorStop::color\nRGBA color\u0003Upp\u0005COLOR\u001DUpp::BufferPainter::ColorStop\u001DUPP::BUFFERPAINTER::COLORSTOP\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\toperator<\u001Ebool (const ColorStop &) const?Upp::BufferPainter::ColorStop::operator<(const ColorStop&)const(bool operator<(const ColorStop& b) const\u0003Upp\tOPERATOR<\u001DUpp::BufferPainter::ColorStop\u001DUPP::BUFFERPAINTER::COLORSTOP\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tSerialize\u000Fvoid (Stream &)1Upp::BufferPainter::ColorStop::Serialize(Stream&)\u0019void Serialize(Stream& s)\u0003Upp\tSERIALIZE\u001DUpp::BufferPainter::ColorStop\u001DUPP::BUFFERPAINTER::COLORSTOP\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nSimpleAttr\u001EUpp::BufferPainter::SimpleAttr\u001EUpp::BufferPainter::SimpleAttr\nSimpleAttr\u0003Upp\nSIMPLEATTR\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003mtx\aXform2D#Upp::BufferPainter::SimpleAttr::mtx\vXform2D mtx\u0003Upp\u0003MTX\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\vmiter_limit\u0006double+Upp::BufferPainter::SimpleAttr::miter_limit\u0012double miter_limit\u0003Upp\vMITER_LIMIT\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aopacity\u0006double'Upp::BufferPainter::SimpleAttr::opacity\u000Edouble opacity\u0003Upp\aOPACITY\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004dash\u0010const DashInfo *$Upp::BufferPainter::SimpleAttr::dash\u0014const DashInfo *dash\u0003Upp\u0004DASH\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\aevenodd\u0004bool'Upp::BufferPainter::SimpleAttr::evenodd\fbool evenodd\u0003Upp\aEVENODD\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004join\u0004byte$Upp::BufferPainter::SimpleAttr::join\tbyte join\u0003Upp\u0004JOIN\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003cap\u0004byte#Upp::BufferPainter::SimpleAttr::cap\bbyte cap\u0003Upp\u0003CAP\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006invert\u0004bool&Upp::BufferPainter::SimpleAttr::invert\vbool invert\u0003Upp\u0006INVERT\u001EUpp::BufferPainter::SimpleAttr\u001EUPP::BUFFERPAINTER::SIMPLEATTR\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004Attr\u0018Upp::BufferPainter::Attr\u0018Upp::BufferPainter::Attr!Attr : Moveable<Attr>, SimpleAttr\u0003Upp\u0004ATTR\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR,Upp::Moveable;Upp::BufferPainter::SimpleAttr\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nmtx_serial\u0003int$Upp::BufferPainter::Attr::mtx_serial\u000Eint mtx_serial\u0003Upp\nMTX_SERIAL\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\ncolor_stop\u001FWithDeepCopy<Vector<ColorStop>>$Upp::BufferPainter::Attr::color_stop*WithDeepCopy<Vector<ColorStop>> color_stop\u0003Upp\nCOLOR_STOP\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tcliplevel\u0003int#Upp::BufferPainter::Attr::cliplevel\rint cliplevel\u0003Upp\tCLIPLEVEL\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\ahasclip\u0004bool!Upp::BufferPainter::Attr::hasclip\fbool hasclip\u0003Upp\aHASCLIP\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004mask\u0004bool\u001EUpp::BufferPainter::Attr::mask\tbool mask\u0003Upp\u0004MASK\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006onpath\u0004bool Upp::BufferPainter::Attr::onpath\vbool onpath\u0003Upp\u0006ONPATH\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR\u0000\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006filter\u0003int Upp::BufferPainter::Attr::filter\nint filter\u0003Upp\u0006FILTER\u0018Upp::BufferPainter::Attr\u0018UPP::BUFFERPAINTER::ATTR\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¡\u0000\u0000\u0000&\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0003alt\u000FPainterTarget *\u0017Upp::BufferPainter::alt\u0012PainterTarget *alt\u0003Upp\u0003ALT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¢\u0000\u0000\u0000\u0001\u0000\u0000\u0000¢\u0000\u0000\u00000\u0000\u0000\u0000¢\u0000\u0000\u0000\u0001\u0000\u0000\ralt_tolerance\u0006double!Upp::BufferPainter::alt_tolerance\u0014double alt_tolerance\u0003Upp\rALT_TOLERANCE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0000£\u0000\u0000\u0000!\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0000\u0000\u0005dummy\vImageBuffer\u0019Upp::BufferPainter::dummy\u0011ImageBuffer dummy\u0003Upp\u0005DUMMY\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u001E\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0002ip\rImageBuffer *\u0016Upp::BufferPainter::ip\u000FImageBuffer *ip\u0003Upp\u0002IP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\u0000¥\u0000\u0000\u0000%\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\u0004mode\u0003int\u0018Upp::BufferPainter::mode\bint mode\u0003Upp\u0004MODE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000¦\u0000\u0000\u0000$\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\bsubpixel\rBuffer<int16>\u001CUpp::BufferPainter::subpixel\u0016Buffer<int16> subpixel\u0003Upp\bSUBPIXEL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0000§\u0000\u0000\u0000'\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\vco_subpixel\u0015Buffer<Buffer<int16>>\u001FUpp::BufferPainter::co_subpixel!Buffer<Buffer<int16>> co_subpixel\u0003Upp\vCO_SUBPIXEL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\u0000¨\u0000\u0000\u0000%\u0000\u0000\u0000¨\u0000\u0000\u0000\u0001\u0000\u0000\trender_cx\u0003int\u001DUpp::BufferPainter::render_cx\rint render_cx\u0003Upp\tRENDER_CX\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\u0000©\u0000\u0000\u0000)\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\tdopreclip\u0003int\u001DUpp::BufferPainter::dopreclip\rint dopreclip\u0003Upp\tDOPRECLIP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000.\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0004size\u0005Sizef\u0018Upp::BufferPainter::size\nSizef size\u0003Upp\u0004SIZE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\u0000¬\u0000\u0000\u0000&\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\bco_clear\fBuffer<byte>\u001CUpp::BufferPainter::co_clear\u0015Buffer<byte> co_clear\u0003Upp\bCO_CLEAR\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\u0000­\u0000\u0000\u0000,\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0000\u0000\u000Eco_clear_color\u0004RGBA\"Upp::BufferPainter::co_clear_color\u0013RGBA co_clear_color\u0003Upp\u000ECO_CLEAR_COLOR\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\"\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0004attr\u0004Attr\u0018Upp::BufferPainter::attr\tAttr attr\u0003Upp\u0004ATTR\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\u0000°\u0000\u0000\u0000'\u0000\u0000\u0000°\u0000\u0000\u0000\u0001\u0000\u0000\tattrstack\vArray<Attr>\u001DUpp::BufferPainter::attrstack\u0015Array<Attr> attrstack\u0003Upp\tATTRSTACK\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000±\u0000\u0000\u0000\"\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0004clip\u001CVector<Buffer<ClippingLine>>\u0018Upp::BufferPainter::clip!Vector<Buffer<ClippingLine>> clip\u0003Upp\u0004CLIP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0000²\u0000\u0000\u0000\"\u0000\u0000\u0000²\u0000\u0000\u0000\u0001\u0000\u0000\u0004mask\u0012Array<ImageBuffer>\u0018Upp::BufferPainter::mask\u0017Array<ImageBuffer> mask\u0003Upp\u0004MASK\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000)\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0000\u0000\vonpathstack\u0018Vector<Vector<PathLine>>\u001FUpp::BufferPainter::onpathstack$Vector<Vector<PathLine>> onpathstack\u0003Upp\vONPATHSTACK\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\u0000´\u0000\u0000\u0000*\u0000\u0000\u0000´\u0000\u0000\u0000\u0001\u0000\u0000\fpathlenstack\u000EVector<double> Upp::BufferPainter::pathlenstack\u001BVector<double> pathlenstack\u0003Upp\fPATHLENSTACK\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000,\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0000\u0000\nmtx_serial\u0003int\u001EUpp::BufferPainter::mtx_serial\u000Eint mtx_serial\u0003Upp\nMTX_SERIAL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\u0000¶\u0000\u0000\u0000$\u0000\u0000\u0000¶\u0000\u0000\u0000\u0001\u0000\u0000\u0006dashes\u001AArrayMap<String, DashInfo>\u001AUpp::BufferPainter::dashes!ArrayMap<String, DashInfo> dashes\u0003Upp\u0006DASHES\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\u0000¸\u0000\u0000\u0000#\u0000\u0000\u0000¸\u0000\u0000\u0000\u0001\u0000\u0000\apreclip\u0005Rectf\u001BUpp::BufferPainter::preclip\rRectf preclip\u0003Upp\aPRECLIP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000¹\u0000\u0000\u00003\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0012preclip_mtx_serial\u0003int&Upp::BufferPainter::preclip_mtx_serial\u0016int preclip_mtx_serial\u0003Upp\u0012PRECLIP_MTX_SERIAL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000#\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0000\u0000\aregular\u0004bool\u001BUpp::BufferPainter::regular\fbool regular\u0003Upp\aREGULAR\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000¼\u0000\u0000\u0000\u0002\u0000\u0000\u0000À\u0000\u0000\u0000\u0001\u0000\u0000\bPathInfo\u001CUpp::BufferPainter::PathInfo\u001CUpp::BufferPainter::PathInfo\bPathInfo\u0003Upp\bPATHINFO\u001CUpp::BufferPainter::PathInfo\u001CUPP::BUFFERPAINTER::PATHINFO\u0000\u0000\u0006\u0000\u0000\u0000%\u0000\u0000\u0000½\u0000\u0000\u0000\u0002\u0000\u0000\u0000½\u0000\u0000\u0000)\u0000\u0000\u0000½\u0000\u0000\u0000\u0001\u0000\u0000\u0004path\u0014Vector<Vector<byte>>\"Upp::BufferPainter::PathInfo::path\u0019Vector<Vector<byte>> path\u0003Upp\u0004PATH\u001CUpp::BufferPainter::PathInfo\u001CUPP::BUFFERPAINTER::PATHINFO\u0000\u0000\u0006\u0000\u0000\u0000%\u0000\u0000\u0000¾\u0000\u0000\u0000\u0002\u0000\u0000\u0000¾\u0000\u0000\u0000+\u0000\u0000\u0000¾\u0000\u0000\u0000\u0001\u0000\u0000\u0006ischar\u0004bool$Upp::BufferPainter::PathInfo::ischar\vbool ischar\u0003Upp\u0006ISCHAR\u001CUpp::BufferPainter::PathInfo\u001CUPP::BUFFERPAINTER::PATHINFO\u0000\u0000\u0006\u0000\u0000\u0000%\u0000\u0000\u0000¿\u0000\u0000\u0000\u0002\u0000\u0000\u0000¿\u0000\u0000\u0000-\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\bpath_min\u0006Pointf&Upp::BufferPainter::PathInfo::path_min\u000FPointf path_min\u0003Upp\bPATH_MIN\u001CUpp::BufferPainter::PathInfo\u001CUPP::BUFFERPAINTER::PATHINFO\u0000\u0000\u0006\u0000\u0000\u0000/\u0000\u0000\u0000¿\u0000\u0000\u0000\u0002\u0000\u0000\u0000¿\u0000\u0000\u00007\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\bpath_max\u0006Pointf&Upp::BufferPainter::PathInfo::path_max\u000FPointf path_max\u0003Upp\bPATH_MAX\u001CUpp::BufferPainter::PathInfo\u001CUPP::BUFFERPAINTER::PATHINFO\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\u0000Â\u0000\u0000\u0000\u001A\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000K(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:195:2)_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:195:2)SUpp::BufferPainter::(unnamed at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.)\u0004enum\u0003UppK(UNNAMED ENUM AT C:\\USERS\\SBLO\\AI-UPP\\UPPSRC\\PAINTER\\BUFFERPAINTER.H:195:2)\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000Â\u0000\u0000\u0000\b\u0000\u0000\u0000Â\u0000\u0000\u0000\u0018\u0000\u0000\u0000Â\u0000\u0000\u0000\u0001\u0000\u0000\nBATCH_SIZE_Upp::BufferPainter::(unnamed enum at C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\BufferPainter.h:195:2)\u001EUpp::BufferPainter::BATCH_SIZE\nBATCH_SIZE\u0003Upp\nBATCH_SIZE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0017\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\u0005paths\u0010Buffer<PathInfo>\u0019Upp::BufferPainter::paths\u0016Buffer<PathInfo> paths\u0003Upp\u0005PATHS\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000 \u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0000\u0000\npath_index\u0003int\u001EUpp::BufferPainter::path_index\u000Eint path_index\u0003Upp\nPATH_INDEX\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Æ\u0000\u0000\u0000\u001B\u0000\u0000\u0000Æ\u0000\u0000\u0000\u0001\u0000\u0000\tpath_info\nPathInfo *\u001DUpp::BufferPainter::path_info\u0013PathInfo *path_info\u0003Upp\tPATH_INFO\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000\u001A\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\bpathattr\u0004Attr\u001CUpp::BufferPainter::pathattr\rAttr pathattr\u0003Upp\bPATHATTR\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000\u0019\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\acurrent\u0006Pointf\u001BUpp::BufferPainter::current\u000EPointf current\u0003Upp\aCURRENT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001B\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000#\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\bccontrol\u0006Pointf\u001CUpp::BufferPainter::ccontrol\u000FPointf ccontrol\u0003Upp\bCCONTROL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000%\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u0000-\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\bqcontrol\u0006Pointf\u001CUpp::BufferPainter::qcontrol\u000FPointf qcontrol\u0003Upp\bQCONTROL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000/\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000É\u0000\u0000\u00003\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0004move\u0006Pointf\u0018Upp::BufferPainter::move\vPointf move\u0003Upp\u0004MOVE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ë\u0000\u0000\u0000 \u0000\u0000\u0000Ë\u0000\u0000\u0000\u0001\u0000\u0000\nrasterizer\nRasterizer\u001EUpp::BufferPainter::rasterizer\u0015Rasterizer rasterizer\u0003Upp\nRASTERIZER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ì\u0000\u0000\u0000\u001A\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0004span\fBuffer<RGBA>\u0018Upp::BufferPainter::span\u0011Buffer<RGBA> span\u0003Upp\u0004SPAN\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000\u001D\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0000\u0000\aco_span\u0014Buffer<Buffer<RGBA>>\u001BUpp::BufferPainter::co_span\u001CBuffer<Buffer<RGBA>> co_span\u0003Upp\aCO_SPAN\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0018\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0006onpath\u0010Vector<PathLine>\u001AUpp::BufferPainter::onpath\u0017Vector<PathLine> onpath\u0003Upp\u0006ONPATH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0019\u0000\u0000\u0000Ð\u0000\u0000\u0000\u0001\u0000\u0000\apathlen\u0006double\u001BUpp::BufferPainter::pathlen\u000Edouble pathlen\u0003Upp\aPATHLEN\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0014\u0000\u0000\u0000Ò\u0000\u0000\u0000\u0000\u0000\u0000\fOnPathTarget Upp::BufferPainter::OnPathTarget Upp::BufferPainter::OnPathTarget\fOnPathTarget\u0003Upp\fONPATHTARGET Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0010\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0000\u0000\u0002co\u0004bool\u0016Upp::BufferPainter::co\abool co\u0003Upp\u0002CO\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0017\u0000\u0000\u0000Ö\u0000\u0000\u0000\u0001\u0000\u0000\nimagecache\u0004bool\u001EUpp::BufferPainter::imagecache\u000Fbool imagecache\u0003Upp\nIMAGECACHE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ø\u0000\u0000\u0000\u0002\u0000\u0000\u0000é\u0000\u0000\u0000\u0001\u0000\u0000\fOnPathTarget Upp::BufferPainter::OnPathTarget Upp::BufferPainter::OnPathTarget!OnPathTarget : LinearPathConsumer\u0003Upp\fONPATHTARGET Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0017Upp::LinearPathConsumer\u0000\u0006\u0000\u0000\u0000\"\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ù\u0000\u0000\u0000&\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\u0004path\u001FVector<BufferPainter::PathLine>&Upp::BufferPainter::OnPathTarget::path$Vector<BufferPainter::PathLine> path\u0003Upp\u0004PATH Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ú\u0000\u0000\u0000\f\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u0003pos\u0006Pointf%Upp::BufferPainter::OnPathTarget::pos\nPointf pos\u0003Upp\u0003POS Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000Û\u0000\u0000\u0000\u0002\u0000\u0000\u0000Û\u0000\u0000\u0000\f\u0000\u0000\u0000Û\u0000\u0000\u0000\u0001\u0000\u0000\u0003len\u0006double%Upp::BufferPainter::OnPathTarget::len\ndouble len\u0003Upp\u0003LEN Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0003\u0000\u0000\u0000á\u0000\u0000\u0000\u0001\u0001\u0000\u0004Move\u0015void (const Pointf &)5Upp::BufferPainter::OnPathTarget::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0000\u0000\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000â\u0000\u0000\u0000\u0002\u0000\u0000\u0000â\u0000\u0000\u0000\u0003\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0001\u0000\u0004Line\u0015void (const Pointf &)5Upp::BufferPainter::OnPathTarget::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000è\u0000\u0000\u0000\u0002\u0000\u0000\u0000è\u0000\u0000\u00001\u0000\u0000\u0000è\u0000\u0000\u0000\u0001\u0000\u0000\fOnPathTarget\avoid ()0Upp::BufferPainter::OnPathTarget::OnPathTarget()\u000EOnPathTarget()\u0003Upp\fONPATHTARGET Upp::BufferPainter::OnPathTarget UPP::BUFFERPAINTER::ONPATHTARGET\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000ë\u0000\u0000\u0000\u0001\u0000\u0000\u0000ë\u0000\u0000\u0000\u0002\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\aPathJob\u001BUpp::BufferPainter::PathJob\u001BUpp::BufferPainter::PathJob\aPathJob\u0003Upp\aPATHJOB\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ì\u0000\u0000\u0000\u0002\u0000\u0000\u0000ì\u0000\u0000\u0000\u001B\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0005trans\vTransformer\"Upp::BufferPainter::PathJob::trans\u0011Transformer trans\u0003Upp\u0005TRANS\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000í\u0000\u0000\u0000\u0002\u0000\u0000\u0000í\u0000\u0000\u0000\u001D\u0000\u0000\u0000í\u0000\u0000\u0000\u0001\u0000\u0000\astroker\aStroker$Upp::BufferPainter::PathJob::stroker\u000FStroker stroker\u0003Upp\aSTROKER\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000î\u0000\u0000\u0000\u0002\u0000\u0000\u0000î\u0000\u0000\u0000\u001C\u0000\u0000\u0000î\u0000\u0000\u0000\u0001\u0000\u0000\u0006dasher\u0006Dasher#Upp::BufferPainter::PathJob::dasher\rDasher dasher\u0003Upp\u0006DASHER\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ï\u0000\u0000\u0000\u0002\u0000\u0000\u0000ï\u0000\u0000\u0000\"\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0000\u0000\fonpathtarget\fOnPathTarget)Upp::BufferPainter::PathJob::onpathtarget\u0019OnPathTarget onpathtarget\u0003Upp\fONPATHTARGET\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ð\u0000\u0000\u0000\u0002\u0000\u0000\u0000ð\u0000\u0000\u0000\u0017\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\u0001g\u0014LinearPathConsumer *\u001EUpp::BufferPainter::PathJob::g\u0015LinearPathConsumer *g\u0003Upp\u0001G\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0002\u0000\u0000\u0000ñ\u0000\u0000\u0000\u001F\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\ttolerance\u0006double&Upp::BufferPainter::PathJob::tolerance\u0010double tolerance\u0003Upp\tTOLERANCE\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ò\u0000\u0000\u0000\u0002\u0000\u0000\u0000ò\u0000\u0000\u0000\u001D\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\aevenodd\u0004bool$Upp::BufferPainter::PathJob::evenodd\fbool evenodd\u0003Upp\aEVENODD\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ó\u0000\u0000\u0000\u0002\u0000\u0000\u0000ó\u0000\u0000\u0000\u001D\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\aregular\u0004bool$Upp::BufferPainter::PathJob::regular\fbool regular\u0003Upp\aREGULAR\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000ô\u0000\u0000\u0000\u0002\u0000\u0000\u0000ô\u0000\u0000\u0000 \u0000\u0000\u0000ô\u0000\u0000\u0000\u0001\u0000\u0000\npreclipped\u0004bool'Upp::BufferPainter::PathJob::preclipped\u000Fbool preclipped\u0003Upp\nPRECLIPPED\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u0000÷\u0000\u0000\u0000\u0002\u0000\u0000\u0000÷\u0000\u0000\u0000E\u0000\u0000\u0000ø\u0000\u0000\u0000\u0000\u0000\u0000\aPathJobVvoid (Rasterizer &, double, const PathInfo *, const SimpleAttr &, const Rectf &, bool)lUpp::BufferPainter::PathJob::PathJob(Rasterizer&,double,const PathInfo*,const SimpleAttr&,const Rectf&,bool)ÿ\u0000\u0000\u0000PathJob(Rasterizer& rasterizer, double width, const PathInfo *path_info, const SimpleAttr& attr, const Rectf& preclip, bool regular)\u0003Upp\aPATHJOB\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u0002\u0000\u0000\u0000\n\u0001\u0000\u0000\u0001\u0000\u0000\u0005CoJob\u0019Upp::BufferPainter::CoJob\u0019Upp::BufferPainter::CoJob\u0005CoJob\u0003Upp\u0005COJOB\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000ü\u0000\u0000\u0000\u0002\u0000\u0000\u0000ü\u0000\u0000\u0000\u0018\u0000\u0000\u0000ü\u0000\u0000\u0000\u0001\u0000\u0000\u0004attr\nSimpleAttr\u001FUpp::BufferPainter::CoJob::attr\u000FSimpleAttr attr\u0003Upp\u0004ATTR\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000ý\u0000\u0000\u0000\u0002\u0000\u0000\u0000ý\u0000\u0000\u0000\u001D\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\tpath_info\nPathInfo *$Upp::BufferPainter::CoJob::path_info\u0013PathInfo *path_info\u0003Upp\tPATH_INFO\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000þ\u0000\u0000\u0000\u0002\u0000\u0000\u0000þ\u0000\u0000\u0000\u001B\u0000\u0000\u0000þ\u0000\u0000\u0000\u0001\u0000\u0000\apreclip\u0005Rectf\"Upp::BufferPainter::CoJob::preclip\rRectf preclip\u0003Upp\aPRECLIP\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0019\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0000\u0000\u0005width\u0006double Upp::BufferPainter::CoJob::width\fdouble width\u0003Upp\u0005WIDTH\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\aopacity\u0006double\"Upp::BufferPainter::CoJob::opacity\u000Edouble opacity\u0003Upp\aOPACITY\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0000\nrasterizer\nRasterizer%Upp::BufferPainter::CoJob::rasterizer\u0015Rasterizer rasterizer\u0003Upp\nRASTERIZER\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0016\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\u0002ss\fSpanSource *\u001DUpp::BufferPainter::CoJob::ss\u000ESpanSource *ss\u0003Upp\u0002SS\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0017\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\u0003sso\u000FOne<SpanSource>\u001EUpp::BufferPainter::CoJob::sso\u0013One<SpanSource> sso\u0003Upp\u0003SSO\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0019\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0001\u0000\u0000\u0005alpha\u0003int Upp::BufferPainter::CoJob::alpha\tint alpha\u0003Upp\u0005ALPHA\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0019\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0005color\u0004RGBA Upp::BufferPainter::CoJob::color\nRGBA color\u0003Upp\u0005COLOR\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0000\u0000\u0001c\u0004RGBA\u001CUpp::BufferPainter::CoJob::c\u0006RGBA c\u0003Upp\u0001C\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\a\u0001\u0000\u0000\u0002\u0000\u0000\u0000\a\u0001\u0000\u0000\u001B\u0000\u0000\u0000\a\u0001\u0000\u0000\u0001\u0000\u0000\asubpath\u0003int\"Upp::BufferPainter::CoJob::subpath\vint subpath\u0003Upp\aSUBPATH\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\b\u0001\u0000\u0000\u0002\u0000\u0000\u0000\b\u0001\u0000\u0000\u001B\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\aevenodd\u0004bool\"Upp::BufferPainter::CoJob::evenodd\fbool evenodd\u0003Upp\aEVENODD\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000\t\u0001\u0000\u0000\u0002\u0000\u0000\u0000\t\u0001\u0000\u0000\u001B\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\aregular\u0004bool\"Upp::BufferPainter::CoJob::regular\fbool regular\u0003Upp\aREGULAR\u0019Upp::BufferPainter::CoJob\u0019UPP::BUFFERPAINTER::COJOB\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0017\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0005cojob\fArray<CoJob>\u0019Upp::BufferPainter::cojob\u0012Array<CoJob> cojob\u0003Upp\u0005COJOB\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u001F\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0006cofill\fArray<CoJob>\u001AUpp::BufferPainter::cofill\u0013Array<CoJob> cofill\u0003Upp\u0006COFILL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u001A\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\bjobcount\u0003int\u001CUpp::BufferPainter::jobcount\fint jobcount\u0003Upp\bJOBCOUNT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0001\u0000\u0000%\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\tfillcount\u0003int\u001DUpp::BufferPainter::fillcount\rint fillcount\u0003Upp\tFILLCOUNT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u001C\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\nemptycount\u0003int\u001EUpp::BufferPainter::emptycount\u000Eint emptycount\u0003Upp\nEMPTYCOUNT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u001A\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\bfill_job\bCoWorkNX\u001CUpp::BufferPainter::fill_job\u0011CoWorkNX fill_job\u0003Upp\bFILL_JOB\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u001E\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0001\u0000\u0000(\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0000\u0000\u0000\aPathAdd\bT &(int) Upp::BufferPainter::PathAdd(int)'template <class T> T& PathAdd(int type)\u0003Upp\aPATHADD\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0001\u0000\u00006\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0000\tPathPoint\u001DPointf (const Pointf &, bool)1Upp::BufferPainter::PathPoint(const Pointf&,bool)+Pointf PathPoint(const Pointf& p, bool rel)\u0003Upp\tPATHPOINT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0001\u0000\u00005\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0000\bEndPoint\u001DPointf (const Pointf &, bool)0Upp::BufferPainter::EndPoint(const Pointf&,bool)*Pointf EndPoint(const Pointf& p, bool rel)\u0003Upp\bENDPOINT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u001B\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0000\u0000\u0000\aDoMove0\avoid ()\u001DUpp::BufferPainter::DoMove0()\u000Evoid DoMove0()\u0003Upp\aDOMOVE0\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u001B\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u0000\aDoPath0\avoid ()\u001DUpp::BufferPainter::DoPath0()\u000Evoid DoPath0()\u0003Upp\aDOPATH0\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0001\u0000\u0000E\u0000\u0000\u0000\u001A\u0001\u0000\u0000\u0001\u0000\u0000\u0006DoPath\avoid ()\u001CUpp::BufferPainter::DoPath()\rvoid DoPath()\u0003Upp\u0006DOPATH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u001D\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0000\u0000\u0000\tClearPath\avoid ()\u001FUpp::BufferPainter::ClearPath()\u0010void ClearPath()\u0003Upp\tCLEARPATH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0001\u0000\u0000V\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0000\u0000\u0000\nRenderPath>Buffer<ClippingLine> (double, One<SpanSource> &, const RGBA &)7Upp::BufferPainter::RenderPath(double,One&,const RGBA&)UBuffer<ClippingLine> RenderPath(double width, One<SpanSource>& ss, const RGBA& color)\u0003Upp\nRENDERPATH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0001\u0000\u0000*\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0000\u0000\u0000\vRenderImage4void (double, const Image &, const Xform2D &, dword)IUpp::BufferPainter::RenderImage(double,const Image&,const Xform2D&,dword)Xvoid RenderImage(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\vRENDERIMAGE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0001\u0000\u0000;\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000\u0000\fRenderRadialgvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, const Xform2D &, int)vUpp::BufferPainter::RenderRadial(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,const Xform2D&,int)ÿ\u0000\u0000\u0000void RenderRadial(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, const Xform2D& m, int style)\u0003Upp\fRENDERRADIAL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000\"\u0001\u0000\u0000B\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000\u0000\fRenderRadialOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)aUpp::BufferPainter::RenderRadial(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)|void RenderRadial(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\fRENDERRADIAL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0002\u0000\u0000\u0000\u0012\u0000\u0000\u0000%\u0001\u0000\u0000\u0001\u0000\u0000\u0000%\u0001\u0000\u0000$\u0000\u0000\u0000%\u0001\u0000\u0000\u0000\u0000\u0000\u0012GradientImageMaker&Upp::BufferPainter::GradientImageMaker&Upp::BufferPainter::GradientImageMaker\u0012GradientImageMaker\u0003Upp\u0012GRADIENTIMAGEMAKER&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000&\u0001\u0000\u0000\u0001\u0000\u0000\u0000&\u0001\u0000\u0000^\u0000\u0000\u0000&\u0001\u0000\u0000\u0000\u0000\u0001\fMakeGradient,Image (RGBA, Vector<ColorStop> &, RGBA, int)7Upp::BufferPainter::MakeGradient(RGBA,Vector&,RGBA,int)Ystatic Image MakeGradient(RGBA color1, Vector<ColorStop>& color_stop, RGBA color2, int n)\u0003Upp\fMAKEGRADIENT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000d\u0000\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0001\u0012MakeGradientCached,Image (RGBA, Vector<ColorStop> &, RGBA, int)=Upp::BufferPainter::MakeGradientCached(RGBA,Vector&,RGBA,int)_static Image MakeGradientCached(RGBA color1, Vector<ColorStop>& color_stop, RGBA color2, int n)\u0003Upp\u0012MAKEGRADIENTCACHED\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u0000I\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\bGradient'Image (const RGBA &, const RGBA &, int)9Upp::BufferPainter::Gradient(const RGBA&,const RGBA&,int)=Image Gradient(const RGBA& color1, const RGBA& color2, int n)\u0003Upp\bGRADIENT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u0000)\u0001\u0000\u0000f\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000\u0000\bGradientBImage (const RGBA &, const RGBA &, const Pointf &, const Pointf &)QUpp::BufferPainter::Gradient(const RGBA&,const RGBA&,const Pointf&,const Pointf&)ZImage Gradient(const RGBA& color1, const RGBA& color2, const Pointf& p1, const Pointf& p2)\u0003Upp\bGRADIENT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000D\u0000\u0000\u0000*\u0001\u0000\u0000\u0000\u0000\u0000\nColorStop0#void (Attr &, double, const RGBA &)8Upp::BufferPainter::ColorStop0(Attr&,double,const RGBA&)7void ColorStop0(Attr& a, double pos, const RGBA& color)\u0003Upp\nCOLORSTOP0\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000+\u0001\u0000\u0000\u0001\u0000\u0000\u0000+\u0001\u0000\u0000\u001E\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000\u0000\nFinishMask\avoid () Upp::BufferPainter::FinishMask()\u0011void FinishMask()\u0003Upp\nFINISHMASK\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u0000z\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000\u0001\u0012RenderPathSegmentsMvoid (LinearPathConsumer *, const Vector<byte> &, const SimpleAttr *, double)bUpp::BufferPainter::RenderPathSegments(LinearPathConsumer*,const Vector&,const SimpleAttr*,double)ystatic void RenderPathSegments(LinearPathConsumer *g, const Vector<byte>& path, const SimpleAttr *attr, double tolerance)\u0003Upp\u0012RENDERPATHSEGMENTS\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u0000/\u0001\u0000\u0000\u0015\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\rFinishPathJob\avoid ()#Upp::BufferPainter::FinishPathJob()\u0014void FinishPathJob()\u0003Upp\rFINISHPATHJOB\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\u00000\u0001\u0000\u0000R\u0000\u0000\u00000\u0001\u0000\u0000\u0001\u0000\u0000\rFinishFillJob\avoid ()#Upp::BufferPainter::FinishFillJob()\u0014void FinishFillJob()\u0003Upp\rFINISHFILLJOB\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u000E\u0000\u0000\u00002\u0001\u0000\u0000\u0000\u0000\u0000\u0006SyncCo\avoid ()\u001CUpp::BufferPainter::SyncCo()\rvoid SyncCo()\u0003Upp\u0006SYNCCO\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\t\u0000\u0000\u0000\u0012\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00004\u0001\u0000\u0000\u001B\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0001\u0004FILL\tconst int\u0018Upp::BufferPainter::FILL\u0015static const int FILL\u0003Upp\u0004FILL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\t\u0000\u0000\u0000\u001D\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00004\u0001\u0000\u0000&\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0001\u0004CLIP\tconst int\u0018Upp::BufferPainter::CLIP\u0015static const int CLIP\u0003Upp\u0004CLIP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\t\u0000\u0000\u0000(\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00004\u0001\u0000\u00003\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0001\u0006ONPATH\tconst int\u001AUpp::BufferPainter::ONPATH\u0017static const int ONPATH\u0003Upp\u0006ONPATH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\u00007\u0001\u0000\u0000K\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\tGetBuffer\u000FImageBuffer &()\u001FUpp::BufferPainter::GetBuffer()\u0018ImageBuffer& GetBuffer()\u0003Upp\tGETBUFFER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u00008\u0001\u0000\u0000\u0001\u0000\u0000\u00008\u0001\u0000\u0000K\u0000\u0000\u00008\u0001\u0000\u0000\u0001\u0000\u0000\tGetBuffer\u001Bconst ImageBuffer &() const$Upp::BufferPainter::GetBuffer()const$const ImageBuffer& GetBuffer() const\u0003Upp\tGETBUFFER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0000\u0000\u0000:\u0001\u0000\u0000i\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0000\u0000\u0002Co\u0015BufferPainter &(bool)\u001CUpp::BufferPainter::Co(bool) BufferPainter& Co(bool b = true)\u0003Upp\u0002CO\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\u0000;\u0001\u0000\u0000u\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\aPreClip\u0015BufferPainter &(bool)!Upp::BufferPainter::PreClip(bool)%BufferPainter& PreClip(bool b = true)\u0003Upp\aPRECLIP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0000<\u0001\u0000\u0000]\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\nImageCache\u0015BufferPainter &(bool)$Upp::BufferPainter::ImageCache(bool)(BufferPainter& ImageCache(bool b = true)\u0003Upp\nIMAGECACHE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\u0000=\u0001\u0000\u0000Y\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\fNoImageCache\u0011BufferPainter &()\"Upp::BufferPainter::NoImageCache()\u001DBufferPainter& NoImageCache()\u0003Upp\fNOIMAGECACHE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0000\u0000\u0000?\u0001\u0000\u0000H\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000\u0000\u0006Create\u0019void (ImageBuffer &, int),Upp::BufferPainter::Create(ImageBuffer&,int)9void Create(ImageBuffer& ib, int mode = MODE_ANTIALIASED)\u0003Upp\u0006CREATE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\u0000@\u0001\u0000\u0000\u001C\u0000\u0000\u0000@\u0001\u0000\u0000\u0000\u0000\u0000\u0006Finish\avoid ()\u001CUpp::BufferPainter::Finish()\rvoid Finish()\u0003Upp\u0006FINISH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0000\u0000\u0000B\u0001\u0000\u0000R\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0000\u0000\rBufferPainter\u0019void (ImageBuffer &, int)3Upp::BufferPainter::BufferPainter(ImageBuffer&,int);BufferPainter(ImageBuffer& ib, int mode = MODE_ANTIALIASED)\u0003Upp\rBUFFERPAINTER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0001\u0000\u0000\u0001\u0000\u0000\u0000C\u0001\u0000\u00009\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000\u0000\rBufferPainter\u001Evoid (PainterTarget &, double)8Upp::BufferPainter::BufferPainter(PainterTarget&,double)8BufferPainter(PainterTarget& t, double tolerance = Null)\u0003Upp\rBUFFERPAINTER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000D\u0001\u0000\u0000\u0001\u0000\u0000\u0000D\u0001\u0000\u0000?\u0000\u0000\u0000D\u0001\u0000\u0000\u0001\u0000\u0000\rBufferPainter\avoid ()#Upp::BufferPainter::BufferPainter()\u000FBufferPainter()\u0003Upp\rBUFFERPAINTER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000F\u0001\u0000\u0000J\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u000E~BufferPainter\u0010void () noexcept\u0017Upp::BufferPainter::~()\u0010~BufferPainter()\u0003Upp\u000E~BUFFERPAINTER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000Ê©\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painter.cpp","value":"data\\\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\rPaintCharPath\u0012Upp::PaintCharPath\u0012Upp::PaintCharPath!PaintCharPath : FontGlyphConsumer\u0003Upp\rPAINTCHARPATH\u0012Upp::PaintCharPath\u0012UPP::PAINTCHARPATH\u0016Upp::FontGlyphConsumer\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\f\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0002sw\tPainter *\u0016Upp::PaintCharPath::sw\vPainter *sw\u0003Upp\u0002SW\u0012Upp::PaintCharPath\u0012UPP::PAINTCHARPATH\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0001\u0000\u0004Move\rvoid (Pointf) Upp::PaintCharPath::Move(Pointf)\u0013void Move(Pointf p)\u0003Upp\u0004MOVE\u0012Upp::PaintCharPath\u0012UPP::PAINTCHARPATH\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0002\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0001\u0000\u0004Line\rvoid (Pointf) Upp::PaintCharPath::Line(Pointf)\u0013void Line(Pointf p)\u0003Upp\u0004LINE\u0012Upp::PaintCharPath\u0012UPP::PAINTCHARPATH\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0001\u0000\tQuadratic\u0015void (Pointf, Pointf),Upp::PaintCharPath::Quadratic(Pointf,Pointf)$void Quadratic(Pointf p1, Pointf p2)\u0003Upp\tQUADRATIC\u0012Upp::PaintCharPath\u0012UPP::PAINTCHARPATH\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0001\u0000\u0005Cubic\u001Dvoid (Pointf, Pointf, Pointf)/Upp::PaintCharPath::Cubic(Pointf,Pointf,Pointf)+void Cubic(Pointf p1, Pointf p2, Pointf p3)\u0003Upp\u0005CUBIC\u0012Upp::PaintCharPath\u0012UPP::PAINTCHARPATH\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0001\u0000\u0005Close\avoid ()\u001BUpp::PaintCharPath::Close()\fvoid Close()\u0003Upp\u0005CLOSE\u0012Upp::PaintCharPath\u0012UPP::PAINTCHARPATH\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u000EPaintCharacter+void (Painter &, const Pointf &, int, Font)4Upp::PaintCharacter(Painter&,const Pointf&,int,Font)Evoid PaintCharacter(Painter& sw, const Pointf& p, int chr, Font font)\u0003Upp\u000EPAINTCHARACTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u000EGetLineSzXform7Xform2D (const Pointf &, const Pointf &, const Sizef &)=Upp::GetLineSzXform(const Pointf&,const Pointf&,const Sizef&)KXform2D GetLineSzXform(const Pointf& p1, const Pointf& p2, const Sizef& sz)\u0003Upp\u000EGETLINESZXFORM\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill/Painter &(const Image &, Pointf, Pointf, dword)4Upp::Painter::Fill(const Image&,Pointf,Pointf,dword)HPainter& Fill(const Image& image, Pointf p1, Pointf p2, dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill?Painter &(const Image &, double, double, double, double, dword)BUpp::Painter::Fill(const Image&,double,double,double,double,dword)^Painter& Fill(const Image& image, double x1, double y1, double x2, double y2, dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0004FillJPainter &(double, double, const RGBA &, double, double, const RGBA &, int)KUpp::Painter::Fill(double,double,const RGBA&,double,double,const RGBA&,int){Painter& Fill(double x1, double y1, const RGBA& color1, double x2, double y2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0004Fill=Painter &(const RGBA &, const RGBA &, const Xform2D &, dword)@Upp::Painter::Fill(const RGBA&,const RGBA&,const Xform2D&,dword)_Painter& Fill(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, dword flags = 0)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0004FillRPainter &(double, double, const RGBA &, double, double, double, const RGBA &, int)RUpp::Painter::Fill(double,double,const RGBA&,double,double,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Fill(double fx, double fy, const RGBA& color1, double cx, double cy, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\u0004FillBPainter &(const Pointf &, const RGBA &, double, const RGBA &, int)DUpp::Painter::Fill(const Pointf&,const RGBA&,double,const RGBA&,int)jPainter& Fill(const Pointf& c, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0004FillBPainter &(double, double, const RGBA &, double, const RGBA &, int)DUpp::Painter::Fill(double,double,const RGBA&,double,const RGBA&,int)mPainter& Fill(double x, double y, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0004FillKPainter &(const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)LUpp::Painter::Fill(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)yPainter& Fill(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style = GRADIENT_PAD)\u0003Upp\u0004FILL\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeSPainter &(double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)UUpp::Painter::Stroke(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\tTranslate\u0019Painter &(double, double)&Upp::Painter::Translate(double,double)&Painter& Translate(double x, double y)\u0003Upp\tTRANSLATE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000q\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\tTranslate\u0019Painter &(const Pointf &)&Upp::Painter::Translate(const Pointf&)#Painter& Translate(const Pointf& p)\u0003Upp\tTRANSLATE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeGPainter &(double, const Image &, const Pointf &, const Pointf &, dword)KUpp::Painter::Stroke(double,const Image&,const Pointf&,const Pointf&,dword)fPainter& Stroke(double width, const Image& image, const Pointf& p1, const Pointf& p2, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeGPainter &(double, const Image &, double, double, double, double, dword)KUpp::Painter::Stroke(double,const Image&,double,double,double,double,dword)nPainter& Stroke(double width, const Image& image, double x1, double y1, double x2, double y2, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeRPainter &(double, double, double, const RGBA &, double, double, const RGBA &, int)TUpp::Painter::Stroke(double,double,double,const RGBA&,double,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, double x1, double y1, const RGBA& color1, double x2, double y2, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeEPainter &(double, const RGBA &, const RGBA &, const Xform2D &, dword)IUpp::Painter::Stroke(double,const RGBA&,const RGBA&,const Xform2D&,dword)oPainter& Stroke(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, dword flags = 0)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeZPainter &(double, double, double, const RGBA &, double, double, double, const RGBA &, int)[Upp::Painter::Stroke(double,double,double,const RGBA&,double,double,double,const RGBA&,int)ÿ\u0000\u0000\u0000Painter& Stroke(double width, double fx, double fy, const RGBA& color1, double cx, double cy, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeJPainter &(double, const Pointf &, const RGBA &, double, const RGBA &, int)MUpp::Painter::Stroke(double,const Pointf&,const RGBA&,double,const RGBA&,int)zPainter& Stroke(double width, const Pointf& c, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006StrokeJPainter &(double, double, double, const RGBA &, double, const RGBA &, int)MUpp::Painter::Stroke(double,double,double,const RGBA&,double,const RGBA&,int)}Painter& Stroke(double width, double x, double y, const RGBA& color1, double r, const RGBA& color2, int style = GRADIENT_PAD)\u0003Upp\u0006STROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Rotate\u0011Painter &(double)\u001CUpp::Painter::Rotate(double)\u0019Painter& Rotate(double a)\u0003Upp\u0006ROTATE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000¤\u0000\u0000\u0000\u0001\u0000\u0000\u0005Scale\u0019Painter &(double, double)\"Upp::Painter::Scale(double,double),Painter& Scale(double scalex, double scaley)\u0003Upp\u0005SCALE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000¦\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\u0005Scale\u0011Painter &(double)\u001BUpp::Painter::Scale(double)\u001CPainter& Scale(double scale)\u0003Upp\u0005SCALE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000¬\u0000\u0000\u0000\u0000\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\u0000¿\u0000\u0000\u0000\u0001\u0000\u0000\fStringToDash)Vector<double> (const String &, double &)(Upp::StringToDash(const String&,double&)>Vector<double> StringToDash(const String& dash, double& start)\u0003Upp\fSTRINGTODASH\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Á\u0000\u0000\u0000\u0000\u0000\u0000\u0000Á\u0000\u0000\u0000\u0001\u0000\u0000\u0000Å\u0000\u0000\u0000\u0001\u0001\u0000\u0006DashOp\u001Dvoid (const String &, double)*Upp::Painter::DashOp(const String&,double)1void DashOp(const String& dash, double start = 0)\u0003Upp\u0006DASHOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\tCharacter$Painter &(double, double, int, Font)/Upp::Painter::Character(double,double,int,Font)8Painter& Character(double x, double y, int ch, Font fnt)\u0003Upp\tCHARACTER\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)GUpp::Painter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0000\u0000\u0000\u0001\u0000\u0000\u0000ö\u0000\u0000\u0000\u0001\u0000\u0000\u0004TextCPainter &(double, double, const wchar *, Font, int, const double *)EUpp::Painter::Text(double,double,const wchar*,Font,int,const double*)`Painter& Text(double x, double y, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ø\u0000\u0000\u0000\u0000\u0000\u0000\u0000ø\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\u0004Text@Painter &(const Pointf &, const WString &, Font, const double *)CUpp::Painter::Text(const Pointf&,const WString&,Font,const double*)PPainter& Text(const Pointf& p, const WString& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0004Text@Painter &(double, double, const WString &, Font, const double *)CUpp::Painter::Text(double,double,const WString&,Font,const double*)SPainter& Text(double x, double y, const WString& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000\u0004Text?Painter &(const Pointf &, const String &, Font, const double *)BUpp::Painter::Text(const Pointf&,const String&,Font,const double*)OPainter& Text(const Pointf& p, const String& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\a\u0001\u0000\u0000\u0000\u0000\u0000\u0000\a\u0001\u0000\u0000\u0001\u0000\u0000\u0000\n\u0001\u0000\u0000\u0001\u0000\u0000\u0004Text?Painter &(double, double, const String &, Font, const double *)BUpp::Painter::Text(double,double,const String&,Font,const double*)RPainter& Text(double x, double y, const String& s, Font fnt, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\f\u0001\u0000\u0000\u0000\u0000\u0000\u0000\f\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\u0004TextBPainter &(const Pointf &, const char *, Font, int, const double *)DUpp::Painter::Text(const Pointf&,const char*,Font,int,const double*)\\Painter& Text(const Pointf& p, const char *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\u0004TextBPainter &(double, double, const char *, Font, int, const double *)DUpp::Painter::Text(double,double,const char*,Font,int,const double*)_Painter& Text(double x, double y, const char *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0004TEXT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0001\u0000\u0000\u0001\u0000\u0000\tRectangle)Painter &(double, double, double, double)4Upp::Painter::Rectangle(double,double,double,double)<Painter& Rectangle(double x, double y, double cx, double cy)\u0003Upp\tRECTANGLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0001\u0000\u0000\u0001\u0000\u0000\u0000!\u0001\u0000\u0000\u0001\u0000\u0000\u0010RoundedRectangle1Painter &(double, double, double, double, double)BUpp::Painter::RoundedRectangle(double,double,double,double,double)MPainter& RoundedRectangle(double x, double y, double cx, double cy, double r)\u0003Upp\u0010ROUNDEDRECTANGLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0000\u0000\u0010RoundedRectangle9Painter &(double, double, double, double, double, double)IUpp::Painter::RoundedRectangle(double,double,double,double,double,double)YPainter& RoundedRectangle(double x, double y, double cx, double cy, double rx, double ry)\u0003Upp\u0010ROUNDEDRECTANGLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0000\u0000\aEllipse)Painter &(double, double, double, double)2Upp::Painter::Ellipse(double,double,double,double):Painter& Ellipse(double x, double y, double rx, double ry)\u0003Upp\aELLIPSE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0000\u0000\u0006Circle!Painter &(double, double, double)*Upp::Painter::Circle(double,double,double)-Painter& Circle(double x, double y, double r)\u0003Upp\u0006CIRCLE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0001\u0000\u0000.\u0000\u0000\u00009\u0001\u0000\u0000\u0001\u0001\u0000\aClearOp\u0013void (const RGBA &)%Upp::NilPainter::ClearOp(const RGBA&)\u001Fvoid ClearOp(const RGBA& color)\u0003Upp\aCLEAROP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000:\u0001\u0000\u0000\u0000\u0000\u0000\u0000:\u0001\u0000\u00005\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool)+Upp::NilPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000\u0000\u0000;\u0001\u0000\u00005\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool)+Upp::NilPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000<\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0001\u0000\u0000L\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)>Upp::NilPainter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000\u0000\u0000=\u0001\u0000\u0000:\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)0Upp::NilPainter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000>\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0001\u0000\u0000Z\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)HUpp::NilPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0001\u0000\u0000H\u0000\u0000\u0000?\u0001\u0000\u0000\u0001\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool):Upp::NilPainter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000@\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0001\u0000\u0000a\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)FUpp::NilPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0000\u0000\u0000A\u0001\u0000\u0000o\u0000\u0000\u0000A\u0001\u0000\u0000\u0001\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)LUpp::NilPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000B\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0001\u0000\u0000\u001D\u0000\u0000\u0000B\u0001\u0000\u0000\u0001\u0001\u0000\aCloseOp\avoid ()\u001AUpp::NilPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000\u0000\u0000C\u0001\u0000\u0000\u001B\u0000\u0000\u0000C\u0001\u0000\u0000\u0001\u0001\u0000\u0005DivOp\avoid ()\u0018Upp::NilPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000D\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0001\u0000\u0000-\u0000\u0000\u0000D\u0001\u0000\u0000\u0001\u0001\u0000\u0006FillOp\u0013void (const RGBA &)$Upp::NilPainter::FillOp(const RGBA&)\u001Evoid FillOp(const RGBA& color)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000E\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0001\u0000\u0000T\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0001\u0000\u0006FillOp,void (const Image &, const Xform2D &, dword):Upp::NilPainter::FillOp(const Image&,const Xform2D&,dword)Evoid FillOp(const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000f\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0001\u0000\u0006FillOp7void (const RGBA &, const RGBA &, const Xform2D &, int)CUpp::NilPainter::FillOp(const RGBA&,const RGBA&,const Xform2D&,int)Wvoid FillOp(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000\u0000\u0000G\u0001\u0000\u0000q\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0001\u0000\u0006FillOpFvoid (const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)PUpp::NilPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)bvoid FillOp(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000H\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0001\u0000\u0000y\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0001\u0000\u0006FillOpNvoid (const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)WUpp::NilPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)jvoid FillOp(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000I\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0001\u0000\u0000w\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0001\u0000\u0006FillOpGvoid (const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)QUpp::NilPainter::FillOp(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)hvoid FillOp(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000J\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0001\u0000\u0000<\u0000\u0000\u0000J\u0001\u0000\u0000\u0001\u0001\u0000\bStrokeOp\u001Bvoid (double, const RGBA &)-Upp::NilPainter::StrokeOp(double,const RGBA&)-void StrokeOp(double width, const RGBA& rgba)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0001\u0000\u0000d\u0000\u0000\u0000K\u0001\u0000\u0000\u0001\u0001\u0000\bStrokeOp4void (double, const Image &, const Xform2D &, dword)CUpp::NilPainter::StrokeOp(double,const Image&,const Xform2D&,dword)Uvoid StrokeOp(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000L\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0001\u0000\u0000v\u0000\u0000\u0000L\u0001\u0000\u0000\u0001\u0001\u0000\bStrokeOp?void (double, const RGBA &, const RGBA &, const Xform2D &, int)LUpp::NilPainter::StrokeOp(double,const RGBA&,const RGBA&,const Xform2D&,int)gvoid StrokeOp(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0001\u0001\u0000\bStrokeOpNvoid (double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)YUpp::NilPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)rvoid StrokeOp(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000N\u0001\u0000\u0000\u0001\u0001\u0000\bStrokeOpVvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)`Upp::NilPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)zvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000O\u0001\u0000\u0000\u0000\u0000\u0000\u0000O\u0001\u0000\u0000\u0000\u0000\u0000O\u0001\u0000\u0000\u0001\u0001\u0000\bStrokeOpOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)ZUpp::NilPainter::StrokeOp(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)xvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000P\u0001\u0000\u0000\u0000\u0000\u0000\u0000P\u0001\u0000\u0000\u001C\u0000\u0000\u0000P\u0001\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\avoid ()\u0019Upp::NilPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000B\u0000\u0000\u0000Q\u0001\u0000\u0000\u0001\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)4Upp::NilPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000R\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0001\u0000\u0000a\u0000\u0000\u0000R\u0001\u0000\u0000\u0001\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)JUpp::NilPainter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000S\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0001\u0000\u0000>\u0000\u0000\u0000S\u0001\u0000\u0000\u0001\u0001\u0000\vColorStopOp\u001Bvoid (double, const RGBA &)0Upp::NilPainter::ColorStopOp(double,const RGBA&)/void ColorStopOp(double pos, const RGBA& color)\u0003Upp\vCOLORSTOPOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\u0000T\u0001\u0000\u0000\"\u0000\u0000\u0000T\u0001\u0000\u0000\u0001\u0001\u0000\fClearStopsOp\avoid ()\u001FUpp::NilPainter::ClearStopsOp()\u0013void ClearStopsOp()\u0003Upp\fCLEARSTOPSOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0001\u0000\u0000'\u0000\u0000\u0000U\u0001\u0000\u0000\u0001\u0001\u0000\tOpacityOp\rvoid (double)\"Upp::NilPainter::OpacityOp(double)\u0018void OpacityOp(double o)\u0003Upp\tOPACITYOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000V\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0001\u0000\u0000*\u0000\u0000\u0000V\u0001\u0000\u0000\u0001\u0001\u0000\tLineCapOp\nvoid (int)\u001FUpp::NilPainter::LineCapOp(int)\u001Bvoid LineCapOp(int linecap)\u0003Upp\tLINECAPOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000\u0000\u0000W\u0001\u0000\u0000,\u0000\u0000\u0000W\u0001\u0000\u0000\u0001\u0001\u0000\nLineJoinOp\nvoid (int) Upp::NilPainter::LineJoinOp(int)\u001Dvoid LineJoinOp(int linejoin)\u0003Upp\nLINEJOINOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000X\u0001\u0000\u0000\u0000\u0000\u0000\u0000X\u0001\u0000\u0000*\u0000\u0000\u0000X\u0001\u0000\u0000\u0001\u0001\u0000\fMiterLimitOp\rvoid (double)%Upp::NilPainter::MiterLimitOp(double)\u001Bvoid MiterLimitOp(double l)\u0003Upp\fMITERLIMITOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000\u0000\u0000\u0000Y\u0001\u0000\u0000+\u0000\u0000\u0000Y\u0001\u0000\u0000\u0001\u0001\u0000\tEvenOddOp\vvoid (bool) Upp::NilPainter::EvenOddOp(bool)\u001Cvoid EvenOddOp(bool evenodd)\u0003Upp\tEVENODDOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000Z\u0001\u0000\u0000\u0000\u0000\u0000\u0000Z\u0001\u0000\u0000)\u0000\u0000\u0000Z\u0001\u0000\u0000\u0001\u0001\u0000\bInvertOp\vvoid (bool)\u001FUpp::NilPainter::InvertOp(bool)\u001Avoid InvertOp(bool invert)\u0003Upp\bINVERTOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000[\u0001\u0000\u0000\u0000\u0000\u0000\u0000[\u0001\u0000\u0000-\u0000\u0000\u0000[\u0001\u0000\u0000\u0001\u0001\u0000\rImageFilterOp\nvoid (int)#Upp::NilPainter::ImageFilterOp(int)\u001Evoid ImageFilterOp(int filter)\u0003Upp\rIMAGEFILTEROP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000D\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0001\u0000\u0006DashOp%void (const Vector<double> &, double)-Upp::NilPainter::DashOp(const Vector&,double)5void DashOp(const Vector<double>& dash, double start)\u0003Upp\u0006DASHOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000\u0000\u0000]\u0001\u0000\u00001\u0000\u0000\u0000]\u0001\u0000\u0000\u0001\u0001\u0000\vTransformOp\u0016void (const Xform2D &),Upp::NilPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000^\u0001\u0000\u0000\u0000\u0000\u0000\u0000^\u0001\u0000\u0000\u001D\u0000\u0000\u0000^\u0001\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u001AUpp::NilPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000_\u0001\u0000\u0000\u0000\u0000\u0000\u0000_\u0001\u0000\u0000\u001B\u0000\u0000\u0000_\u0001\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u0018Upp::NilPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000`\u0001\u0000\u0000\u0000\u0000\u0000\u0000`\u0001\u0000\u0000!\u0000\u0000\u0000`\u0001\u0000\u0000\u0001\u0001\u0000\vBeginMaskOp\avoid ()\u001EUpp::NilPainter::BeginMaskOp()\u0012void BeginMaskOp()\u0003Upp\vBEGINMASKOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000a\u0001\u0000\u0000\u0000\u0000\u0000\u0000a\u0001\u0000\u0000/\u0000\u0000\u0000a\u0001\u0000\u0000\u0001\u0001\u0000\rBeginOnPathOp\u0013void (double, bool)+Upp::NilPainter::BeginOnPathOp(double,bool) void BeginOnPathOp(double, bool)\u0003Upp\rBEGINONPATHOP\u000FUpp::NilPainter\u000FUPP::NILPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u000E\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u0002\u0000\u0000\u0000e\u0001\u0000\u0000\u0001\u0000\u0000\fImagePainter\u0010void (Size, int))Upp::ImagePainter::ImagePainter(Size,int)2ImagePainter(Size sz, int mode = MODE_ANTIALIASED)\u0003Upp\fIMAGEPAINTER\u0011Upp::ImagePainter\u0011UPP::IMAGEPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u000E\u0000\u0000\u0000g\u0001\u0000\u0000\u0000\u0000\u0000\u0000g\u0001\u0000\u0000\u0002\u0000\u0000\u0000i\u0001\u0000\u0000\u0001\u0000\u0000\fImagePainter\u0014void (int, int, int),Upp::ImagePainter::ImagePainter(int,int,int)9ImagePainter(int cx, int cy, int mode = MODE_ANTIALIASED)\u0003Upp\fIMAGEPAINTER\u0011Upp::ImagePainter\u0011UPP::IMAGEPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000k\u0001\u0000\u0000\u0000\u0000\u0000\u0000k\u0001\u0000\u0000\u0002\u0000\u0000\u0000m\u0001\u0000\u0000\u0001\u0000\u0000\vDrawPainter\u0018void (Draw &, Size, int)-Upp::DrawPainter::DrawPainter(Draw&,Size,int):DrawPainter(Draw& w, Size sz, int mode = MODE_ANTIALIASED)\u0003Upp\vDRAWPAINTER\u0010Upp::DrawPainter\u0010UPP::DRAWPAINTER\u0000\u0000\u0019\u0000\u0000\u0000\r\u0000\u0000\u0000o\u0001\u0000\u0000\u0000\u0000\u0000\u0000o\u0001\u0000\u0000\u0001\u0000\u0000\u0000t\u0001\u0000\u0000\u0001\u0000\u0000\f~DrawPainter\u0010void () noexcept\u0015Upp::DrawPainter::~()\u000E~DrawPainter()\u0003Upp\f~DRAWPAINTER\u0010Upp::DrawPainter\u0010UPP::DRAWPAINTER\u0000\u0000end\u0000ôW\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\SvgArc.cpp","value":"data\u0004\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0006DoArc0&void (double, double, const Xform2D &)2Upp::Painter::DoArc0(double,double,const Xform2D&)<void DoArc0(double theta, double th_sweep, const Xform2D& m)\u0003Upp\u0006DOARC0\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0005DoArc=void (const Pointf &, const Pointf &, double, double, double)EUpp::Painter::DoArc(const Pointf&,const Pointf&,double,double,double)Wvoid DoArc(const Pointf& c, const Pointf& r, double angle, double sweep, double xangle)\u0003Upp\u0005DOARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\bDoSvgArcGvoid (const Pointf &, double, int, int, const Pointf &, const Pointf &)PUpp::Painter::DoSvgArc(const Pointf&,double,int,int,const Pointf&,const Pointf&)hvoid DoSvgArc(const Pointf& rr, double xangle, int large, int sweep, const Pointf& p1, const Pointf& p0)\u0003Upp\bDOSVGARC\fUpp::Painter\fUPP::PAINTER\u0000\u0000end\u0000g\u0003\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\PainterPath.cpp","value":"data\u0003\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0004Path\u0014Painter &(CParser &)\u001CUpp::Painter::Path(CParser&)\u0019Painter& Path(CParser& p)\u0003Upp\u0004PATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0004Path\u0017Painter &(const char *)\u001FUpp::Painter::Path(const char*)\u001FPainter& Path(const char *path)\u0003Upp\u0004PATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000end\u0000?\u0001\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\DrawOp.cpp","value":"data\u0016\u0015\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0001\u0000\aGetInfo\u000Edword () const\u001CUpp::Painter::GetInfo()const\u0015dword GetInfo() const\u0003Upp\aGETINFO\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0001\u0000\bOffsetOp\fvoid (Point)\u001DUpp::Painter::OffsetOp(Point)\u0016void OffsetOp(Point p)\u0003Upp\bOFFSETOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\bRectPath\u001DPainter &(int, int, int, int)'Upp::Painter::RectPath(int,int,int,int)/Painter& RectPath(int x, int y, int cx, int cy)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\bRectPath\u0017Painter &(const Rect &)#Upp::Painter::RectPath(const Rect&) Painter& RectPath(const Rect& r)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\bRectPath)Painter &(double, double, double, double)3Upp::Painter::RectPath(double,double,double,double);Painter& RectPath(double x, double y, double cx, double cy)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\bRectPath\u0018Painter &(const Rectf &)$Upp::Painter::RectPath(const Rectf&)!Painter& RectPath(const Rectf& r)\u0003Upp\bRECTPATH\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\u0013bool (const Rect &)!Upp::Painter::ClipOp(const Rect&)\u001Abool ClipOp(const Rect& r)\u0003Upp\u0006CLIPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0001\u0000\tClipoffOp\u0013bool (const Rect &)$Upp::Painter::ClipoffOp(const Rect&)\u001Dbool ClipoffOp(const Rect& r)\u0003Upp\tCLIPOFFOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0001\u0000\rExcludeClipOp\u0013bool (const Rect &)(Upp::Painter::ExcludeClipOp(const Rect&)!bool ExcludeClipOp(const Rect& r)\u0003Upp\rEXCLUDECLIPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0001\u0000\u000FIntersectClipOp\u0013bool (const Rect &)*Upp::Painter::IntersectClipOp(const Rect&)#bool IntersectClipOp(const Rect& r)\u0003Upp\u000FINTERSECTCLIPOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0001\u0000\fIsPaintingOp\u0019bool (const Rect &) const,Upp::Painter::IsPaintingOp(const Rect&)const&bool IsPaintingOp(const Rect& r) const\u0003Upp\fISPAINTINGOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000N\u0000\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0001\u0000\nDrawRectOp void (int, int, int, int, Color)/Upp::Painter::DrawRectOp(int,int,int,int,Color):void DrawRectOp(int x, int y, int cx, int cy, Color color)\u0003Upp\nDRAWRECTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0001\u0000\vDrawImageOp=void (int, int, int, int, const Image &, const Rect &, Color)IUpp::Painter::DrawImageOp(int,int,int,int,const Image&,const Rect&,Color)`void DrawImageOp(int x, int y, int cx, int cy, const Image& image, const Rect& src, Color color)\u0003Upp\vDRAWIMAGEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u000EDrawLineStroke\u0011void (int, Color)'Upp::Painter::DrawLineStroke(int,Color)+void DrawLineStroke(int width, Color color)\u0003Upp\u000EDRAWLINESTROKE\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\nDrawLineOp%void (int, int, int, int, int, Color)3Upp::Painter::DrawLineOp(int,int,int,int,int,Color)Gvoid DrawLineOp(int x1, int y1, int x2, int y2, int width, Color color)\u0003Upp\nDRAWLINEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0012DrawPolyPolylineOp>void (const Point *, int, const int *, int, int, Color, Color)QUpp::Painter::DrawPolyPolylineOp(const Point*,int,const int*,int,int,Color,Color)ÿ\u0000\u0000\u0000void DrawPolyPolylineOp(const Point *vertices, int vertex_count, const int *counts, int count_count, int width, Color color, Color doxor)\u0003Upp\u0012DRAWPOLYPOLYLINEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000·\u0000\u0000\u0000\u0001\u0001\u0000\u0015DrawPolyPolyPolygonOp_void (const Point *, int, const int *, int, const int *, int, Color, int, Color, uint64, Color)pUpp::Painter::DrawPolyPolyPolygonOp(const Point*,int,const int*,int,const int*,int,Color,int,Color,uint64,Color)ÿÜ\u0000\u0000\u0000void DrawPolyPolyPolygonOp(const Point *vertices, int vertex_count, const int *subpolygon_counts, int scc, const int *disjunct_polygon_counts, int dpcc, Color color, int width, Color outline, uint64 pattern, Color doxor)\u0003Upp\u0015DRAWPOLYPOLYPOLYGONOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000¹\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ç\u0000\u0000\u0000\u0001\u0001\u0000\tDrawArcOp-void (const Rect &, Point, Point, int, Color):Upp::Painter::DrawArcOp(const Rect&,Point,Point,int,Color)Nvoid DrawArcOp(const Rect& rc, Point start, Point end, int width, Color color)\u0003Upp\tDRAWARCOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000É\u0000\u0000\u0000\u0000\u0000\u0000\u0000É\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0001\u0000\rDrawEllipseOp&void (const Rect &, Color, int, Color)8Upp::Painter::DrawEllipseOp(const Rect&,Color,int,Color)Gvoid DrawEllipseOp(const Rect& r, Color color, int pen, Color pencolor)\u0003Upp\rDRAWELLIPSEOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0001\u0000\nDrawTextOpBvoid (int, int, int, const wchar *, Font, Color, int, const int *)LUpp::Painter::DrawTextOp(int,int,int,const wchar*,Font,Color,int,const int*)gvoid DrawTextOp(int x, int y, int angle, const wchar *text, Font font, Color ink, int n, const int *dx)\u0003Upp\nDRAWTEXTOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000ç\u0000\u0000\u0000\u0000\u0000\u0000\u0000ç\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0001\u0000\u000EDrawPaintingOp%void (const Rect &, const Painting &)9Upp::Painter::DrawPaintingOp(const Rect&,const Painting&):void DrawPaintingOp(const Rect& target, const Painting& p)\u0003Upp\u000EDRAWPAINTINGOP\fUpp::Painter\fUPP::PAINTER\u0000\u0000end\u0000\u0013\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Painting.cpp","value":"data-\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0001\u0000\aClearOp\u0013void (const RGBA &)*Upp::PaintingPainter::ClearOp(const RGBA&)\u001Fvoid ClearOp(const RGBA& color)\u0003Upp\aCLEAROP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool)0Upp::PaintingPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool)0Upp::PaintingPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)CUpp::PaintingPainter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)5Upp::PaintingPainter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)MUpp::PaintingPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool)?Upp::PaintingPainter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)KUpp::PaintingPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)QUpp::PaintingPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0001\u0000\aCloseOp\avoid ()\u001FUpp::PaintingPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0001\u0000\u0005DivOp\avoid ()\u001DUpp::PaintingPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOp\u0013void (const RGBA &))Upp::PaintingPainter::FillOp(const RGBA&)\u001Evoid FillOp(const RGBA& color)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOp,void (const Image &, const Xform2D &, dword)?Upp::PaintingPainter::FillOp(const Image&,const Xform2D&,dword)Evoid FillOp(const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000]\u0000\u0000\u0000\u0000\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOpFvoid (const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)UUpp::PaintingPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)bvoid FillOp(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOp7void (const RGBA &, const RGBA &, const Xform2D &, int)HUpp::PaintingPainter::FillOp(const RGBA&,const RGBA&,const Xform2D&,int)Wvoid FillOp(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000q\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOpGvoid (const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)VUpp::PaintingPainter::FillOp(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)hvoid FillOp(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOpOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)_Upp::PaintingPainter::StrokeOp(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)xvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOpNvoid (const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)\\Upp::PaintingPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)jvoid FillOp(const Pointf& f, const RGBA& color1, const Pointf& p, double r, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOp\u001Bvoid (double, const RGBA &)2Upp::PaintingPainter::StrokeOp(double,const RGBA&).void StrokeOp(double width, const RGBA& color)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000£\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOp4void (double, const Image &, const Xform2D &, dword)HUpp::PaintingPainter::StrokeOp(double,const Image&,const Xform2D&,dword)Uvoid StrokeOp(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000¥\u0000\u0000\u0000\u0000\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOpNvoid (double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)^Upp::PaintingPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)rvoid StrokeOp(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000º\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOp?void (double, const RGBA &, const RGBA &, const Xform2D &, int)QUpp::PaintingPainter::StrokeOp(double,const RGBA&,const RGBA&,const Xform2D&,int)gvoid StrokeOp(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000¼\u0000\u0000\u0000\u0000\u0000\u0000\u0000¼\u0000\u0000\u0000\u0001\u0000\u0000\u0000È\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOpVvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)eUpp::PaintingPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)zvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const Pointf& p, double r, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ê\u0000\u0000\u0000\u0001\u0000\u0000\u0000Í\u0000\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\avoid ()\u001EUpp::PaintingPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ï\u0000\u0000\u0000\u0001\u0000\u0000\u0000Õ\u0000\u0000\u0000\u0001\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)9Upp::PaintingPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000×\u0000\u0000\u0000\u0000\u0000\u0000\u0000×\u0000\u0000\u0000\u0001\u0000\u0000\u0000ã\u0000\u0000\u0000\u0001\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)OUpp::PaintingPainter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000å\u0000\u0000\u0000\u0000\u0000\u0000\u0000å\u0000\u0000\u0000\u0001\u0000\u0000\u0000ê\u0000\u0000\u0000\u0001\u0001\u0000\vColorStopOp\u001Bvoid (double, const RGBA &)5Upp::PaintingPainter::ColorStopOp(double,const RGBA&)/void ColorStopOp(double pos, const RGBA& color)\u0003Upp\vCOLORSTOPOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000ì\u0000\u0000\u0000\u0000\u0000\u0000\u0000ì\u0000\u0000\u0000\u0001\u0000\u0000\u0000ï\u0000\u0000\u0000\u0001\u0001\u0000\fClearStopsOp\avoid ()$Upp::PaintingPainter::ClearStopsOp()\u0013void ClearStopsOp()\u0003Upp\fCLEARSTOPSOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0000\u0000\u0000\u0000ñ\u0000\u0000\u0000\u0001\u0000\u0000\u0000õ\u0000\u0000\u0000\u0001\u0001\u0000\tOpacityOp\rvoid (double)'Upp::PaintingPainter::OpacityOp(double)\u0018void OpacityOp(double o)\u0003Upp\tOPACITYOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000÷\u0000\u0000\u0000\u0000\u0000\u0000\u0000÷\u0000\u0000\u0000\u0001\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0001\u0000\tLineCapOp\nvoid (int)$Upp::PaintingPainter::LineCapOp(int)\u001Bvoid LineCapOp(int linecap)\u0003Upp\tLINECAPOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000ý\u0000\u0000\u0000\u0000\u0000\u0000\u0000ý\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0001\u0001\u0000\nLineJoinOp\nvoid (int)%Upp::PaintingPainter::LineJoinOp(int)\u001Dvoid LineJoinOp(int linejoin)\u0003Upp\nLINEJOINOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0001\u0000\u0000\u0000\a\u0001\u0000\u0000\u0001\u0001\u0000\fMiterLimitOp\rvoid (double)*Upp::PaintingPainter::MiterLimitOp(double)\u001Bvoid MiterLimitOp(double l)\u0003Upp\fMITERLIMITOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0001\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0001\u0000\tEvenOddOp\vvoid (bool)%Upp::PaintingPainter::EvenOddOp(bool)\u001Cvoid EvenOddOp(bool evenodd)\u0003Upp\tEVENODDOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0001\u0001\u0000\bInvertOp\vvoid (bool)$Upp::PaintingPainter::InvertOp(bool)\u001Avoid InvertOp(bool invert)\u0003Upp\bINVERTOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0001\u0001\u0000\rImageFilterOp\nvoid (int)(Upp::PaintingPainter::ImageFilterOp(int)\u001Evoid ImageFilterOp(int filter)\u0003Upp\rIMAGEFILTEROP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0001\u0000\u0006DashOp%void (const Vector<double> &, double)2Upp::PaintingPainter::DashOp(const Vector&,double)5void DashOp(const Vector<double>& dash, double start)\u0003Upp\u0006DASHOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000$\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0001\u0000\u0000\u0001\u0000\u0000\u0000(\u0001\u0000\u0000\u0001\u0001\u0000\vTransformOp\u0016void (const Xform2D &)1Upp::PaintingPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000*\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0000-\u0001\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u001FUpp::PaintingPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u001DUpp::PaintingPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0000\u00007\u0001\u0000\u0000\u0001\u0001\u0000\vBeginMaskOp\avoid ()#Upp::PaintingPainter::BeginMaskOp()\u0012void BeginMaskOp()\u0003Upp\vBEGINMASKOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0001\u0000\u0000\u0001\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0001\u0000\rBeginOnPathOp\u0013void (double, bool)0Upp::PaintingPainter::BeginOnPathOp(double,bool)&void BeginOnPathOp(double q, bool abs)\u0003Upp\rBEGINONPATHOP\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u001A\u0000\u0000\u0000@\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0001\u0000\u0000\u0001\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\tGetResult\vPainting ()!Upp::PaintingPainter::GetResult()\u0014Painting GetResult()\u0003Upp\tGETRESULT\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000I\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0001\u0000\u0000\u0001\u0000\u0000\u0000N\u0001\u0000\u0000\u0001\u0000\u0000\u0006Create\u0015void (double, double)+Upp::PaintingPainter::Create(double,double)!void Create(double cx, double cy)\u0003Upp\u0006CREATE\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000P\u0001\u0000\u0000\u0000\u0000\u0000\u0000P\u0001\u0000\u0000\u0001\u0000\u0000\u0000S\u0001\u0000\u0000\u0001\u0000\u0000\u0006Create\fvoid (Sizef)#Upp::PaintingPainter::Create(Sizef)\u0015void Create(Sizef sz)\u0003Upp\u0006CREATE\u0014Upp::PaintingPainter\u0014UPP::PAINTINGPAINTER\u0000\u0000end\u0000T)\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\PaintPainting.cpp","value":"data\u000E\u001E\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0004sGet\u001Avoid (T &, StringStream &)\u001BUpp::sGet(T&,StringStream&)4template <class T> void sGet(T& r, StringStream& ss)\u0003Upp\u0004SGET\u0003Upp\u0003UPP\u0000\u0000\u001E\u0000\u0000\u0000\u0002\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0004sGet\u0012T (StringStream &)\u0018Upp::sGet(StringStream&)+template <class T> T sGet(StringStream& ss)\u0003Upp\u0004SGET\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0005Paint\u0017void (const Painting &)$Upp::Painter::Paint(const Painting&)\u001Fvoid Paint(const Painting& pic)\u0003Upp\u0005PAINT\fUpp::Painter\fUPP::PAINTER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0001\u0000\u0000\u0000 \u0001\u0000\u0000\u0001\u0000\u0000\u001APaintImageBufferPaintingFn8void (ImageBuffer &, const Painting &, Size, Point, int)LUpp::PaintImageBufferPaintingFn(ImageBuffer&,const Painting&,Size,Point,int)avoid PaintImageBufferPaintingFn(ImageBuffer& ib, const Painting& p, Size sz, Point pos, int mode)\u0003Upp\u001APAINTIMAGEBUFFERPAINTINGFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\"\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0001\u0000\u0000\u0001\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u0019PaintImageBufferDrawingFn*void (ImageBuffer &, const Drawing &, int)?Upp::PaintImageBufferDrawingFn(ImageBuffer&,const Drawing&,int)Lvoid PaintImageBufferDrawingFn(ImageBuffer& ib, const Drawing& iw, int mode)\u0003Upp\u0019PAINTIMAGEBUFFERDRAWINGFN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0001\u0000\u0000e\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000\u0000\u0015RegisterPaintingFns__ÿ \u0000\u0000\u0000void (void (*)(ImageBuffer &, const Painting &, Size, Point, int), void (*)(ImageBuffer &, const Drawing &, int), Image (*)(Point, int, int, Font, Color, Size))ÿ¡\u0000\u0000\u0000Upp::RegisterPaintingFns__(void(*)(ImageBuffer&,const Painting&,Size,Point,int),void(*)(ImageBuffer&,const Drawing&,int),Image(*)(Point,int,int,Font,Color,Size))ÿ·\u0000\u0000\u0000void RegisterPaintingFns__(void (*ig)(ImageBuffer&, const Painting&, Size, Point, int), void (*iw)(ImageBuffer&, const Drawing&, int), Image (*rg)(Point, int, int, Font, Color, Size))\u0003Upp\u0015REGISTERPAINTINGFNS__\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0001\u0000\u0000B\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u0000\u0000\u0013ImageAnyDrawPainter)void (Draw *(*)(Size), Image (*)(Draw *))8Upp::ImageAnyDrawPainter(Draw*(*)(Size),Image(*)(Draw*))>void ImageAnyDrawPainter(Draw *(*f)(Size), Image (*e)(Draw *))\u0003Upp\u0013IMAGEANYDRAWPAINTER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\u00004\u0001\u0000\u0000\u0001\u0000\u0001\u0003sCP\fDraw *(Size)\u000EUpp::sCP(Size)\u0019static Draw *sCP(Size sz)\u0003Upp\u0003SCP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u00006\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0001\u0000\u0000\u0001\u0000\u0000\u0000:\u0001\u0000\u0000\u0001\u0000\u0001\u0003sEP\u000EImage (Draw *)\u000FUpp::sEP(Draw*)\u0019static Image sEP(Draw *w)\u0003Upp\u0003SEP\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000<\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0000D\u0001\u0000\u0000\u0001\u0000\u0001\fsRenderGlyph*Image (Point, int, int, Font, Color, Size)0Upp::sRenderGlyph(Point,int,int,Font,Color,Size)Wstatic Image sRenderGlyph(Point at, int angle, int chr, Font fnt, Color color, Size sz)\u0003Upp\fSRENDERGLYPH\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000J\u0001\u0000\u0000\u0001\u0000\u0000\u001DPaintPainting__initializer_fn\avoid ()$Upp::PaintPainting__initializer_fn()$void PaintPainting__initializer_fn()\u0003Upp\u001DPAINTPAINTING__INITIALIZER_FN\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000\u001A\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u001APaintPainting__initializer\avoid ()!Upp::PaintPainting__initializer()!void PaintPainting__initializer()\u0003Upp\u001APAINTPAINTING__INITIALIZER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0001\u0000\u0000\u001A\u0000\u0000\u0000F\u0001\u0000\u0000\u0000\u0000\u0000\u001DPaintPainting__initializer_fn\avoid ()$Upp::PaintPainting__initializer_fn()$void PaintPainting__initializer_fn()\u0003Upp\u001DPAINTPAINTING__INITIALIZER_FN\u0003Upp\u0003UPP\u0000\u0000end\u0000\v\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\PainterInit.icpp","value":"data\u0001end\u0000\t\u0000\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Xform2D.cpp","value":"data\u0012\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\nGetScaleXY\u000FPointf () const\u001FUpp::Xform2D::GetScaleXY()const\u0019Pointf GetScaleXY() const\u0003Upp\nGETSCALEXY\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\bGetScale\u000Fdouble () const\u001DUpp::Xform2D::GetScale()const\u0017double GetScale() const\u0003Upp\bGETSCALE\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\aEpsqual\u0015bool (double, double)\u001BUpp::Epsqual(double,double) bool Epsqual(double x, double y)\u0003Upp\aEPSQUAL\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\tIsRegular\rbool () const\u001EUpp::Xform2D::IsRegular()const\u0016bool IsRegular() const\u0003Upp\tISREGULAR\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0018\u0000\u0000\u0000\t\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\aXform2D\avoid ()\u0017Upp::Xform2D::Xform2D()\tXform2D()\u0003Upp\aXFORM2D\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\toperator**Xform2D (const Xform2D &, const Xform2D &)-Upp::operator*(const Xform2D&,const Xform2D&)5Xform2D operator*(const Xform2D& a, const Xform2D& b)\u0003Upp\tOPERATOR*\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\vTranslation\u0018Xform2D (double, double)(Upp::Xform2D::Translation(double,double)'Xform2D Translation(double x, double y)\u0003Upp\vTRANSLATION\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0005Scale\u0018Xform2D (double, double)\"Upp::Xform2D::Scale(double,double)#Xform2D Scale(double sx, double sy)\u0003Upp\u0005SCALE\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0005Scale\u0010Xform2D (double)\u001BUpp::Xform2D::Scale(double)\u001BXform2D Scale(double scale)\u0003Upp\u0005SCALE\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\bRotation\u0010Xform2D (double)\u001EUpp::Xform2D::Rotation(double)\u001BXform2D Rotation(double fi)\u0003Upp\bROTATION\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0005Sheer\u0010Xform2D (double)\u001BUpp::Xform2D::Sheer(double)\u0018Xform2D Sheer(double fi)\u0003Upp\u0005SHEER\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0006SheerX\u0010Xform2D (double)\u001CUpp::Xform2D::SheerX(double)\u0019Xform2D SheerX(double fi)\u0003Upp\u0006SHEERX\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\bIdentity\nXform2D ()\u0018Upp::Xform2D::Identity()\u0012Xform2D Identity()\u0003Upp\bIDENTITY\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\u0003Map Xform2D (Pointf, Pointf, Pointf)'Upp::Xform2D::Map(Pointf,Pointf,Pointf),Xform2D Map(Pointf s1, Pointf s2, Pointf s3)\u0003Upp\u0003MAP\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000l\u0000\u0000\u0000\u0000\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0003Map8Xform2D (Pointf, Pointf, Pointf, Pointf, Pointf, Pointf)<Upp::Xform2D::Map(Pointf,Pointf,Pointf,Pointf,Pointf,Pointf)MXform2D Map(Pointf s1, Pointf s2, Pointf s3, Pointf t1, Pointf t2, Pointf t3)\u0003Upp\u0003MAP\fUpp::Xform2D\fUPP::XFORM2D\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000q\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\vDeterminant\u0018double (const Xform2D &) Upp::Determinant(const Xform2D&)$double Determinant(const Xform2D& m)\u0003Upp\vDETERMINANT\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u007F\u0000\u0000\u0000\u0001\u0000\u0000\aInverse\u0019Xform2D (const Xform2D &)\u001CUpp::Inverse(const Xform2D&)!Xform2D Inverse(const Xform2D& m)\u0003Upp\aINVERSE\u0003Upp\u0003UPP\u0000\u0000end\u0000ü\n\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Approximate.cpp","value":"data\u0005\b\u0000\u0000\u0000\f\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0001\nsQuadraticXvoid (LinearPathConsumer &, const Pointf &, const Pointf &, const Pointf &, double, int)YUpp::sQuadratic(LinearPathConsumer&,const Pointf&,const Pointf&,const Pointf&,double,int)wstatic void sQuadratic(LinearPathConsumer& t, const Pointf& p1, const Pointf& p2, const Pointf& p3, double qt, int lvl)\u0003Upp\nSQUADRATIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0014ApproximateQuadraticSvoid (LinearPathConsumer &, const Pointf &, const Pointf &, const Pointf &, double)_Upp::ApproximateQuadratic(LinearPathConsumer&,const Pointf&,const Pointf&,const Pointf&,double)xvoid ApproximateQuadratic(LinearPathConsumer& t, const Pointf& p1, const Pointf& p2, const Pointf& p3, double tolerance)\u0003Upp\u0014APPROXIMATEQUADRATIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0001\u0006sCubichvoid (LinearPathConsumer &, const Pointf &, const Pointf &, const Pointf &, const Pointf &, double, int)cUpp::sCubic(LinearPathConsumer&,const Pointf&,const Pointf&,const Pointf&,const Pointf&,double,int)ÿ\u0000\u0000\u0000static void sCubic(LinearPathConsumer& t, const Pointf& p1, const Pointf& p2, const Pointf& p3, const Pointf& p4, double qt, int lvl)\u0003Upp\u0006SCUBIC\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\u0010ApproximateCubiccvoid (LinearPathConsumer &, const Pointf &, const Pointf &, const Pointf &, const Pointf &, double)iUpp::ApproximateCubic(LinearPathConsumer&,const Pointf&,const Pointf&,const Pointf&,const Pointf&,double)ÿ\u0000\u0000\u0000void ApproximateCubic(LinearPathConsumer& t, const Pointf& p1, const Pointf& p2, const Pointf& p3, const Pointf& p4, double tolerance)\u0003Upp\u0010APPROXIMATECUBIC\u0003Upp\u0003UPP\u0000\u0000end\u00005\u0006\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Stroker.cpp","value":"data\nõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init6void (double, double, double, int, int, const Rectf &)=Upp::Stroker::Init(double,double,double,int,int,const Rectf&)pvoid Init(double width, double miterlimit, double tolerance, int _linecap, int _linejoin, const Rectf& preclip_)\u0003Upp\u0004INIT\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0001\u0000\u0004Move\u0015void (const Pointf &)!Upp::Stroker::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0005Round=void (const Pointf &, const Pointf &, const Pointf &, double)EUpp::Stroker::Round(const Pointf&,const Pointf&,const Pointf&,double)Ivoid Round(const Pointf& p, const Pointf& v1, const Pointf& v2, double r)\u0003Upp\u0005ROUND\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\nPreClipped\u0015bool (Pointf, Pointf)'Upp::Stroker::PreClipped(Pointf,Pointf)%bool PreClipped(Pointf p2, Pointf p3)\u0003Upp\nPRECLIPPED\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0004Line\u0015void (const Pointf &)!Upp::Stroker::Line(const Pointf&)\u001Bvoid Line(const Pointf& p3)\u0003Upp\u0004LINE\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0003CapUvoid (const Pointf &, const Pointf &, const Pointf &, const Pointf &, const Pointf &)XUpp::Stroker::Cap(const Pointf&,const Pointf&,const Pointf&,const Pointf&,const Pointf&)]void Cap(const Pointf& p, const Pointf& v, const Pointf& o, const Pointf& a, const Pointf& b)\u0003Upp\u0003CAP\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0006Finish\avoid ()\u0016Upp::Stroker::Finish()\rvoid Finish()\u0003Upp\u0006FINISH\fUpp::Stroker\fUPP::STROKER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000±\u0000\u0000\u0000\u0000\u0000\u0000\u0000±\u0000\u0000\u0000\u0001\u0000\u0000\u0000µ\u0000\u0000\u0000\u0001\u0001\u0000\u0003End\avoid ()\u0013Upp::Stroker::End()\nvoid End()\u0003Upp\u0003END\fUpp::Stroker\fUPP::STROKER\u0000\u0000end\u0000¸\u0006\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Dasher.cpp","value":"data\u0005\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0003Put\u0015void (const Pointf &)\u001FUpp::Dasher::Put(const Pointf&)\u0019void Put(const Pointf& p)\u0003Upp\u0003PUT\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0001\u0000\u0004Move\u0015void (const Pointf &) Upp::Dasher::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0001\u0000\u0004Line\u0015void (const Pointf &) Upp::Dasher::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\vUpp::Dasher\vUPP::DASHER\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init%void (const Vector<double> &, double)'Upp::Dasher::Init(const Vector&,double)3void Init(const Vector<double>& p, double distance)\u0003Upp\u0004INIT\vUpp::Dasher\vUPP::DASHER\u0000\u0000end\u0000\u0002\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Transformer.cpp","value":"data\u0005\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0001\u0000\u0003End\avoid ()\u001EUpp::LinearPathConsumer::End()\nvoid End()\u0003Upp\u0003END\u0017Upp::LinearPathConsumer\u0017UPP::LINEARPATHCONSUMER\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0001\u0000\u0003End\avoid ()\u001CUpp::LinearPathFilter::End()\nvoid End()\u0003Upp\u0003END\u0015Upp::LinearPathFilter\u0015UPP::LINEARPATHFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0001\u0000\u0004Move\u0015void (const Pointf &)%Upp::Transformer::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\u0010Upp::Transformer\u0010UPP::TRANSFORMER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0001\u0000\u0004Line\u0015void (const Pointf &)%Upp::Transformer::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\u0010Upp::Transformer\u0010UPP::TRANSFORMER\u0000\u0000end\u0000q\u0002\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Rasterizer.cpp","value":"data\fõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0019\u0000\u0000\u0000\b\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\u0015void (int, int, bool)%Upp::Rasterizer::Create(int,int,bool)*void Create(int cx, int cy, bool subpixel)\u0003Upp\u0006CREATE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0004Free\avoid ()\u0017Upp::Rasterizer::Free()\vvoid Free()\u0003Upp\u0004FREE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0004Init\avoid ()\u0017Upp::Rasterizer::Init()\vvoid Init()\u0003Upp\u0004INIT\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0005Reset\avoid ()\u0018Upp::Rasterizer::Reset()\fvoid Reset()\u0003Upp\u0005RESET\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\aSetClip\u0014void (const Rectf &)&Upp::Rasterizer::SetClip(const Rectf&)\u001Fvoid SetClip(const Rectf& rect)\u0003Upp\aSETCLIP\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u001E\u0000\u0000\u0000S\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\bAddCells\u001CRasterizer::Cell *(int, int)\"Upp::Rasterizer::AddCells(int,int)(Rasterizer::Cell *AddCells(int y, int n)\u0003Upp\bADDCELLS\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000l\u0000\u0000\u0000\u0000\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0000\u0000\u0000×\u0000\u0000\u0000\u0001\u0000\u0000\vRenderHLine\u001Evoid (int, int, int, int, int)1Upp::Rasterizer::RenderHLine(int,int,int,int,int)8void RenderHLine(int ey, int x1, int y1, int x2, int y2)\u0003Upp\vRENDERHLINE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ù\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0001\u0000\u0000\u0001\u0000\u0000\aLineRaw\u0019void (int, int, int, int))Upp::Rasterizer::LineRaw(int,int,int,int),void LineRaw(int x1, int y1, int x2, int y2)\u0003Upp\aLINERAW\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0001\u0000\u0000!\u0000\u0000\u0000U\u0001\u0000\u0000\u0001\u0001\u0000\u0003End\avoid ()\u001EUpp::Rasterizer::Filler::End()\nvoid End()\u0003Upp\u0003END\u0017Upp::Rasterizer::Filler\u0017UPP::RASTERIZER::FILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000\u0000\u0000W\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0006Render&void (int, Rasterizer::Filler &, bool)5Upp::Rasterizer::Render(int,Rasterizer::Filler&,bool)7void Render(int y, Rasterizer::Filler& g, bool evenodd)\u0003Upp\u0006RENDER\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000end\u0000\u0006\a\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\RasterizerClip.cpp","value":"data\u0006õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0006CvLine%void (double, double, double, double)4Upp::Rasterizer::CvLine(double,double,double,double)7void CvLine(double x1, double y1, double x2, double y2)\u0003Upp\u0006CVLINE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\bLineClip%void (double, double, double, double)6Upp::Rasterizer::LineClip(double,double,double,double)9void LineClip(double x1, double y1, double x2, double y2)\u0003Upp\bLINECLIP\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0001\u0000\u0004Move\u0015void (const Pointf &)$Upp::Rasterizer::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000a\u0000\u0000\u0000\u0000\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0001\u0000\u0004Line\u0015void (const Pointf &)$Upp::Rasterizer::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\u000FUpp::Rasterizer\u000FUPP::RASTERIZER\u0000\u0000end\u0000`\u0003\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\RenderChar.cpp","value":"data\u0015\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\fGlyphPainter\u0011Upp::GlyphPainter\u0011Upp::GlyphPainter-GlyphPainter : NilPainter, LinearPathConsumer\u0003Upp\fGLYPHPAINTER\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER'Upp::NilPainter;Upp::LinearPathConsumer\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0005glyph\rVector<float>\u0018Upp::GlyphPainter::glyph\u0013Vector<float> glyph\u0003Upp\u0005GLYPH\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\ttolerance\u0006double\u001CUpp::GlyphPainter::tolerance\u0010double tolerance\u0003Upp\tTOLERANCE\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0018\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0003pos\u0006Pointf\u0016Upp::GlyphPainter::pos\nPointf pos\u0003Upp\u0003POS\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001A\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u001E\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0004move\u0006Pointf\u0017Upp::GlyphPainter::move\vPointf move\u0003Upp\u0004MOVE\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000+\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool)-Upp::GlyphPainter::LineOp(const Pointf&,bool)\"void LineOp(const Pointf& p, bool)\u0003Upp\u0006LINEOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000+\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool)-Upp::GlyphPainter::MoveOp(const Pointf&,bool)\"void MoveOp(const Pointf& p, bool)\u0003Upp\u0006MOVEOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000B\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)@Upp::GlyphPainter::QuadraticOp(const Pointf&,const Pointf&,bool)9void QuadraticOp(const Pointf& p1, const Pointf& p, bool)\u0003Upp\vQUADRATICOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000P\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)JUpp::GlyphPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Gvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool)\u0003Upp\aCUBICOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0017\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0001\u0000\aCloseOp\avoid ()\u001CUpp::GlyphPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000#\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0001\u0000\u0004Line\u0015void (const Pointf &)&Upp::GlyphPainter::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000#\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0004Move\u0015void (const Pointf &)&Upp::GlyphPainter::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0001\u0000\u0004Move\u0015void (const Pointf &)&Upp::GlyphPainter::Move(const Pointf&)\u001Avoid Move(const Pointf& p)\u0003Upp\u0004MOVE\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0001\u0000\u0004Line\u0015void (const Pointf &)&Upp::GlyphPainter::Line(const Pointf&)\u001Avoid Line(const Pointf& p)\u0003Upp\u0004LINE\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool)-Upp::GlyphPainter::MoveOp(const Pointf&,bool)\"void MoveOp(const Pointf& p, bool)\u0003Upp\u0006MOVEOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool)-Upp::GlyphPainter::LineOp(const Pointf&,bool)\"void LineOp(const Pointf& p, bool)\u0003Upp\u0006LINEOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)@Upp::GlyphPainter::QuadraticOp(const Pointf&,const Pointf&,bool)9void QuadraticOp(const Pointf& p1, const Pointf& p, bool)\u0003Upp\vQUADRATICOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)JUpp::GlyphPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Gvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool)\u0003Upp\aCUBICOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0001\u0000\aCloseOp\avoid ()\u001CUpp::GlyphPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0011Upp::GlyphPainter\u0011UPP::GLYPHPAINTER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u000FApproximateChar6void (LinearPathConsumer &, Pointf, int, Font, double)@Upp::ApproximateChar(LinearPathConsumer&,Pointf,int,Font,double)Zvoid ApproximateChar(LinearPathConsumer& t, Pointf at, int ch, Font fnt, double tolerance)\u0003Upp\u000FAPPROXIMATECHAR\u0003Upp\u0003UPP\u0000\u0000end\u0000U\u000F\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Fillers.h","value":"dataGõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0013S_PAINTER_FILLERS_H\u0000\u0013S_PAINTER_FILLERS_H\u0013S_PAINTER_FILLERS_H\u0000\u0013S_PAINTER_FILLERS_H\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\vSolidFiller\u0010Upp::SolidFiller\u0010Upp::SolidFiller SolidFiller : Rasterizer::Filler\u0003Upp\vSOLIDFILLER\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0017Upp::Rasterizer::Filler\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0006RGBA *\u0013Upp::SolidFiller::t\aRGBA *t\u0003Upp\u0001T\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0001c\u0004RGBA\u0013Upp::SolidFiller::c\u0006RGBA c\u0003Upp\u0001C\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0006invert\u0004bool\u0018Upp::SolidFiller::invert\vbool invert\u0003Upp\u0006INVERT\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u001F\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\u000Fvoid (int, int) Upp::SolidFiller::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0015\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\nvoid (int)\u001DUpp::SolidFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u001E\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u000Fvoid (int, int)!Upp::SolidFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\nSpanFiller\u000FUpp::SpanFiller\u000FUpp::SpanFiller\u001FSpanFiller : Rasterizer::Filler\u0003Upp\nSPANFILLER\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0017Upp::Rasterizer::Filler\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0006RGBA *\u0012Upp::SpanFiller::t\aRGBA *t\u0003Upp\u0001T\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0001s\fconst RGBA *\u0012Upp::SpanFiller::s\rconst RGBA *s\u0003Upp\u0001S\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0001y\u0003int\u0012Upp::SpanFiller::y\u0005int y\u0003Upp\u0001Y\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0006buffer\u0006RGBA *\u0017Upp::SpanFiller::buffer\fRGBA *buffer\u0003Upp\u0006BUFFER\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0002ss\fSpanSource *\u0013Upp::SpanFiller::ss\u000ESpanSource *ss\u0003Upp\u0002SS\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0005alpha\u0003int\u0016Upp::SpanFiller::alpha\tint alpha\u0003Upp\u0005ALPHA\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\u000Fvoid (int, int)\u001FUpp::SpanFiller::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\nvoid (int)\u001CUpp::SpanFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u000Fvoid (int, int) Upp::SpanFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u000ESubpixelFiller\u0013Upp::SubpixelFiller\u0013Upp::SubpixelFiller#SubpixelFiller : Rasterizer::Filler\u0003Upp\u000ESUBPIXELFILLER\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0017Upp::Rasterizer::Filler\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\asbuffer\aint16 *\u001CUpp::SubpixelFiller::sbuffer\u000Eint16 *sbuffer\u0003Upp\aSBUFFER\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0005begin\aint16 *\u001AUpp::SubpixelFiller::begin\fint16 *begin\u0003Upp\u0005BEGIN\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0006RGBA *\u0016Upp::SubpixelFiller::t\aRGBA *t\u0003Upp\u0001T\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0003end\u0006RGBA *\u0018Upp::SubpixelFiller::end\tRGBA *end\u0003Upp\u0003END\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0010\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0001v\aint16 *\u0016Upp::SubpixelFiller::v\bint16 *v\u0003Upp\u0001V\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0010\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0001s\u0006RGBA *\u0016Upp::SubpixelFiller::s\aRGBA *s\u0003Upp\u0001S\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\u0014\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0005color\u0004RGBA\u001AUpp::SubpixelFiller::color\nRGBA color\u0003Upp\u0005COLOR\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0011\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0002ss\fSpanSource *\u0017Upp::SubpixelFiller::ss\u000ESpanSource *ss\u0003Upp\u0002SS\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u0000\u0014\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0005alpha\u0003int\u001AUpp::SubpixelFiller::alpha\tint alpha\u0003Upp\u0005ALPHA\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0015\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0006buffer\u0006RGBA *\u001BUpp::SubpixelFiller::buffer\fRGBA *buffer\u0003Upp\u0006BUFFER\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u0010\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0001y\u0003int\u0016Upp::SubpixelFiller::y\u0005int y\u0003Upp\u0001Y\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\u0015\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0006invert\u0004bool\u001BUpp::SubpixelFiller::invert\vbool invert\u0003Upp\u0006INVERT\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0000\u0000\u0000\u0001\u0000\u0000\u0000)\u0000\u0000\u0000\u0014\u0000\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0005Write\nvoid (int)\u001FUpp::SubpixelFiller::Write(int)\u0013void Write(int len)\u0003Upp\u0005WRITE\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000$\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\aRenderN\u0014void (int, int, int))Upp::SubpixelFiller::RenderN(int,int,int)#void RenderN(int val, int h, int n)\u0003Upp\aRENDERN\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u001F\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\u000Fvoid (int, int)#Upp::SubpixelFiller::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000\u0015\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\nvoid (int) Upp::SubpixelFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u001E\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u000Fvoid (int, int)$Upp::SubpixelFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000/\u0000\u0000\u0000\v\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0001\u0000\u0003End\avoid ()\u001AUpp::SubpixelFiller::End()\nvoid End()\u0003Upp\u0003END\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u0000F\u0000\u0000\u0000\u0001\u0000\u0000\nClipFiller\u000FUpp::ClipFiller\u000FUpp::ClipFiller\u001FClipFiller : Rasterizer::Filler\u0003Upp\nCLIPFILLER\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0017Upp::Rasterizer::Filler\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u0000\u0014\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u0006buffer\fBuffer<byte>\u0017Upp::ClipFiller::buffer\u0013Buffer<byte> buffer\u0003Upp\u0006BUFFER\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u000F\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0006byte *\u0012Upp::ClipFiller::t\abyte *t\u0003Upp\u0001T\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u000F\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0001x\u0003int\u0012Upp::ClipFiller::x\u0005int x\u0003Upp\u0001X\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00006\u0000\u0000\u0000\u0010\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0002cx\u0003int\u0013Upp::ClipFiller::cx\u0006int cx\u0003Upp\u0002CX\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0012\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0004last\u0003int\u0015Upp::ClipFiller::last\bint last\u0003Upp\u0004LAST\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u00008\u0000\u0000\u0000\u0013\u0000\u0000\u00008\u0000\u0000\u0000\u0001\u0000\u0000\u0005lastn\u0006byte *\u0016Upp::ClipFiller::lastn\vbyte *lastn\u0003Upp\u0005LASTN\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0013\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0005empty\u0004bool\u0016Upp::ClipFiller::empty\nbool empty\u0003Upp\u0005EMPTY\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0006\u0000\u0000\u0000\u000E\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0012\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\u0004full\u0004bool\u0015Upp::ClipFiller::full\tbool full\u0003Upp\u0004FULL\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u001A\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0004Span\u000Fvoid (int, int)\u001EUpp::ClipFiller::Span(int,int)\u0019void Span(int c, int len)\u0003Upp\u0004SPAN\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u001D\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\nvoid (int)\u001CUpp::ClipFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\u0000?\u0000\u0000\u0000&\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u000Fvoid (int, int) Upp::ClipFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000#\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\u000Fvoid (int, int)\u001FUpp::ClipFiller::Start(int,int)\u001Avoid Start(int x, int len)\u0003Upp\u0005START\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000\u000F\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0005Clear\avoid ()\u0018Upp::ClipFiller::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000 \u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0006Finish\u0015void (ClippingLine &)&Upp::ClipFiller::Finish(ClippingLine&)\u001Dvoid Finish(ClippingLine& cl)\u0003Upp\u0006FINISH\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0014\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0004Init\nvoid (int)\u001AUpp::ClipFiller::Init(int)\u0011void Init(int cx)\u0003Upp\u0004INIT\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0000\u0010MaskFillerFilter\u0015Upp::MaskFillerFilter\u0015Upp::MaskFillerFilter%MaskFillerFilter : Rasterizer::Filler\u0003Upp\u0010MASKFILLERFILTER\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0017Upp::Rasterizer::Filler\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0016\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0014Rasterizer::Filler *\u0018Upp::MaskFillerFilter::t\u0015Rasterizer::Filler *t\u0003Upp\u0001T\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0019\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0004mask\fconst byte *\u001BUpp::MaskFillerFilter::mask\u0010const byte *mask\u0003Upp\u0004MASK\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u001A\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0005empty\u0003int\u001CUpp::MaskFillerFilter::empty\tint empty\u0003Upp\u0005EMPTY\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000L\u0000\u0000\u0000\u0019\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0004full\u0003int\u001BUpp::MaskFillerFilter::full\bint full\u0003Upp\u0004FULL\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\u0000N\u0000\u0000\u0000\u001F\u0000\u0000\u0000N\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\u000Fvoid (int, int)%Upp::MaskFillerFilter::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u001E\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u000Fvoid (int, int)&Upp::MaskFillerFilter::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0015\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\nvoid (int)\"Upp::MaskFillerFilter::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0019\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0001\u0000\u0003End\avoid ()\u001CUpp::MaskFillerFilter::End()\nvoid End()\u0003Upp\u0003END\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000V\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set)void (Rasterizer::Filler *, const byte *);Upp::MaskFillerFilter::Set(Rasterizer::Filler*,const byte*).void Set(Rasterizer::Filler *f, const byte *m)\u0003Upp\u0003SET\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0010NoAAFillerFilter\u0015Upp::NoAAFillerFilter\u0015Upp::NoAAFillerFilter%NoAAFillerFilter : Rasterizer::Filler\u0003Upp\u0010NOAAFILLERFILTER\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0017Upp::Rasterizer::Filler\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000\u0016\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0001t\u0014Rasterizer::Filler *\u0018Upp::NoAAFillerFilter::t\u0015Rasterizer::Filler *t\u0003Upp\u0001T\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u001F\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0001\u0000\u0005Start\u000Fvoid (int, int)%Upp::NoAAFillerFilter::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000\u001E\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\u000Fvoid (int, int)&Upp::NoAAFillerFilter::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000[\u0000\u0000\u0000\u0015\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0001\u0000\u0006Render\nvoid (int)\"Upp::NoAAFillerFilter::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000\\\u0000\u0000\u0000\u0019\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0001\u0000\u0003End\avoid ()\u001CUpp::NoAAFillerFilter::End()\nvoid End()\u0003Upp\u0003END\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000;\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set\u001Bvoid (Rasterizer::Filler *)/Upp::NoAAFillerFilter::Set(Rasterizer::Filler*)\u001Fvoid Set(Rasterizer::Filler *f)\u0003Upp\u0003SET\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000end\u0000#(\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\AlphaBlend.h","value":"data\u0010õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0016_Painter_AlphaBlend_h_\u0000\u0016_Painter_AlphaBlend_h_\u0016_Painter_AlphaBlend_h_\u0000\u0016_PAINTER_ALPHABLEND_H_\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u00002\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\nAlphaBlend void (RGBA *, const RGBA &, int)&Upp::AlphaBlend(RGBA*,const RGBA&,int)2void AlphaBlend(RGBA *t, const RGBA& c, int alpha)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000;\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\nAlphaBlend%void (RGBA *, const RGBA *, int, int)*Upp::AlphaBlend(RGBA*,const RGBA*,int,int);void AlphaBlend(RGBA *t, const RGBA *s, int alpha, int len)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\a\u0000\u0000\u0000;\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\nAlphaBlend%void (RGBA *, const RGBA &, int, int)*Upp::AlphaBlend(RGBA*,const RGBA&,int,int);void AlphaBlend(RGBA *t, const RGBA& c, int alpha, int len)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u000EBroadcastAlpha\ri16x8 (i16x8)\u001AUpp::BroadcastAlpha(i16x8)\u001Di16x8 BroadcastAlpha(i16x8 x)\u0003Upp\u000EBROADCASTALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0004Mul8\u0012i16x8 (i16x8, int)\u0014Upp::Mul8(i16x8,int)\u001Ei16x8 Mul8(i16x8 x, int alpha)\u0003Upp\u0004MUL8\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\tMakeAlpha\ri16x8 (i16x8)\u0015Upp::MakeAlpha(i16x8)\u0018i16x8 MakeAlpha(i16x8 x)\u0003Upp\tMAKEALPHA\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u000EAlphaBlendSIMD\u001Bi16x8 (i16x8, i16x8, i16x8)&Upp::AlphaBlendSIMD(i16x8,i16x8,i16x8)3i16x8 AlphaBlendSIMD(i16x8 t, i16x8 s, i16x8 alpha)\u0003Upp\u000EALPHABLENDSIMD\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\vAlphaBlend1\u001Bvoid (RGBA *, i16x8, i16x8)#Upp::AlphaBlend1(RGBA*,i16x8,i16x8)/void AlphaBlend1(RGBA *t, i16x8 s, i16x8 alpha)\u0003Upp\vALPHABLEND1\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\vAlphaBlend2\u001Bvoid (RGBA *, i16x8, i16x8)#Upp::AlphaBlend2(RGBA*,i16x8,i16x8)/void AlphaBlend2(RGBA *t, i16x8 s, i16x8 alpha)\u0003Upp\vALPHABLEND2\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0000\u0000\vAlphaBlend4)void (RGBA *, i16x8, i16x8, i16x8, i16x8)/Upp::AlphaBlend4(RGBA*,i16x8,i16x8,i16x8,i16x8)Avoid AlphaBlend4(RGBA *t, i16x8 sl, i16x8 al, i16x8 sh, i16x8 ah)\u0003Upp\vALPHABLEND4\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\nAlphaBlend\u001Bvoid (RGBA *, const RGBA &)\"Upp::AlphaBlend(RGBA*,const RGBA&)'void AlphaBlend(RGBA *t, const RGBA& c)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\nAlphaBlend void (RGBA *, const RGBA &, int)&Upp::AlphaBlend(RGBA*,const RGBA&,int)2void AlphaBlend(RGBA *t, const RGBA& c, int alpha)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\nAlphaBlend%void (RGBA *, const RGBA &, int, int)*Upp::AlphaBlend(RGBA*,const RGBA&,int,int);void AlphaBlend(RGBA *t, const RGBA& c, int alpha, int len)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nAlphaBlend%void (RGBA *, const RGBA *, int, int)*Upp::AlphaBlend(RGBA*,const RGBA*,int,int);void AlphaBlend(RGBA *t, const RGBA *s, int alpha, int len)\u0003Upp\nALPHABLEND\u0003Upp\u0003UPP\u0000\u0000end\u0000\n\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Fillers.cpp","value":"data\u001F\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0001\u0000\u0005Start\u000Fvoid (int, int) Upp::SolidFiller::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\nInvertRGBA\u0013RGBA (const RGBA &)\u001CUpp::InvertRGBA(const RGBA&)\u001ERGBA InvertRGBA(const RGBA& c)\u0003Upp\nINVERTRGBA\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0001\u0000\u0006Render\nvoid (int)\u001DUpp::SolidFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0001\u0000\u0006Render\u000Fvoid (int, int)!Upp::SolidFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0010Upp::SolidFiller\u0010UPP::SOLIDFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0001\u0000\u0005Start\u000Fvoid (int, int)#Upp::SubpixelFiller::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000K\u0000\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0001\u0000\u0006Render\nvoid (int) Upp::SubpixelFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000Y\u0000\u0000\u0000\u0000\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0000\u0000\u0000ª\u0000\u0000\u0000\u0001\u0000\u0000\aRenderN\u0014void (int, int, int))Upp::SubpixelFiller::RenderN(int,int,int)#void RenderN(int val, int h, int n)\u0003Upp\aRENDERN\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000¬\u0000\u0000\u0000\u0000\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ý\u0000\u0000\u0000\u0001\u0001\u0000\u0006Render\u000Fvoid (int, int)$Upp::SubpixelFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000ß\u0000\u0000\u0000\u0000\u0000\u0000\u0000ß\u0000\u0000\u0000\u0001\u0000\u0000\u0000ù\u0000\u0000\u0000\u0001\u0000\u0000\u0005Write\nvoid (int)\u001FUpp::SubpixelFiller::Write(int)\u0013void Write(int len)\u0003Upp\u0005WRITE\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000û\u0000\u0000\u0000\u0000\u0000\u0000\u0000û\u0000\u0000\u0000\u0001\u0000\u0000\u0000ÿ\u0000\u0000\u0000\u0001\u0001\u0000\u0003End\avoid ()\u001AUpp::SubpixelFiller::End()\nvoid End()\u0003Upp\u0003END\u0013Upp::SubpixelFiller\u0013UPP::SUBPIXELFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0001\u0001\u0000\u0005Start\u000Fvoid (int, int)\u001FUpp::SpanFiller::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\b\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\u0000\r\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\nvoid (int)\u001CUpp::SpanFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\u000Fvoid (int, int) Upp::SpanFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u000FUpp::SpanFiller\u000FUPP::SPANFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001D\u0001\u0000\u0000\u0001\u0000\u0000\u0000!\u0001\u0000\u0000\u0001\u0000\u0000\u0004Init\nvoid (int)\u001AUpp::ClipFiller::Init(int)\u0012void Init(int _cx)\u0003Upp\u0004INIT\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0001\u0000\u0000\u0000*\u0001\u0000\u0000\u0001\u0000\u0000\u0005Clear\avoid ()\u0018Upp::ClipFiller::Clear()\fvoid Clear()\u0003Upp\u0005CLEAR\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000,\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0001\u0000\u0000\u0001\u0000\u0000\u0000/\u0001\u0000\u0000\u0001\u0001\u0000\u0005Start\u000Fvoid (int, int)\u001FUpp::ClipFiller::Start(int,int)\u001Evoid Start(int xmin, int xmax)\u0003Upp\u0005START\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\u0004Span\u000Fvoid (int, int)\u001EUpp::ClipFiller::Span(int,int)\u001Bvoid Span(int val, int len)\u0003Upp\u0004SPAN\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000H\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\u0000Z\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\u000Fvoid (int, int) Upp::ClipFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000\u0001\u0000\u0000\u0000_\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\nvoid (int)\u001CUpp::ClipFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000a\u0001\u0000\u0000\u0000\u0000\u0000\u0000a\u0001\u0000\u0000\u0001\u0000\u0000\u0000q\u0001\u0000\u0000\u0001\u0000\u0000\u0006Finish\u0015void (ClippingLine &)&Upp::ClipFiller::Finish(ClippingLine&)\u001Dvoid Finish(ClippingLine& cl)\u0003Upp\u0006FINISH\u000FUpp::ClipFiller\u000FUPP::CLIPFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000s\u0001\u0000\u0000\u0000\u0000\u0000\u0000s\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\nvoid (int)\"Upp::MaskFillerFilter::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000«\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\u000Fvoid (int, int)&Upp::MaskFillerFilter::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000­\u0001\u0000\u0000\u0000\u0000\u0000\u0000­\u0001\u0000\u0000\u0001\u0000\u0000\u0000±\u0001\u0000\u0000\u0001\u0000\u0000\tNilFiller\u000EUpp::NilFiller\u000EUpp::NilFiller\u001ENilFiller : Rasterizer::Filler\u0003Upp\tNILFILLER\u000EUpp::NilFiller\u000EUPP::NILFILLER\u0017Upp::Rasterizer::Filler\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000®\u0001\u0000\u0000\u0001\u0000\u0000\u0000®\u0001\u0000\u0000\"\u0000\u0000\u0000®\u0001\u0000\u0000\u0001\u0001\u0000\u0005Start\u000Fvoid (int, int)\u001EUpp::NilFiller::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u000EUpp::NilFiller\u000EUPP::NILFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000¯\u0001\u0000\u0000\u0001\u0000\u0000\u0000¯\u0001\u0000\u0000\"\u0000\u0000\u0000¯\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\u000Fvoid (int, int)\u001FUpp::NilFiller::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u000EUpp::NilFiller\u000EUPP::NILFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000°\u0001\u0000\u0000\u0001\u0000\u0000\u0000°\u0001\u0000\u0000\"\u0000\u0000\u0000°\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\nvoid (int)\u001BUpp::NilFiller::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u000EUpp::NilFiller\u000EUPP::NILFILLER\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000³\u0001\u0000\u0000\u0000\u0000\u0000\u0000³\u0001\u0000\u0000\u0001\u0000\u0000\u0000»\u0001\u0000\u0000\u0001\u0001\u0000\u0005Start\u000Fvoid (int, int)%Upp::MaskFillerFilter::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0015Upp::MaskFillerFilter\u0015UPP::MASKFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000½\u0001\u0000\u0000\u0000\u0000\u0000\u0000½\u0001\u0000\u0000\u0001\u0000\u0000\u0000À\u0001\u0000\u0000\u0001\u0001\u0000\u0005Start\u000Fvoid (int, int)%Upp::NoAAFillerFilter::Start(int,int)\u001Evoid Start(int minx, int maxx)\u0003Upp\u0005START\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000Â\u0001\u0000\u0000\u0000\u0000\u0000\u0000Â\u0001\u0000\u0000\u0001\u0000\u0000\u0000Å\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\u000Fvoid (int, int)&Upp::NoAAFillerFilter::Render(int,int)\u001Dvoid Render(int val, int len)\u0003Upp\u0006RENDER\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0000\u0000\u0000\u0000Ç\u0001\u0000\u0000\u0001\u0000\u0000\u0000Ê\u0001\u0000\u0000\u0001\u0001\u0000\u0006Render\nvoid (int)\"Upp::NoAAFillerFilter::Render(int)\u0014void Render(int val)\u0003Upp\u0006RENDER\u0015Upp::NoAAFillerFilter\u0015UPP::NOAAFILLERFILTER\u0000\u0000end\u0000¿\u0012\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Context.cpp","value":"data\u0013\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u001DUpp::BufferPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u001BUpp::BufferPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0001\u0000\vTransformOp\u0016void (const Xform2D &)/Upp::BufferPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0001\u0000\tOpacityOp\rvoid (double)%Upp::BufferPainter::OpacityOp(double)\u0018void OpacityOp(double o)\u0003Upp\tOPACITYOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0001\u0000\tLineCapOp\nvoid (int)\"Upp::BufferPainter::LineCapOp(int)\u001Bvoid LineCapOp(int linecap)\u0003Upp\tLINECAPOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0001\u0000\nLineJoinOp\nvoid (int)#Upp::BufferPainter::LineJoinOp(int)\u001Dvoid LineJoinOp(int linejoin)\u0003Upp\nLINEJOINOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000A\u0000\u0000\u0000\u0001\u0001\u0000\fMiterLimitOp\rvoid (double)(Upp::BufferPainter::MiterLimitOp(double)\u001Bvoid MiterLimitOp(double l)\u0003Upp\fMITERLIMITOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0001\u0000\tEvenOddOp\vvoid (bool)#Upp::BufferPainter::EvenOddOp(bool)\u001Cvoid EvenOddOp(bool evenodd)\u0003Upp\tEVENODDOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0001\u0000\bInvertOp\vvoid (bool)\"Upp::BufferPainter::InvertOp(bool)\u001Avoid InvertOp(bool invert)\u0003Upp\bINVERTOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0001\u0000\rImageFilterOp\nvoid (int)&Upp::BufferPainter::ImageFilterOp(int)\u001Evoid ImageFilterOp(int filter)\u0003Upp\rIMAGEFILTEROP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\b\u0000\u0000\u0000\u000F\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000>\u0000\u0000\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\fStringToDash)Vector<double> (const String &, double &)(Upp::StringToDash(const String&,double&)>Vector<double> StringToDash(const String& dash, double& start)\u0003Upp\fSTRINGTODASH\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0001\u0000\u0006DashOp\u001Dvoid (const String &, double)0Upp::BufferPainter::DashOp(const String&,double)-void DashOp(const String& dash, double start)\u0003Upp\u0006DASHOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000p\u0000\u0000\u0000\u0000\u0000\u0000\u0000p\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0006DashOp%void (const Vector<double> &, double)0Upp::BufferPainter::DashOp(const Vector&,double)5void DashOp(const Vector<double>& dash, double start)\u0003Upp\u0006DASHOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\nColorStop0#void (Attr &, double, const RGBA &)8Upp::BufferPainter::ColorStop0(Attr&,double,const RGBA&)7void ColorStop0(Attr& a, double pos, const RGBA& color)\u0003Upp\nCOLORSTOP0\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\vColorStopOp\u001Bvoid (double, const RGBA &)3Upp::BufferPainter::ColorStopOp(double,const RGBA&)/void ColorStopOp(double pos, const RGBA& color)\u0003Upp\vCOLORSTOPOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\fClearStopsOp\avoid ()\"Upp::BufferPainter::ClearStopsOp()\u0013void ClearStopsOp()\u0003Upp\fCLEARSTOPSOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ú\u0000\u0000\u0000\u0001\u0000\u0000\u0006Create\u0019void (ImageBuffer &, int),Upp::BufferPainter::Create(ImageBuffer&,int):void Create(ImageBuffer& ib, int mode_ = MODE_ANTIALIASED)\u0003Upp\u0006CREATE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u000F\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ü\u0000\u0000\u0000\u0001\u0000\u0000\u0000â\u0000\u0000\u0000\u0001\u0000\u0000\rBufferPainter\u001Evoid (PainterTarget &, double)8Upp::BufferPainter::BufferPainter(PainterTarget&,double)8BufferPainter(PainterTarget& t, double tolerance = Null)\u0003Upp\rBUFFERPAINTER\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000\r\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Path.cpp","value":"data\u0014õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\tClearPath\avoid ()\u001FUpp::BufferPainter::ClearPath()\u0010void ClearPath()\u0003Upp\tCLEARPATH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\aDoPath0\avoid ()\u001DUpp::BufferPainter::DoPath0()\u000Evoid DoPath0()\u0003Upp\aDOPATH0\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\tPathPoint\u001DPointf (const Pointf &, bool)1Upp::BufferPainter::PathPoint(const Pointf&,bool)+Pointf PathPoint(const Pointf& p, bool rel)\u0003Upp\tPATHPOINT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\bEndPoint\u001DPointf (const Pointf &, bool)0Upp::BufferPainter::EndPoint(const Pointf&,bool)*Pointf EndPoint(const Pointf& p, bool rel)\u0003Upp\bENDPOINT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u001E\u0000\u0000\u0000%\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\aPathAdd\bT &(int) Upp::BufferPainter::PathAdd(int)'template <class T> T& PathAdd(int type)\u0003Upp\aPATHADD\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0001\u0000\aClearOp\u0013void (const RGBA &)(Upp::BufferPainter::ClearOp(const RGBA&)\u001Fvoid ClearOp(const RGBA& color)\u0003Upp\aCLEAROP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool).Upp::BufferPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000T\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\aDoMove0\avoid ()\u001DUpp::BufferPainter::DoMove0()\u000Evoid DoMove0()\u0003Upp\aDOMOVE0\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool).Upp::BufferPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000g\u0000\u0000\u0000\u0001\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)AUpp::BufferPainter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000i\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)3Upp::BufferPainter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)KUpp::BufferPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool)=Upp::BufferPainter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)IUpp::BufferPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)OUpp::BufferPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\aCloseOp\avoid ()\u001DUpp::BufferPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0005DivOp\avoid ()\u001BUpp::BufferPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000¬\u0000\u0000\u0000\u0001\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)7Upp::BufferPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000I\u000F\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Render.cpp","value":"data\rõ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0005LDUMP\u0000\u0005LDUMP\u0005LDUMP\u0000\u0005LDUMP\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000L\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0001\u0000\u0004Fill)void (double, SpanSource *, const RGBA &)8Upp::PainterTarget::Fill(double,SpanSource*,const RGBA&):void Fill(double width, SpanSource *ss, const RGBA& color)\u0003Upp\u0004FILL\u0012Upp::PainterTarget\u0012UPP::PAINTERTARGET\u0000\u0000\u0018\u0000\u0000\u0000\u0018\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\aPathJobVvoid (Rasterizer &, double, const PathInfo *, const SimpleAttr &, const Rectf &, bool)lUpp::BufferPainter::PathJob::PathJob(Rasterizer&,double,const PathInfo*,const SimpleAttr&,const Rectf&,bool)ÿ\u0000\u0000\u0000PathJob(Rasterizer& rasterizer, double width, const PathInfo *path_info, const SimpleAttr& attr, const Rectf& preclip, bool isregular)\u0003Upp\aPATHJOB\u001BUpp::BufferPainter::PathJob\u001BUPP::BUFFERPAINTER::PATHJOB\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0012RenderPathSegmentsMvoid (LinearPathConsumer *, const Vector<byte> &, const SimpleAttr *, double)bUpp::BufferPainter::RenderPathSegments(LinearPathConsumer*,const Vector&,const SimpleAttr*,double)rvoid RenderPathSegments(LinearPathConsumer *g, const Vector<byte>& path, const SimpleAttr *attr, double tolerance)\u0003Upp\u0012RENDERPATHSEGMENTS\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006SyncCo\avoid ()\u001CUpp::BufferPainter::SyncCo()\rvoid SyncCo()\u0003Upp\u0006SYNCCO\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0001\u0000\u0000\u0001\u0000\u0000\nRenderPath>Buffer<ClippingLine> (double, One<SpanSource> &, const RGBA &)7Upp::BufferPainter::RenderPath(double,One&,const RGBA&)UBuffer<ClippingLine> RenderPath(double width, One<SpanSource>& ss, const RGBA& color)\u0003Upp\nRENDERPATH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0001\u0000\u0000\u0000ë\u0001\u0000\u0000\u0001\u0000\u0000\rFinishPathJob\avoid ()#Upp::BufferPainter::FinishPathJob()\u0014void FinishPathJob()\u0003Upp\rFINISHPATHJOB\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000í\u0001\u0000\u0000\u0000\u0000\u0000\u0000í\u0001\u0000\u0000\u0001\u0000\u0000\u0000ù\u0001\u0000\u0000\u0001\u0000\u0000\u0006Finish\avoid ()\u001CUpp::BufferPainter::Finish()\rvoid Finish()\u0003Upp\u0006FINISH\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000û\u0001\u0000\u0000\u0000\u0000\u0000\u0000û\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0001\u0000\u0006FillOp\u0013void (const RGBA &)'Upp::BufferPainter::FillOp(const RGBA&)\u001Evoid FillOp(const RGBA& color)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0001\u0000\u0000\u0000\a\u0002\u0000\u0000\u0001\u0001\u0000\bStrokeOp\u001Bvoid (double, const RGBA &)0Upp::BufferPainter::StrokeOp(double,const RGBA&).void StrokeOp(double width, const RGBA& color)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\t\u0002\u0000\u0000\u0000\u0000\u0000\u0000\t\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0002\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\avoid ()\u001CUpp::BufferPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000Ê\t\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Image.cpp","value":"data$\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u000EIntAndFraction\u0014int (f32x4, f32x4 &)!Upp::IntAndFraction(f32x4,f32x4&),int IntAndFraction(f32x4 x, f32x4& fraction)\u0003Upp\u000EINTANDFRACTION\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0003Int\vint (f32x4)\u000FUpp::Int(f32x4)\u0010int Int(f32x4 x)\u0003Upp\u0003INT\u0003Upp\u0003UPP\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0001\u0000\u0000\u0001\u0000\u0000\u0010PainterImageSpan\u0015Upp::PainterImageSpan\u0015Upp::PainterImageSpan\u001DPainterImageSpan : SpanSource\u0003Upp\u0010PAINTERIMAGESPAN\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u000FUpp::SpanSource\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0002ax\u0003int\u0019Upp::PainterImageSpan::ax\u0006int ax\u0003Upp\u0002AX\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0002ay\u0003int\u0019Upp::PainterImageSpan::ay\u0006int ay\u0003Upp\u0002AY\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0002cx\u0003int\u0019Upp::PainterImageSpan::cx\u0006int cx\u0003Upp\u0002CX\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0002cy\u0003int\u0019Upp::PainterImageSpan::cy\u0006int cy\u0003Upp\u0002CY\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000!\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0004maxx\u0003int\u001BUpp::PainterImageSpan::maxx\bint maxx\u0003Upp\u0004MAXX\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000#\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0000\u0000\u0000'\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0004maxy\u0003int\u001BUpp::PainterImageSpan::maxy\bint maxy\u0003Upp\u0004MAXY\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0005style\u0004byte\u001CUpp::PainterImageSpan::style\nbyte style\u0003Upp\u0005STYLE\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0006hstyle\u0004byte\u001DUpp::PainterImageSpan::hstyle\vbyte hstyle\u0003Upp\u0006HSTYLE\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0006vstyle\u0004byte\u001DUpp::PainterImageSpan::vstyle\vbyte vstyle\u0003Upp\u0006VSTYLE\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0004fast\u0004bool\u001BUpp::PainterImageSpan::fast\tbool fast\u0003Upp\u0004FAST\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0000\u0005fixed\u0004bool\u001CUpp::PainterImageSpan::fixed\nbool fixed\u0003Upp\u0005FIXED\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0005image\u0005Image\u001CUpp::PainterImageSpan::image\vImage image\u0003Upp\u0005IMAGE\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0005xform\aXform2D\u001CUpp::PainterImageSpan::xform\rXform2D xform\u0003Upp\u0005XFORM\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u001D\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\bdofilter\u0004bool\u001FUpp::PainterImageSpan::dofilter\rbool dofilter\u0003Upp\bDOFILTER\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0015\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0002kx\u0011ImageFilterKernel\u0019Upp::PainterImageSpan::kx\u0014ImageFilterKernel kx\u0003Upp\u0002KX\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0019\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0002ky\u0011ImageFilterKernel\u0019Upp::PainterImageSpan::ky\u0014ImageFilterKernel ky\u0003Upp\u0002KY\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u0000#\u0000\u0000\u0000\u0002\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0005RGBAF\u001CUpp::PainterImageSpan::RGBAF\u001CUpp::PainterImageSpan::RGBAF\u0005RGBAF\u0003Upp\u0005RGBAF\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000$\u0000\u0000\u0000\u0002\u0000\u0000\u0000$\u0000\u0000\u0000\n\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0001r\u0006double\u001FUpp::PainterImageSpan::RGBAF::r\bdouble r\u0003Upp\u0001R\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000$\u0000\u0000\u0000\u0002\u0000\u0000\u0000$\u0000\u0000\u0000\r\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0001g\u0006double\u001FUpp::PainterImageSpan::RGBAF::g\bdouble g\u0003Upp\u0001G\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000$\u0000\u0000\u0000\u0002\u0000\u0000\u0000$\u0000\u0000\u0000\u0010\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0001b\u0006double\u001FUpp::PainterImageSpan::RGBAF::b\bdouble b\u0003Upp\u0001B\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000$\u0000\u0000\u0000\u0002\u0000\u0000\u0000$\u0000\u0000\u0000\u0013\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0001a\u0006double\u001FUpp::PainterImageSpan::RGBAF::a\bdouble a\u0003Upp\u0001A\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000&\u0000\u0000\u0000\u0002\u0000\u0000\u0000&\u0000\u0000\u0000\u0003\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0003Put\u001Bvoid (double, const RGBA &)5Upp::PainterImageSpan::RGBAF::Put(double,const RGBA&)(void Put(double weight, const RGBA& src)\u0003Upp\u0003PUT\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000,\u0000\u0000\u0000\u0002\u0000\u0000\u0000,\u0000\u0000\u0000\u0003\u0000\u0000\u00003\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\u0013RGBA (double) const.Upp::PainterImageSpan::RGBAF::Get(double)const\u001ARGBA Get(double div) const\u0003Upp\u0003GET\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u00005\u0000\u0000\u0000\u0002\u0000\u0000\u00005\u0000\u0000\u0000 \u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0005RGBAF\avoid ()%Upp::PainterImageSpan::RGBAF::RGBAF()\aRGBAF()\u0003Upp\u0005RGBAF\u001CUpp::PainterImageSpan::RGBAF\u001CUPP::PAINTERIMAGESPAN::RGBAF\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0002\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0010PainterImageSpan=void (dword, const Xform2D &, const Image &, bool, bool, int)XUpp::PainterImageSpan::PainterImageSpan(dword,const Xform2D&,const Image&,bool,bool,int)gPainterImageSpan(dword flags, const Xform2D& m, const Image& img, bool co, bool imagecache, int filter)\u0003Upp\u0010PAINTERIMAGESPAN\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000?\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0005Pixel\u001Cconst RGBA *(int, int) const*Upp::PainterImageSpan::Pixel(int,int)const%const RGBA *Pixel(int x, int y) const\u0003Upp\u0005PIXEL\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0015\u0000\u0000\u0000\r\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000\u0002\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\bGetPixel\u001Cconst RGBA *(int, int) const-Upp::PainterImageSpan::GetPixel(int,int)const(const RGBA *GetPixel(int x, int y) const\u0003Upp\bGETPIXEL\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tGetFilter1void (RGBA *, Pointf, Pointf, unsigned int) constGUpp::PainterImageSpan::GetFilter(RGBA*,Pointf,Pointf,unsigned int)constHvoid GetFilter(RGBA *span, Pointf p0, Pointf dd, unsigned int len) const\u0003Upp\tGETFILTER\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0001\u0000\u0003Get+void (RGBA *, int, int, unsigned int) const;Upp::PainterImageSpan::Get(RGBA*,int,int,unsigned int)const:void Get(RGBA *span, int x, int y, unsigned int len) const\u0003Upp\u0003GET\u0015Upp::PainterImageSpan\u0015UPP::PAINTERIMAGESPAN\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000>\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0001\u0000\u0000\u0001\u0000\u0000\u0000F\u0001\u0000\u0000\u0001\u0000\u0000\vRenderImage4void (double, const Image &, const Xform2D &, dword)IUpp::BufferPainter::RenderImage(double,const Image&,const Xform2D&,dword)Xvoid RenderImage(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\vRENDERIMAGE\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000H\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0001\u0000\u0000\u0001\u0000\u0000\u0000L\u0001\u0000\u0000\u0001\u0001\u0000\u0006FillOp,void (const Image &, const Xform2D &, dword)=Upp::BufferPainter::FillOp(const Image&,const Xform2D&,dword)Evoid FillOp(const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000N\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0001\u0000\u0000\u0001\u0000\u0000\u0000Q\u0001\u0000\u0000\u0001\u0001\u0000\bStrokeOp4void (double, const Image &, const Xform2D &, dword)FUpp::BufferPainter::StrokeOp(double,const Image&,const Xform2D&,dword)Uvoid StrokeOp(double width, const Image& image, const Xform2D& transsrc, dword flags)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000a\u0018\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Mask.cpp","value":"data\u0004\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0001\u0000\vBeginMaskOp\avoid ()!Upp::BufferPainter::BeginMaskOp()\u0012void BeginMaskOp()\u0003Upp\vBEGINMASKOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\b\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0001\u0000\u0001\u0005sSpan\u001Abyte *(byte *, int, int &)\u001AUpp::sSpan(byte*,int,int&),static byte *sSpan(byte *t, int c, int& len)\u0003Upp\u0005SSPAN\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\nFinishMask\avoid () Upp::BufferPainter::FinishMask()\u0011void FinishMask()\u0003Upp\nFINISHMASK\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000á\u0001\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\Gradient.cpp","value":"data\u0013\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\fMakeGradient,Image (RGBA, Vector<ColorStop> &, RGBA, int)7Upp::BufferPainter::MakeGradient(RGBA,Vector&,RGBA,int)RImage MakeGradient(RGBA color1, Vector<ColorStop>& color_stop, RGBA color2, int n)\u0003Upp\fMAKEGRADIENT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0002\u0000\u0000\u0000\u0016\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0012GradientImageMaker&Upp::BufferPainter::GradientImageMaker&Upp::BufferPainter::GradientImageMaker5BufferPainter::GradientImageMaker : public ImageMaker\u0003Upp\u0012GRADIENTIMAGEMAKER&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u000FUpp::ImageMaker\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000\f\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0006color1\u0004RGBA.Upp::BufferPainter::GradientImageMaker::color1\vRGBA color1\u0003Upp\u0006COLOR1&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0006\u0000\u0000\u0000\u0014\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\u0000&\u0000\u0000\u0000\u001E\u0000\u0000\u0000&\u0000\u0000\u0000\u0001\u0000\u0000\ncolor_stop\u0013Vector<ColorStop> *2Upp::BufferPainter::GradientImageMaker::color_stop\u001DVector<ColorStop> *color_stop\u0003Upp\nCOLOR_STOP&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\f\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0006color2\u0004RGBA.Upp::BufferPainter::GradientImageMaker::color2\vRGBA color2\u0003Upp\u0006COLOR2&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0006\u0000\u0000\u0000\u0005\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000\u0006\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0001n\u0003int)Upp::BufferPainter::GradientImageMaker::n\u0005int n\u0003Upp\u0001N&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u001B\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0001\u0000\u0003Key\u000FString () const2Upp::BufferPainter::GradientImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000+\u0000\u0000\u0000\u0001\u0000\u0000\u0000+\u0000\u0000\u0000\u001C\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0001\u0000\u0004Make\u000EImage () const3Upp::BufferPainter::GradientImageMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000*\u0000\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0001\u0000\u0003Key\u000FString () const2Upp::BufferPainter::GradientImageMaker::Key()const\u0012String Key() const\u0003Upp\u0003KEY&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000)\u0000\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0001\u0000\u0004Make\u000EImage () const3Upp::BufferPainter::GradientImageMaker::Make()const\u0012Image Make() const\u0003Upp\u0004MAKE&Upp::BufferPainter::GradientImageMaker&UPP::BUFFERPAINTER::GRADIENTIMAGEMAKER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000\u0001\u0000\u0000\u0012MakeGradientCached,Image (RGBA, Vector<ColorStop> &, RGBA, int)=Upp::BufferPainter::MakeGradientCached(RGBA,Vector&,RGBA,int)XImage MakeGradientCached(RGBA color1, Vector<ColorStop>& color_stop, RGBA color2, int n)\u0003Upp\u0012MAKEGRADIENTCACHED\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\bGradient'Image (const RGBA &, const RGBA &, int)9Upp::BufferPainter::Gradient(const RGBA&,const RGBA&,int)=Image Gradient(const RGBA& color1, const RGBA& color2, int n)\u0003Upp\bGRADIENT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0015\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\bGradientBImage (const RGBA &, const RGBA &, const Pointf &, const Pointf &)QUpp::BufferPainter::Gradient(const RGBA&,const RGBA&,const Pointf&,const Pointf&)ZImage Gradient(const RGBA& color1, const RGBA& color2, const Pointf& p1, const Pointf& p2)\u0003Upp\bGRADIENT\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\b\u0000\u0000\u0000\r\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0000\u0000\u0000T\u0000\u0000\u0000\u0001\u0000\u0001\fsLinearStyle\vdword (int)\u0016Upp::sLinearStyle(int)$static dword sLinearStyle(int style)\u0003Upp\fSLINEARSTYLE\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\u0000Y\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOpFvoid (const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)SUpp::BufferPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)bvoid FillOp(const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000[\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0000\u0000\u0000\u0001\u0000\u0000\u0000^\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOp7void (const RGBA &, const RGBA &, const Xform2D &, int)FUpp::BufferPainter::FillOp(const RGBA&,const RGBA&,const Xform2D&,int)Wvoid FillOp(const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOpNvoid (double, const Pointf &, const RGBA &, const Pointf &, const RGBA &, int)\\Upp::BufferPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,const RGBA&,int)rvoid StrokeOp(double width, const Pointf& p1, const RGBA& color1, const Pointf& p2, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOp?void (double, const RGBA &, const RGBA &, const Xform2D &, int)OUpp::BufferPainter::StrokeOp(double,const RGBA&,const RGBA&,const Xform2D&,int)gvoid StrokeOp(double width, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000\u001B\u0012\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\RadialGradient.cpp","value":"data\u0014\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0011PainterRadialSpan\u0016Upp::PainterRadialSpan\u0016Upp::PainterRadialSpan\u001EPainterRadialSpan : SpanSource\u0003Upp\u0011PAINTERRADIALSPAN\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u000FUpp::SpanSource\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0002im\aXform2D\u001AUpp::PainterRadialSpan::im\nXform2D im\u0003Upp\u0002IM\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0002cx\u0006double\u001AUpp::PainterRadialSpan::cx\tdouble cx\u0003Upp\u0002CX\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0002cy\u0006double\u001AUpp::PainterRadialSpan::cy\tdouble cy\u0003Upp\u0002CY\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0001r\u0006double\u0019Upp::PainterRadialSpan::r\bdouble r\u0003Upp\u0001R\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0002fx\u0006double\u001AUpp::PainterRadialSpan::fx\tdouble fx\u0003Upp\u0002FX\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0002fy\u0006double\u001AUpp::PainterRadialSpan::fy\tdouble fy\u0003Upp\u0002FY\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000\u0012\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0005style\u0003int\u001DUpp::PainterRadialSpan::style\tint style\u0003Upp\u0005STYLE\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0012\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0005alpha\u0003int\u001DUpp::PainterRadialSpan::alpha\tint alpha\u0003Upp\u0005ALPHA\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\bgradient\fconst RGBA * Upp::PainterRadialSpan::gradient\u0014const RGBA *gradient\u0003Upp\bGRADIENT\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0006\u0000\u0000\u0000\r\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u000E\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0001C\u0006double\u0019Upp::PainterRadialSpan::C\bdouble C\u0003Upp\u0001C\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u0001\u0000\u0000\u0000\f\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0003Set-void (double, double, double, double, double)?Upp::PainterRadialSpan::Set(double,double,double,double,double)Avoid Set(double _x, double _y, double _r, double _fx, double _fy)\u0003Upp\u0003SET\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0002\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0001\u0000\u0003Get+void (RGBA *, int, int, unsigned int) const<Upp::PainterRadialSpan::Get(RGBA*,int,int,unsigned int)const;void Get(RGBA *_span, int x, int y, unsigned int len) const\u0003Upp\u0003GET\u0016Upp::PainterRadialSpan\u0016UPP::PAINTERRADIALSPAN\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\fRenderRadialgvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, const Xform2D &, int)vUpp::BufferPainter::RenderRadial(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,const Xform2D&,int)ÿ\u0000\u0000\u0000void RenderRadial(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, const Xform2D& m, int style)\u0003Upp\fRENDERRADIAL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOpNvoid (const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)ZUpp::BufferPainter::FillOp(const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)jvoid FillOp(const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\u0000O\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOpVvoid (double, const Pointf &, const RGBA &, const Pointf &, double, const RGBA &, int)cUpp::BufferPainter::StrokeOp(double,const Pointf&,const RGBA&,const Pointf&,double,const RGBA&,int)zvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const Pointf& c, double r, const RGBA& color2, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\fRenderRadialOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)aUpp::BufferPainter::RenderRadial(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)|void RenderRadial(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\fRENDERRADIAL\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000W\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0001\u0000\u0006FillOpGvoid (const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)TUpp::BufferPainter::FillOp(const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)hvoid FillOp(const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\u0006FILLOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0001\u0000\bStrokeOpOvoid (double, const Pointf &, const RGBA &, const RGBA &, const Xform2D &, int)]Upp::BufferPainter::StrokeOp(double,const Pointf&,const RGBA&,const RGBA&,const Xform2D&,int)xvoid StrokeOp(double width, const Pointf& f, const RGBA& color1, const RGBA& color2, const Xform2D& transsrc, int style)\u0003Upp\bSTROKEOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000\u0011\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\OnPath.cpp","value":"data\u0002\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0001\u0000\rBeginOnPathOp\u0013void (double, bool).Upp::BufferPainter::BeginOnPathOp(double,bool)&void BeginOnPathOp(double q, bool abs)\u0003Upp\rBEGINONPATHOP\u0012Upp::BufferPainter\u0012UPP::BUFFERPAINTER\u0000\u0000end\u0000Ú\u0000\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\SvgInternal.h","value":"datag\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000-\u0000\u0000\u0000\u0001\u0000\u0000\rBoundsPainter\u0012Upp::BoundsPainter\u0012Upp::BoundsPainter!BoundsPainter : public NilPainter\u0003Upp\rBOUNDSPAINTER\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u000FUpp::NilPainter\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u00001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool).Upp::BoundsPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u00001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool).Upp::BoundsPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000H\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)AUpp::BoundsPainter::QuadraticOp(const Pointf&,const Pointf&,bool)=void QuadraticOp(const Pointf& p1, const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u00006\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)3Upp::BoundsPainter::QuadraticOp(const Pointf&,bool)+void QuadraticOp(const Pointf& p, bool rel)\u0003Upp\vQUADRATICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000V\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)KUpp::BoundsPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Kvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000D\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool)=Upp::BoundsPainter::CubicOp(const Pointf&,const Pointf&,bool)9void CubicOp(const Pointf& p2, const Pointf& p, bool rel)\u0003Upp\aCUBICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\a\u0000\u0000\u0000\u0001\u0000\u0000\u0000\a\u0000\u0000\u0000]\u0000\u0000\u0000\a\u0000\u0000\u0000\u0000\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)IUpp::BoundsPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Rvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool rel)\u0003Upp\u0005ARCOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u00003\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)OUpp::BoundsPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)`void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool rel)\u0003Upp\bSVGARCOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0019\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0001\u0000\aCloseOp\avoid ()\u001DUpp::BoundsPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\v\u0000\u0000\u0000\u0001\u0000\u0000\u0000\v\u0000\u0000\u0000\u0017\u0000\u0000\u0000\v\u0000\u0000\u0000\u0000\u0001\u0000\u0005DivOp\avoid ()\u001BUpp::BoundsPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\r\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000\u0000\u0000\u0018\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0001\u0000\u0006ClipOp\avoid ()\u001CUpp::BoundsPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000F\u0000\u0000\u0000/\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)MUpp::BoundsPainter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000>\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)7Upp::BoundsPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000-\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0001\u0000\vTransformOp\u0016void (const Xform2D &)/Upp::BoundsPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0001\u0000\aBeginOp\avoid ()\u001DUpp::BoundsPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0001\u0000\u0005EndOp\avoid ()\u001BUpp::BoundsPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0006Finish\rvoid (double)\"Upp::BoundsPainter::Finish(double)\u001Dvoid Finish(double width = 0)\u0003Upp\u0006FINISH\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001A\u0000\u0000\u0000\f\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u0001\u0000\u0000\u0002sw\tPainter &\u0016Upp::BoundsPainter::sw\vPainter& sw\u0003Upp\u0002SW\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0001\u0000\u0000\vboundingbox\u0005Rectf\u001FUpp::BoundsPainter::boundingbox\u0011Rectf boundingbox\u0003Upp\vBOUNDINGBOX\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\acurrent\u0006Pointf\u001BUpp::BoundsPainter::current\u000EPointf current\u0003Upp\aCURRENT\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\bqcontrol\u0006Pointf\u001CUpp::BoundsPainter::qcontrol\u000FPointf qcontrol\u0003Upp\bQCONTROL\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001C\u0000\u0000\u0000%\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0001\u0000\u0000\bccontrol\u0006Pointf\u001CUpp::BoundsPainter::ccontrol\u000FPointf ccontrol\u0003Upp\bCCONTROL\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0001\u0000\u0000\u0003mtx\u000EArray<Xform2D>\u0017Upp::BoundsPainter::mtx\u0012Array<Xform2D> mtx\u0003Upp\u0003MTX\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0000\u0000\u000Fsvg_boundingbox\u0005Rectf#Upp::BoundsPainter::svg_boundingbox\u0015Rectf svg_boundingbox\u0003Upp\u000FSVG_BOUNDINGBOX\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u000F\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0003nil\nNilPainter\u0017Upp::BoundsPainter::nil\u000ENilPainter nil\u0003Upp\u0003NIL\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000\"\u0000\u0000\u0000\u0001\u0000\u0000\u0000\"\u0000\u0000\u0000\u0017\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0006Bounds\rvoid (Pointf)\"Upp::BoundsPainter::Bounds(Pointf)\u0015void Bounds(Pointf p)\u0003Upp\u0006BOUNDS\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000$\u0000\u0000\u0000\u0001\u0000\u0000\u0000$\u0000\u0000\u00003\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\tQuadratic%void (const Pointf &, const Pointf &):Upp::BoundsPainter::Quadratic(const Pointf&,const Pointf&)1void Quadratic(const Pointf& p1, const Pointf& p)\u0003Upp\tQUADRATIC\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000%\u0000\u0000\u0000\u0001\u0000\u0000\u0000%\u0000\u0000\u0000A\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0005Cubic5void (const Pointf &, const Pointf &, const Pointf &)DUpp::BoundsPainter::Cubic(const Pointf&,const Pointf&,const Pointf&)?void Cubic(const Pointf& p1, const Pointf& p2, const Pointf& p)\u0003Upp\u0005CUBIC\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\a\u0000\u0000\u0000'\u0000\u0000\u0000\u0001\u0000\u0000\u0000'\u0000\u0000\u0000\f\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0003New\avoid ()\u0019Upp::BoundsPainter::New()\nvoid New()\u0003Upp\u0003NEW\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0000(\u0000\u0000\u0000+\u0000\u0000\u0000(\u0000\u0000\u0000\u0001\u0000\u0000\u0003Get\u000Fconst Rectf &()\u0019Upp::BoundsPainter::Get()\u0012const Rectf& Get()\u0003Upp\u0003GET\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0006\u0000\u0000\u0000\a\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0000*\u0000\u0000\u0000\u001E\u0000\u0000\u0000*\u0000\u0000\u0000\u0001\u0000\u0000\u0017compute_svg_boundingbox\u0004bool+Upp::BoundsPainter::compute_svg_boundingbox\u001Cbool compute_svg_boundingbox\u0003Upp\u0017COMPUTE_SVG_BOUNDINGBOX\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\u0000,\u0000\u0000\u0000s\u0000\u0000\u0000,\u0000\u0000\u0000\u0001\u0000\u0000\rBoundsPainter\u0010void (Painter &)+Upp::BoundsPainter::BoundsPainter(Painter&)\u001ABoundsPainter(Painter& sw)\u0003Upp\rBOUNDSPAINTER\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0002\u0000\u0000\u0000\a\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tSvgParser\u000EUpp::SvgParser\u000EUpp::SvgParser\tSvgParser\u0003Upp\tSVGPARSER\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\n\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\f\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0002sw\tPainter &\u0012Upp::SvgParser::sw\vPainter& sw\u0003Upp\u0002SW\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u00003\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\bParseSVG!void (const char *, const char *)1Upp::SvgParser::ParseSVG(const char*,const char*)2void ParseSVG(const char *svg, const char *folder)\u0003Upp\bPARSESVG\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u00004\u0000\u0000\u0000\u0002\u0000\u0000\u00007\u0000\u0000\u0000\u0001\u0000\u0000\u0004Stop\u0014Upp::SvgParser::Stop\u0014Upp::SvgParser::Stop\u0015Stop : Moveable<Stop>\u0003Upp\u0004STOP\u0014Upp::SvgParser::Stop\u0014UPP::SVGPARSER::STOP\rUpp::Moveable\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u00005\u0000\u0000\u0000\u0002\u0000\u0000\u00005\u0000\u0000\u0000\u000E\u0000\u0000\u00005\u0000\u0000\u0000\u0001\u0000\u0000\u0005color\u0004RGBA\u001BUpp::SvgParser::Stop::color\nRGBA color\u0003Upp\u0005COLOR\u0014Upp::SvgParser::Stop\u0014UPP::SVGPARSER::STOP\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u00006\u0000\u0000\u0000\u0002\u0000\u0000\u00006\u0000\u0000\u0000\u000F\u0000\u0000\u00006\u0000\u0000\u0000\u0001\u0000\u0000\u0006offset\u0006double\u001CUpp::SvgParser::Stop::offset\rdouble offset\u0003Upp\u0006OFFSET\u0014Upp::SvgParser::Stop\u0014UPP::SVGPARSER::STOP\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u00009\u0000\u0000\u0000\u0001\u0000\u0000\u00009\u0000\u0000\u0000\u0002\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0000\u0000\bGradient\u0018Upp::SvgParser::Gradient\u0018Upp::SvgParser::Gradient\bGradient\u0003Upp\bGRADIENT\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000:\u0000\u0000\u0000\u0002\u0000\u0000\u0000:\u0000\u0000\u0000\u0011\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\bresolved\u0004bool\"Upp::SvgParser::Gradient::resolved\rbool resolved\u0003Upp\bRESOLVED\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000;\u0000\u0000\u0000\u0002\u0000\u0000\u0000;\u0000\u0000\u0000\u000F\u0000\u0000\u0000;\u0000\u0000\u0000\u0001\u0000\u0000\u0006radial\u0004bool Upp::SvgParser::Gradient::radial\vbool radial\u0003Upp\u0006RADIAL\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000<\u0000\u0000\u0000\u0002\u0000\u0000\u0000<\u0000\u0000\u0000\n\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0001a\u0006Pointf\u001BUpp::SvgParser::Gradient::a\bPointf a\u0003Upp\u0001A\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0000<\u0000\u0000\u0000\u0002\u0000\u0000\u0000<\u0000\u0000\u0000\r\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0001b\u0006Pointf\u001BUpp::SvgParser::Gradient::b\bPointf b\u0003Upp\u0001B\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000<\u0000\u0000\u0000\u0002\u0000\u0000\u0000<\u0000\u0000\u0000\u0010\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0001c\u0006Pointf\u001BUpp::SvgParser::Gradient::c\bPointf c\u0003Upp\u0001C\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\u0012\u0000\u0000\u0000<\u0000\u0000\u0000\u0002\u0000\u0000\u0000<\u0000\u0000\u0000\u0013\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0001f\u0006Pointf\u001BUpp::SvgParser::Gradient::f\bPointf f\u0003Upp\u0001F\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000=\u0000\u0000\u0000\u0002\u0000\u0000\u0000=\u0000\u0000\u0000\n\u0000\u0000\u0000=\u0000\u0000\u0000\u0001\u0000\u0000\u0001r\u0006double\u001BUpp::SvgParser::Gradient::r\bdouble r\u0003Upp\u0001R\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000>\u0000\u0000\u0000\u0002\u0000\u0000\u0000>\u0000\u0000\u0000\u000E\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0005style\u0003int\u001FUpp::SvgParser::Gradient::style\tint style\u0003Upp\u0005STYLE\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000?\u0000\u0000\u0000\u0002\u0000\u0000\u0000?\u0000\u0000\u0000\u0013\u0000\u0000\u0000?\u0000\u0000\u0000\u0001\u0000\u0000\nuser_space\u0004bool$Upp::SvgParser::Gradient::user_space\u000Fbool user_space\u0003Upp\nUSER_SPACE\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000@\u0000\u0000\u0000\u0002\u0000\u0000\u0000@\u0000\u0000\u0000\u0012\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\ttransform\u0006String#Upp::SvgParser::Gradient::transform\u0010String transform\u0003Upp\tTRANSFORM\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\u000F\u0000\u0000\u0000B\u0000\u0000\u0000\u0002\u0000\u0000\u0000B\u0000\u0000\u0000\u0013\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0004stop\fVector<Stop>\u001EUpp::SvgParser::Gradient::stop\u0011Vector<Stop> stop\u0003Upp\u0004STOP\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000D\u0000\u0000\u0000\u0002\u0000\u0000\u0000D\u0000\u0000\u0000\r\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000\u0000\u0004href\u0006String\u001EUpp::SvgParser::Gradient::href\vString href\u0003Upp\u0004HREF\u0018Upp::SvgParser::Gradient\u0018UPP::SVGPARSER::GRADIENT\u0000\u0000\u0006\u0000\u0000\u0000\u001C\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000G\u0000\u0000\u0000$\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\bgradient\u001AArrayMap<String, Gradient>\u0018Upp::SvgParser::gradient#ArrayMap<String, Gradient> gradient\u0003Upp\bGRADIENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000I\u0000\u0000\u0000\u0001\u0000\u0000\u0000I\u0000\u0000\u0000\u0002\u0000\u0000\u0000]\u0000\u0000\u0000\u0001\u0000\u0000\u0005State\u0015Upp::SvgParser::State\u0015Upp::SvgParser::State\u0005State\u0003Upp\u0005STATE\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000J\u0000\u0000\u0000\u0002\u0000\u0000\u0000J\u0000\u0000\u0000\u0010\u0000\u0000\u0000J\u0000\u0000\u0000\u0001\u0000\u0000\aopacity\u0006double\u001EUpp::SvgParser::State::opacity\u000Edouble opacity\u0003Upp\aOPACITY\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000L\u0000\u0000\u0000\u0002\u0000\u0000\u0000L\u0000\u0000\u0000\u0016\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0000\rfill_gradient\u0003int$Upp::SvgParser::State::fill_gradient\u0011int fill_gradient\u0003Upp\rFILL_GRADIENT\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000M\u0000\u0000\u0000\u0002\u0000\u0000\u0000M\u0000\u0000\u0000\r\u0000\u0000\u0000M\u0000\u0000\u0000\u0001\u0000\u0000\u0004fill\u0005Color\u001BUpp::SvgParser::State::fill\nColor fill\u0003Upp\u0004FILL\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000N\u0000\u0000\u0000\u0002\u0000\u0000\u0000N\u0000\u0000\u0000\u0015\u0000\u0000\u0000N\u0000\u0000\u0000\u0001\u0000\u0000\ffill_opacity\u0006double#Upp::SvgParser::State::fill_opacity\u0013double fill_opacity\u0003Upp\fFILL_OPACITY\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000P\u0000\u0000\u0000\u0002\u0000\u0000\u0000P\u0000\u0000\u0000\u0018\u0000\u0000\u0000P\u0000\u0000\u0000\u0001\u0000\u0000\u000Fstroke_gradient\u0003int&Upp::SvgParser::State::stroke_gradient\u0013int stroke_gradient\u0003Upp\u000FSTROKE_GRADIENT\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000Q\u0000\u0000\u0000\u0002\u0000\u0000\u0000Q\u0000\u0000\u0000\u000F\u0000\u0000\u0000Q\u0000\u0000\u0000\u0001\u0000\u0000\u0006stroke\u0005Color\u001DUpp::SvgParser::State::stroke\fColor stroke\u0003Upp\u0006STROKE\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000R\u0000\u0000\u0000\u0002\u0000\u0000\u0000R\u0000\u0000\u0000\u0015\u0000\u0000\u0000R\u0000\u0000\u0000\u0001\u0000\u0000\fstroke_width\u0006double#Upp::SvgParser::State::stroke_width\u0013double stroke_width\u0003Upp\fSTROKE_WIDTH\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000S\u0000\u0000\u0000\u0002\u0000\u0000\u0000S\u0000\u0000\u0000\u0017\u0000\u0000\u0000S\u0000\u0000\u0000\u0001\u0000\u0000\u000Estroke_opacity\u0006double%Upp::SvgParser::State::stroke_opacity\u0015double stroke_opacity\u0003Upp\u000ESTROKE_OPACITY\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000U\u0000\u0000\u0000\u0002\u0000\u0000\u0000U\u0000\u0000\u0000\u0013\u0000\u0000\u0000U\u0000\u0000\u0000\u0001\u0000\u0000\ndash_array\u0006String!Upp::SvgParser::State::dash_array\u0011String dash_array\u0003Upp\nDASH_ARRAY\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000V\u0000\u0000\u0000\u0002\u0000\u0000\u0000V\u0000\u0000\u0000\u0014\u0000\u0000\u0000V\u0000\u0000\u0000\u0001\u0000\u0000\vdash_offset\u0006double\"Upp::SvgParser::State::dash_offset\u0012double dash_offset\u0003Upp\vDASH_OFFSET\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000X\u0000\u0000\u0000\u0002\u0000\u0000\u0000X\u0000\u0000\u0000\u0014\u0000\u0000\u0000X\u0000\u0000\u0000\u0001\u0000\u0000\vtext_anchor\u0003int\"Upp::SvgParser::State::text_anchor\u000Fint text_anchor\u0003Upp\vTEXT_ANCHOR\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\t\u0000\u0000\u0000Z\u0000\u0000\u0000\u0002\u0000\u0000\u0000Z\u0000\u0000\u0000\r\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\u0004font\u0004Font\u001BUpp::SvgParser::State::font\tFont font\u0003Upp\u0004FONT\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\u0011\u0000\u0000\u0000\\\u0000\u0000\u0000\u0002\u0000\u0000\u0000\\\u0000\u0000\u0000\u0012\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0001n\u000Fconst XmlNode *\u0018Upp::SvgParser::State::n\u0010const XmlNode *n\u0003Upp\u0001N\u0015Upp::SvgParser::State\u0015UPP::SVGPARSER::STATE\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\u0000_\u0000\u0000\u0000\u001E\u0000\u0000\u0000_\u0000\u0000\u0000\u0001\u0000\u0000\acurrent\u000Fconst XmlNode *\u0017Upp::SvgParser::current\u0016const XmlNode *current\u0003Upp\aCURRENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000\u0015\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0005state\fArray<State>\u0015Upp::SvgParser::state\u0012Array<State> state\u0003Upp\u0005STATE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0000a\u0000\u0000\u0000\u0016\u0000\u0000\u0000a\u0000\u0000\u0000\u0001\u0000\u0000\u0006closed\u0004bool\u0016Upp::SvgParser::closed\vbool closed\u0003Upp\u0006CLOSED\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u0000b\u0000\u0000\u0000\u0014\u0000\u0000\u0000b\u0000\u0000\u0000\u0001\u0000\u0000\u0004prev\u0006Pointf\u0014Upp::SvgParser::prev\vPointf prev\u0003Upp\u0004PREV\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\u0000c\u0000\u0000\u0000\u001D\u0000\u0000\u0000c\u0000\u0000\u0000\u0001\u0000\u0000\rlastTransform\aXform2D\u001DUpp::SvgParser::lastTransform\u0015Xform2D lastTransform\u0003Upp\rLASTTRANSFORM\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\u0010\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0000d\u0000\u0000\u0000\u0012\u0000\u0000\u0000d\u0000\u0000\u0000\u0001\u0000\u0000\u0002bp\rBoundsPainter\u0012Upp::SvgParser::bp\u0010BoundsPainter bp\u0003Upp\u0002BP\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000#\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000e\u0000\u0000\u0000(\u0000\u0000\u0000e\u0000\u0000\u0000\u0001\u0000\u0000\u0005idmap\"VectorMap<String, const XmlNode *>\u0015Upp::SvgParser::idmap(VectorMap<String, const XmlNode *> idmap\u0003Upp\u0005IDMAP\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\u001B\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000\"\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\aclasses\u0019VectorMap<String, String>\u0017Upp::SvgParser::classes!VectorMap<String, String> classes\u0003Upp\aCLASSES\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000h\u0000\u0000\u0000\r\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\u0005Reset\avoid ()\u0017Upp::SvgParser::Reset()\fvoid Reset()\u0003Upp\u0005RESET\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000j\u0000\u0000\u0000\u0001\u0000\u0000\u0000j\u0000\u0000\u0000/\u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0001\fGetTextColor\u0016Color (const String &)+Upp::SvgParser::GetTextColor(const String&).static Color GetTextColor(const String& color)\u0003Upp\fGETTEXTCOLOR\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u000E\u0000\u0000\u0000k\u0000\u0000\u0000\u0001\u0000\u0000\u0000k\u0000\u0000\u0000*\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0001\bGetColor\u0016Color (const String &)'Upp::SvgParser::GetColor(const String&))static Color GetColor(const String& text)\u0003Upp\bGETCOLOR\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000m\u0000\u0000\u0000\u0001\u0000\u0000\u0000m\u0000\u0000\u0000=\u0000\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\fProcessValue%void (const String &, const String &)9Upp::SvgParser::ProcessValue(const String&,const String&)9void ProcessValue(const String& key, const String& value)\u0003Upp\fPROCESSVALUE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000n\u0000\u0000\u0000!\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0005Style\u0013void (const char *)\"Upp::SvgParser::Style(const char*)\u001Dvoid Style(const char *style)\u0003Upp\u0005STYLE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\t\u0000\u0000\u0000o\u0000\u0000\u0000\u0001\u0000\u0000\u0000o\u0000\u0000\u0000)\u0000\u0000\u0000o\u0000\u0000\u0000\u0000\u0000\u0000\tTransform\u0016Xform2D (const char *)&Upp::SvgParser::Transform(const char*)(Xform2D Transform(const char *transform)\u0003Upp\tTRANSFORM\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000_\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0000\u0000\u0003Txt\u0015String (const char *) Upp::SvgParser::Txt(const char*)\u001AString Txt(const char *id)\u0003Upp\u0003TXT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0000r\u0000\u0000\u0000R\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u0003Dbl\u001Ddouble (const char *, double)'Upp::SvgParser::Dbl(const char*,double)*double Dbl(const char *id, double def = 0)\u0003Upp\u0003DBL\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000t\u0000\u0000\u0000\u0001\u0000\u0000\u0000t\u0000\u0000\u0000$\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\fStartElement\u0016void (const XmlNode &),Upp::SvgParser::StartElement(const XmlNode&)#void StartElement(const XmlNode& n)\u0003Upp\fSTARTELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u0012\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000\u0000\nEndElement\avoid ()\u001CUpp::SvgParser::EndElement()\u0011void EndElement()\u0003Upp\nENDELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u001B\u0000\u0000\u0000v\u0000\u0000\u0000\u0000\u0000\u0000\u0013StrokeFinishElement\avoid ()%Upp::SvgParser::StrokeFinishElement()\u001Avoid StrokeFinishElement()\u0003Upp\u0013STROKEFINISHELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0000w\u0000\u0000\u0000\u0015\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\rFinishElement\avoid ()\u001FUpp::SvgParser::FinishElement()\u0014void FinishElement()\u0003Upp\rFINISHELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000x\u0000\u0000\u0000%\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\nDoGradient\u0010void (int, bool)$Upp::SvgParser::DoGradient(int,bool)$void DoGradient(int gi, bool stroke)\u0003Upp\nDOGRADIENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000y\u0000\u0000\u0000\u0001\u0000\u0000\u0000y\u0000\u0000\u0000'\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000\u0000\u0004Poly\u001Cvoid (const XmlNode &, bool))Upp::SvgParser::Poly(const XmlNode&,bool)&void Poly(const XmlNode& n, bool line)\u0003Upp\u0004POLY\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000z\u0000\u0000\u0000(\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000\u0005Items\u001Bvoid (const XmlNode &, int))Upp::SvgParser::Items(const XmlNode&,int)'void Items(const XmlNode& n, int depth)\u0003Upp\u0005ITEMS\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000B\u0000\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000\aElement!void (const XmlNode &, int, bool)0Upp::SvgParser::Element(const XmlNode&,int,bool)Avoid Element(const XmlNode& n, int depth, bool dosymbols = false)\u0003Upp\aELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000|\u0000\u0000\u0000\u0001\u0000\u0000\u0000|\u0000\u0000\u00002\u0000\u0000\u0000|\u0000\u0000\u0000\u0000\u0000\u0000\rParseGradient\u001Cvoid (const XmlNode &, bool)2Upp::SvgParser::ParseGradient(const XmlNode&,bool)1void ParseGradient(const XmlNode& n, bool radial)\u0003Upp\rPARSEGRADIENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000}\u0000\u0000\u0000\u001C\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u000FResolveGradient\nvoid (int)$Upp::SvgParser::ResolveGradient(int)\u001Bvoid ResolveGradient(int i)\u0003Upp\u000FRESOLVEGRADIENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000~\u0000\u0000\u0000\u0001\u0000\u0000\u0000~\u0000\u0000\u0000\u001E\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0006MapIds\u0016void (const XmlNode &)&Upp::SvgParser::MapIds(const XmlNode&)\u001Dvoid MapIds(const XmlNode& n)\u0003Upp\u0006MAPIDS\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bReadBool\u0010bool (CParser &)\"Upp::SvgParser::ReadBool(CParser&)\u0019bool ReadBool(CParser& p)\u0003Upp\bREADBOOL\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nReadDouble\u0012double (CParser &)$Upp::SvgParser::ReadDouble(CParser&)\u001Ddouble ReadDouble(CParser& p)\u0003Upp\nREADDOUBLE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nReadPoint0\u0018Pointf (CParser &, bool))Upp::SvgParser::ReadPoint0(CParser&,bool)'Pointf ReadPoint0(CParser& p, bool rel)\u0003Upp\nREADPOINT0\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tReadPoint\u0018Pointf (CParser &, bool)(Upp::SvgParser::ReadPoint(CParser&,bool)&Pointf ReadPoint(CParser& p, bool rel)\u0003Upp\tREADPOINT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004Path\u0013void (const char *)!Upp::SvgParser::Path(const char*)\u0018void Path(const char *s)\u0003Upp\u0004PATH\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005Parse\u0013bool (const char *)\"Upp::SvgParser::Parse(const char*)\u001Bbool Parse(const char *xml)\u0003Upp\u0005PARSE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0006\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\tresloader\u0017Event<String, String &>\u0019Upp::SvgParser::resloader Event<String, String&> resloader\u0003Upp\tRESLOADER\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tSvgParser\u0010void (Painter &)#Upp::SvgParser::SvgParser(Painter&)\u0016SvgParser(Painter& sw)\u0003Upp\tSVGPARSER\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000end\u0000ýD\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\SvgUtil.cpp","value":"data\u0004\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\fGetTextColor\u0016Color (const String &)+Upp::SvgParser::GetTextColor(const String&)'Color GetTextColor(const String& color)\u0003Upp\fGETTEXTCOLOR\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0011\u0000\u0000\u0000¢\u0000\u0000\u0000\u0000\u0000\u0000\u0000¢\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ì\u0000\u0000\u0000\u0001\u0000\u0000\bGetColor\u0016Color (const String &)'Upp::SvgParser::GetColor(const String&)#Color GetColor(const String& text_)\u0003Upp\bGETCOLOR\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\b\u0000\u0000\u0000\u000E\u0000\u0000\u0000Î\u0000\u0000\u0000\u0000\u0000\u0000\u0000Î\u0000\u0000\u0000\u0001\u0000\u0000\u0000æ\u0000\u0000\u0000\u0001\u0000\u0000\u0010GetTransformArgs$Array<double> (String, const char *))Upp::GetTransformArgs(String,const char*)?Array<double> GetTransformArgs(String str, const char *command)\u0003Upp\u0010GETTRANSFORMARGS\u0003Upp\u0003UPP\u0000\u0000end\u0000g\u0002\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\SvgBounds.cpp","value":"data\u0018\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0000\u0000\u0003New\avoid ()\u0019Upp::BoundsPainter::New()\nvoid New()\u0003Upp\u0003NEW\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u0000\u0006Bounds\rvoid (Pointf)\"Upp::BoundsPainter::Bounds(Pointf)\u0015void Bounds(Pointf p)\u0003Upp\u0006BOUNDS\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0001\u0001\u0000\u0006MoveOp\u001Bvoid (const Pointf &, bool).Upp::BoundsPainter::MoveOp(const Pointf&,bool)&void MoveOp(const Pointf& p, bool rel)\u0003Upp\u0006MOVEOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0001\u0001\u0000\u0006LineOp\u001Bvoid (const Pointf &, bool).Upp::BoundsPainter::LineOp(const Pointf&,bool)&void LineOp(const Pointf& p, bool rel)\u0003Upp\u0006LINEOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u000FQuadraticMinMax1void (double, double, double, double &, double &):Upp::QuadraticMinMax(double,double,double,double&,double&)Kvoid QuadraticMinMax(double p1, double p2, double p3, double& l, double& h)\u0003Upp\u000FQUADRATICMINMAX\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0001\u0000\u0000\u0000:\u0000\u0000\u0000\u0001\u0000\u0000\tQuadratic%void (const Pointf &, const Pointf &):Upp::BoundsPainter::Quadratic(const Pointf&,const Pointf&)1void Quadratic(const Pointf& p1, const Pointf& p)\u0003Upp\tQUADRATIC\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0001\u0000\vQuadraticOp+void (const Pointf &, const Pointf &, bool)AUpp::BoundsPainter::QuadraticOp(const Pointf&,const Pointf&,bool)9void QuadraticOp(const Pointf& p1, const Pointf& p, bool)\u0003Upp\vQUADRATICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0001\u0000\u0000\u0000E\u0000\u0000\u0000\u0001\u0001\u0000\vQuadraticOp\u001Bvoid (const Pointf &, bool)3Upp::BoundsPainter::QuadraticOp(const Pointf&,bool)'void QuadraticOp(const Pointf& p, bool)\u0003Upp\vQUADRATICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0001\u0000\u0000\u0000Z\u0000\u0000\u0000\u0001\u0000\u0000\vCubicMinMax9void (double, double, double, double, double &, double &)=Upp::CubicMinMax(double,double,double,double,double&,double&)Rvoid CubicMinMax(double p1, double p2, double p3, double p4, double& l, double& h)\u0003Upp\vCUBICMINMAX\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0000\u0000\u0000\u0001\u0000\u0000\u0000f\u0000\u0000\u0000\u0001\u0000\u0000\u0005Cubic5void (const Pointf &, const Pointf &, const Pointf &)DUpp::BoundsPainter::Cubic(const Pointf&,const Pointf&,const Pointf&)?void Cubic(const Pointf& p1, const Pointf& p2, const Pointf& p)\u0003Upp\u0005CUBIC\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0001\u0000\u0000\u0000l\u0000\u0000\u0000\u0001\u0001\u0000\aCubicOp;void (const Pointf &, const Pointf &, const Pointf &, bool)KUpp::BoundsPainter::CubicOp(const Pointf&,const Pointf&,const Pointf&,bool)Gvoid CubicOp(const Pointf& p1, const Pointf& p2, const Pointf& p, bool)\u0003Upp\aCUBICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0001\u0000\u0000\u0000q\u0000\u0000\u0000\u0001\u0001\u0000\aCubicOp+void (const Pointf &, const Pointf &, bool)=Upp::BoundsPainter::CubicOp(const Pointf&,const Pointf&,bool)5void CubicOp(const Pointf& p2, const Pointf& p, bool)\u0003Upp\aCUBICOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0000\u0000\u0000\u0001\u0000\u0000\u0000v\u0000\u0000\u0000\u0001\u0001\u0000\u0005ArcOp;void (const Pointf &, const Pointf &, double, double, bool)IUpp::BoundsPainter::ArcOp(const Pointf&,const Pointf&,double,double,bool)Nvoid ArcOp(const Pointf& c, const Pointf& r, double angle, double sweep, bool)\u0003Upp\u0005ARCOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0001\u0000\bSvgArcOp?void (const Pointf &, double, bool, bool, const Pointf &, bool)OUpp::BoundsPainter::SvgArcOp(const Pointf&,double,bool,bool,const Pointf&,bool)\\void SvgArcOp(const Pointf& r, double xangle, bool large, bool sweep, const Pointf& p, bool)\u0003Upp\bSVGARCOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\aCloseOp\avoid ()\u001DUpp::BoundsPainter::CloseOp()\u000Evoid CloseOp()\u0003Upp\aCLOSEOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0005DivOp\avoid ()\u001BUpp::BoundsPainter::DivOp()\fvoid DivOp()\u0003Upp\u0005DIVOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0006ClipOp\avoid ()\u001CUpp::BoundsPainter::ClipOp()\rvoid ClipOp()\u0003Upp\u0006CLIPOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0006TextOp?void (const Pointf &, const wchar *, Font, int, const double *)MUpp::BoundsPainter::TextOp(const Pointf&,const wchar*,Font,int,const double*)[void TextOp(const Pointf& p, const wchar *text, Font fnt, int n = -1, const double *dx = 0)\u0003Upp\u0006TEXTOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\vCharacterOp void (const Pointf &, int, Font)7Upp::BoundsPainter::CharacterOp(const Pointf&,int,Font)3void CharacterOp(const Pointf& p, int ch, Font fnt)\u0003Upp\vCHARACTEROP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0006Finish\rvoid (double)\"Upp::BoundsPainter::Finish(double)\u001Dvoid Finish(double width = 0)\u0003Upp\u0006FINISH\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000¡\u0000\u0000\u0000\u0000\u0000\u0000\u0000¡\u0000\u0000\u0000\u0001\u0000\u0000\u0000¥\u0000\u0000\u0000\u0001\u0001\u0000\vTransformOp\u0016void (const Xform2D &)/Upp::BoundsPainter::TransformOp(const Xform2D&)\"void TransformOp(const Xform2D& m)\u0003Upp\vTRANSFORMOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000§\u0000\u0000\u0000\u0000\u0000\u0000\u0000§\u0000\u0000\u0000\u0001\u0000\u0000\u0000­\u0000\u0000\u0000\u0001\u0001\u0000\aBeginOp\avoid ()\u001DUpp::BoundsPainter::BeginOp()\u000Evoid BeginOp()\u0003Upp\aBEGINOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000\u0015\u0000\u0000\u0000\u0014\u0000\u0000\u0000¯\u0000\u0000\u0000\u0000\u0000\u0000\u0000¯\u0000\u0000\u0000\u0001\u0000\u0000\u0000³\u0000\u0000\u0000\u0001\u0001\u0000\u0005EndOp\avoid ()\u001BUpp::BoundsPainter::EndOp()\fvoid EndOp()\u0003Upp\u0005ENDOP\u0012Upp::BoundsPainter\u0012UPP::BOUNDSPAINTER\u0000\u0000end\u0000¿\u0013\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\SvgStyle.cpp","value":"data\u0006õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0001\u0000\u0000\u0005Reset\avoid ()\u0017Upp::SvgParser::Reset()\fvoid Reset()\u0003Upp\u0005RESET\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0000\u0000u\u0000\u0000\u0000\u0001\u0000\u0000\fProcessValue%void (const String &, const String &)9Upp::SvgParser::ProcessValue(const String&,const String&):void ProcessValue(const String& key, const String& value_)\u0003Upp\fPROCESSVALUE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000w\u0000\u0000\u0000\u0000\u0000\u0000\u0000w\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0005Style\u0013void (const char *)\"Upp::SvgParser::Style(const char*)\u001Dvoid Style(const char *style)\u0003Upp\u0005STYLE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000Ä\u0000\u0000\u0000\u0001\u0000\u0000\tTransform\u0016Xform2D (const char *)&Upp::SvgParser::Transform(const char*)(Xform2D Transform(const char *transform)\u0003Upp\tTRANSFORM\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000end\u0000\u0018\u0003\u0000\u0000"},{"key":"C:\\Users\\sblo\\ai-upp\\uppsrc\\Painter\\SvgParser.cpp","value":"data õ\u0001\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0004LLOG\u0000\u0004LLOG\u0004LLOG\u0000\u0004LLOG\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0000!\u0000\u0000\u0000\u0001\u0000\u0000\u000FResolveGradient\nvoid (int)$Upp::SvgParser::ResolveGradient(int)\u001Bvoid ResolveGradient(int i)\u0003Upp\u000FRESOLVEGRADIENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0001\u0000\u0000\fStartElement\u0016void (const XmlNode &),Upp::SvgParser::StartElement(const XmlNode&)#void StartElement(const XmlNode& n)\u0003Upp\fSTARTELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0001\u0000\u0000\u0000<\u0000\u0000\u0000\u0001\u0000\u0000\nEndElement\avoid ()\u001CUpp::SvgParser::EndElement()\u0011void EndElement()\u0003Upp\nENDELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000{\u0000\u0000\u0000\u0001\u0000\u0000\nDoGradient\u0010void (int, bool)$Upp::SvgParser::DoGradient(int,bool)$void DoGradient(int gi, bool stroke)\u0003Upp\nDOGRADIENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000}\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0013StrokeFinishElement\avoid ()%Upp::SvgParser::StrokeFinishElement()\u001Avoid StrokeFinishElement()\u0003Upp\u0013STROKEFINISHELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000©\u0000\u0000\u0000\u0001\u0000\u0000\rFinishElement\avoid ()\u001FUpp::SvgParser::FinishElement()\u0014void FinishElement()\u0003Upp\rFINISHELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000«\u0000\u0000\u0000\u0001\u0000\u0000\u0000ð\u0000\u0000\u0000\u0001\u0000\u0000\rParseGradient\u001Cvoid (const XmlNode &, bool)2Upp::SvgParser::ParseGradient(const XmlNode&,bool)1void ParseGradient(const XmlNode& n, bool radial)\u0003Upp\rPARSEGRADIENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000ò\u0000\u0000\u0000\u0000\u0000\u0000\u0000ò\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000E\u0001\u0000\u0000\u0001\u0000\u0000\u0004Poly\u001Cvoid (const XmlNode &, bool))Upp::SvgParser::Poly(const XmlNode&,bool)&void Poly(const XmlNode& n, bool line)\u0003Upp\u0004POLY\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\nReadNumber\u0012double (CParser &)\u0019Upp::ReadNumber(CParser&)\u001Ddouble ReadNumber(CParser& p)\u0003Upp\nREADNUMBER\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0001\u0000\u0000\u0000'\u0001\u0000\u0000\u0001\u0000\u0000\rGetSvgViewBox\u0016Rectf (const String &)!Upp::GetSvgViewBox(const String&)$Rectf GetSvgViewBox(const String& v)\u0003Upp\rGETSVGVIEWBOX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0001\u0000\u0000\u0000,\u0001\u0000\u0000\u0001\u0000\u0000\rGetSvgViewBox\u0013Rectf (XmlParser &)\u001EUpp::GetSvgViewBox(XmlParser&)#Rectf GetSvgViewBox(XmlParser& xml)\u0003Upp\rGETSVGVIEWBOX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000.\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0001\u0000\u0000\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u0001\u0000\u0000\rGetSvgViewBox\u0017Rectf (const XmlNode &)\"Upp::GetSvgViewBox(const XmlNode&)'Rectf GetSvgViewBox(const XmlNode& xml)\u0003Upp\rGETSVGVIEWBOX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u0000\u0000\u00003\u0001\u0000\u0000\u0001\u0000\u0000\u0000;\u0001\u0000\u0000\u0001\u0000\u0000\nGetSvgSize\u0013Sizef (XmlParser &)\u001BUpp::GetSvgSize(XmlParser&) Sizef GetSvgSize(XmlParser& xml)\u0003Upp\nGETSVGSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000\u0000\u0000=\u0001\u0000\u0000\u0001\u0000\u0000\u0000E\u0001\u0000\u0000\u0001\u0000\u0000\tGetSvgPos\u0014Pointf (XmlParser &)\u001AUpp::GetSvgPos(XmlParser&) Pointf GetSvgPos(XmlParser& xml)\u0003Upp\tGETSVGPOS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0001\u0000\u0000\u0000O\u0001\u0000\u0000\u0001\u0000\u0000\nGetSvgSize\u0017Sizef (const XmlNode &)\u001FUpp::GetSvgSize(const XmlNode&)$Sizef GetSvgSize(const XmlNode& xml)\u0003Upp\nGETSVGSIZE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\a\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0001\u0000\u0000\u0000Y\u0001\u0000\u0000\u0001\u0000\u0000\tGetSvgPos\u0018Pointf (const XmlNode &)\u001EUpp::GetSvgPos(const XmlNode&)$Pointf GetSvgPos(const XmlNode& xml)\u0003Upp\tGETSVGPOS\u0003Upp\u0003UPP\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000[\u0001\u0000\u0000\u0000\u0000\u0000\u0000[\u0001\u0000\u0000\u0001\u0000\u0000\u0000ú\u0001\u0000\u0000\u0001\u0000\u0000\aElement!void (const XmlNode &, int, bool)0Upp::SvgParser::Element(const XmlNode&,int,bool)Avoid Element(const XmlNode& n, int depth, bool dosymbols = false)\u0003Upp\aELEMENT\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000ü\u0001\u0000\u0000\u0000\u0000\u0000\u0000ü\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0002\u0000\u0000\u0001\u0000\u0000\u0005Items\u001Bvoid (const XmlNode &, int))Upp::SvgParser::Items(const XmlNode&,int)'void Items(const XmlNode& n, int depth)\u0003Upp\u0005ITEMS\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0004\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0002\u0000\u0000\u0001\u0000\u0000\u0000\v\u0002\u0000\u0000\u0001\u0000\u0000\u0006MapIds\u0016void (const XmlNode &)&Upp::SvgParser::MapIds(const XmlNode&)\u001Dvoid MapIds(const XmlNode& n)\u0003Upp\u0006MAPIDS\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0015\u0000\u0000\u0000\u0010\u0000\u0000\u0000\r\u0002\u0000\u0000\u0000\u0000\u0000\u0000\r\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u0019\u0002\u0000\u0000\u0001\u0000\u0000\u0005Parse\u0013bool (const char *)\"Upp::SvgParser::Parse(const char*)\u001Bbool Parse(const char *xml)\u0003Upp\u0005PARSE\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\u0018\u0000\u0000\u0000\v\u0000\u0000\u0000\u001B\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u001B\u0002\u0000\u0000\u0001\u0000\u0000\u0000\u001F\u0002\u0000\u0000\u0001\u0000\u0000\tSvgParser\u0010void (Painter &)#Upp::SvgParser::SvgParser(Painter&)\u0016SvgParser(Painter& sw)\u0003Upp\tSVGPARSER\u000EUpp::SvgParser\u000EUPP::SVGPARSER\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000!\u0002\u0000\u0000\u0000\u0000\u0000\u0000!\u0002\u0000\u0000\u0001\u0000\u0000\u0000+\u0002\u0000\u0000\u0001\u0000\u0000\bParseSVG@bool (Painter &, const char *, Event<String, String &>, Rectf *)0Upp::ParseSVG(Painter&,const char*,Event,Rectf*)`bool ParseSVG(Painter& p, const char *svg, Event<String, String&> resloader, Rectf *boundingbox)\u0003Upp\bPARSESVG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000-\u0002\u0000\u0000\u0000\u0000\u0000\u0000-\u0002\u0000\u0000\u0001\u0000\u0000\u00000\u0002\u0000\u0000\u0001\u0000\u0000\tRenderSVG7bool (Painter &, const char *, Event<String, String &>)*Upp::RenderSVG(Painter&,const char*,Event)Mbool RenderSVG(Painter& p, const char *svg, Event<String, String&> resloader)\u0003Upp\tRENDERSVG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00002\u0002\u0000\u0000\u0000\u0000\u0000\u00002\u0002\u0000\u0000\u0001\u0000\u0000\u00005\u0002\u0000\u0000\u0001\u0000\u0000\tRenderSVG\u001Ebool (Painter &, const char *)$Upp::RenderSVG(Painter&,const char*)+bool RenderSVG(Painter& p, const char *svg)\u0003Upp\tRENDERSVG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u00007\u0002\u0000\u0000\u0000\u0000\u0000\u00007\u0002\u0000\u0000\u0001\u0000\u0000\u0000E\u0002\u0000\u0000\u0001\u0000\u0000\u0010GetSVGDimensions%void (const char *, Sizef &, Rectf &)0Upp::GetSVGDimensions(const char*,Sizef&,Rectf&)Avoid GetSVGDimensions(const char *svg, Sizef& sz, Rectf& viewbox)\u0003Upp\u0010GETSVGDIMENSIONS\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000G\u0002\u0000\u0000\u0000\u0000\u0000\u0000G\u0002\u0000\u0000\u0001\u0000\u0000\u0000N\u0002\u0000\u0000\u0001\u0000\u0000\u0011GetSVGBoundingBox\u0014Rectf (const char *)#Upp::GetSVGBoundingBox(const char*)(Rectf GetSVGBoundingBox(const char *svg)\u0003Upp\u0011GETSVGBOUNDINGBOX\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000P\u0002\u0000\u0000\u0000\u0000\u0000\u0000P\u0002\u0000\u0000\u0001\u0000\u0000\u0000^\u0002\u0000\u0000\u0001\u0000\u0000\u000ERenderSVGImage3Image (Size, const char *, Event<String, String &>)+Upp::RenderSVGImage(Size,const char*,Event)PImage RenderSVGImage(Size sz, const char *svg, Event<String, String&> resloader)\u0003Upp\u000ERENDERSVGIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000`\u0002\u0000\u0000\u0000\u0000\u0000\u0000`\u0002\u0000\u0000\u0001\u0000\u0000\u0000c\u0002\u0000\u0000\u0001\u0000\u0000\u000ERenderSVGImage\u001AImage (Size, const char *)%Upp::RenderSVGImage(Size,const char*).Image RenderSVGImage(Size sz, const char *svg)\u0003Upp\u000ERENDERSVGIMAGE\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0005\u0000\u0000\u0000e\u0002\u0000\u0000\u0000\u0000\u0000\u0000e\u0002\u0000\u0000\u0001\u0000\u0000\u0000q\u0002\u0000\u0000\u0001\u0000\u0000\u0005IsSVG\u0013bool (const char *)\u0017Upp::IsSVG(const char*)\u001Bbool IsSVG(const char *svg)\u0003Upp\u0005ISSVG\u0003Upp\u0003UPP\u0000\u0000\b\u0000\u0000\u0000\u0006\u0000\u0000\u0000s\u0002\u0000\u0000\u0000\u0000\u0000\u0000s\u0002\u0000\u0000\u0001\u0000\u0000\u0000y\u0002\u0000\u0000\u0001\u0000\u0000\u0015GetSVGPathBoundingBox\u0014Rectf (const char *)'Upp::GetSVGPathBoundingBox(const char*)-Rectf GetSVGPathBoundingBox(const char *path)\u0003Upp\u0015GETSVGPATHBOUNDINGBOX\u0003Upp\u0003UPP\u0000\u0000end\u0000®\u0015\u0000\u0000"}]}