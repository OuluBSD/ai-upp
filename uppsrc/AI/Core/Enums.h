#ifndef _AI_TextCore_Enums_h_
#define _AI_TextCore_Enums_h_

NAMESPACE_UPP

// TODO move to a file
enum {
	SCORE_IDEA,
	SCORE_EMOTION,
	SCORE_HOOK,
	SCORE_SHARE,
	SCORE_VALUE,
	SCORE_COMEDY,
	SCORE_SEX,
	SCORE_POLITICS,
	SCORE_LOVE,
	SCORE_SOCIAL,

	SCORE_COUNT
};

extern const char* ScoreTitles[SCORE_COUNT];
extern const char* ScoreDescriptions[SCORE_COUNT];
String GetScoreKey(int score);
String GetScoreTitle(int score);
String GetScoreDescription(int score);

// TODO rename these to DB_DATA_SRC_TYPE or something
// TODO these should be removed
enum {
	DB_SONG,
	DB_TWITTER,
	DB_BLOG,
	DB_DIALOG,
	DB_STORYBOARD,
	DB_CODE,
	
	DB_COUNT
};

inline String GetAppModeString(int appmode) {
	switch (appmode) {
		case DB_SONG:			return "Song";
		case DB_TWITTER:		return "Twitter";
		case DB_BLOG:			return "Blog";
		case DB_DIALOG:			return "Dialog";
		case DB_STORYBOARD:		return "Storyboard";
		case DB_CODE:			return "Code";
		default: break;
	}
	return "<error>";
}

enum {
	STRESS_NONE,
	STRESS_PRIMARY,
	STRESS_SECONDARY,
};

enum {
#define ATTR_ITEM(e, g, i0, i1) e,
ATTR_LIST
#undef ATTR_ITEM
ATTR_COUNT
};

enum {
#define TYPECAST(idx, str, c) TYPECAST_##idx,
TYPECAST_LIST
#undef TYPECAST
TYPECAST_COUNT
};

enum {
#define CONTENT(idx, str) CONTENT_##idx,
CONTENT_LIST
#undef CONTENT
CONTENT_COUNT
};

// Categories (with opposites... see pairs)
enum {
	CATEGORY_CODE,
	CATEGORY_ECS,
	
	CATEGORY_ASSET,
	CATEGORY_DISPOSABLE,
	
	CATEGORY_PRIVATE,
	CATEGORY_PUBLIC,
	
	CATEGORY_MALE,
	CATEGORY_FEMALE,
	
	CATEGORY_BUYER,
	CATEGORY_SELLER,
	
	CATEGORY_CONSUMER,
	CATEGORY_MARKETER,
	
	CATEGORY_SOUND,
	CATEGORY_TEXT,
	
	CATEGORY_PHOTO,
	CATEGORY_VIDEO,
	
	#if 0
	CATEGORY_2D,
	CATEGORY_3D,
	
	CATEGORY_STATIC,
	CATEGORY_DYNAMIC,
	#endif
	
	CATEGORY_COUNT // feel free to add
};

enum {
	CATEGORY_GROUP_PROGRAMMING,
	CATEGORY_GROUP_VALUE,
	CATEGORY_GROUP_VISIBILITY,
	CATEGORY_GROUP_GENDER,
	CATEGORY_GROUP_TRANSACTION,
	CATEGORY_GROUP_DESIRABILITY,
	CATEGORY_GROUP_AUDIO_PRODUCT,
	CATEGORY_GROUP_VISUAL_PRODUCT,
	
	CATEGORY_GROUP_COUNT
};
String GetCategoryGroupString(int i);
String GetCategoryString(int i);
Vector<String> GetCategories();
int FindCategory(const String& s);

enum{
	TCENT_SAFE_MALE,
	TCENT_SAFE_FEMALE,
	TCENT_UNSAFE_MALE,
	TCENT_UNSAFE_FEMALE,
	
	TCENT_COUNT
};

inline int GetTypeclassEntity(bool unsafe, bool gender) {
	return unsafe * 2 + gender * 1;
}


enum {
	MARKETPRIORITY_IN_SALE,
	MARKETPRIORITY_SELL_UPCOMING,
	MARKETPRIORITY_SOLD,
	MARKETPRIORITY_POSTPONE_SELL,
	MARKETPRIORITY_WONT_SELL,
	
	MARKETPRIORITY_COUNT
};

String GetMarketPriorityKey(int i);

// TODO move to a file
// TODO: maybe rename some of these
#define BIOCATEGORY_LIST \
	BIOCATEGORY(HOME) \
	BIOCATEGORY(HOME_KITCHEN) \
	BIOCATEGORY(HOME_WORKDESK) \
	BIOCATEGORY(HOME_BEDROOM) \
	BIOCATEGORY(HOME_COMPUTER) \
	BIOCATEGORY(PEOPLE_FRIENDS) \
	BIOCATEGORY(PEOPLE_CLOSE_FRIENDS) \
	BIOCATEGORY(PEOPLE_ENEMIES) \
	BIOCATEGORY(PEOPLE_PUBLIC_IN_GENERAL) \
	BIOCATEGORY(PEOPLE_SYSTEMIC_ENEMIES) \
	BIOCATEGORY(SEXUALITY_ADULT_ENTERNTAINMENT) \
	BIOCATEGORY(SEXUALITY_EXPERIENCES) \
	BIOCATEGORY(EDUCATION_CAMPUS) \
	BIOCATEGORY(EDUCATION_HOME) \
	BIOCATEGORY(EDUCATION_INTERNET) \
	BIOCATEGORY(EDUCATION_MUSIC_PRODUCTION) \
	BIOCATEGORY(FAMILY_PARENTAL) \
	BIOCATEGORY(FAMILY_OWN) \
	BIOCATEGORY(EVENTS_MUSIC) \
	BIOCATEGORY(EVENTS_SPORT) \
	BIOCATEGORY(EVENTS_FOOD) \
	BIOCATEGORY(EVENTS_OTHER) \
	BIOCATEGORY(POLITICAL) \
	BIOCATEGORY(POLITICAL_PIRATISM) \
	BIOCATEGORY(PERSONAL_TASTE_FOOD) \
	BIOCATEGORY(PERSONAL_TASTE_ENTERNTAINMENT) \
	BIOCATEGORY(PERSONAL_TASTE_VIDEOGAMES) \
	BIOCATEGORY(PERSONAL_TASTE_MOVIES) \
	BIOCATEGORY(PERSONAL_TASTE_TV) \
	BIOCATEGORY(PERSONAL_TASTE_BOOKS) \
	BIOCATEGORY(PERSONAL_TASTE_WORLD_INFORMATION) \
	BIOCATEGORY(PERSONAL_TASTE_HOBBIES) \
	BIOCATEGORY(PERSONAL_TASTE_PHYSICAL_EXERCISE) \
	BIOCATEGORY(PERSONAL_TASTE_ADVENTURES) \
	BIOCATEGORY(PERSONAL_TASTE_YOUTUBE) \
	BIOCATEGORY(PERSONAL_TASTE_MUSIC) \
	BIOCATEGORY(TRADING_BUYING) \
	BIOCATEGORY(TRADING_SELLING) \
	BIOCATEGORY(HEALTH) \
	BIOCATEGORY(HEALTH_SUPPLEMENTS) \
	BIOCATEGORY(HEALTH_MEDICATION) \
	BIOCATEGORY(HEALTH_DOCTOR) \
	BIOCATEGORY(HEALTH_OPERATIONS) \
	BIOCATEGORY(ANIMALS_PETS) \
	BIOCATEGORY(ANIMALS_WILD) \
	BIOCATEGORY(WORK_PROGRAMMING) \
	BIOCATEGORY(WORK_MUSIC_COLLABORATION) \
	BIOCATEGORY(WORK_MUSIC_PRODUCTION) \
	BIOCATEGORY(WORK_SONGWRITING) \
	BIOCATEGORY(BADGE_OF_HONOR) \
	BIOCATEGORY(BADGE_OF_SHAME) \
	BIOCATEGORY(BADGE_OF_JUDGEMENT) \
	BIOCATEGORY(POLITICAL_IDENTITY) \
	BIOCATEGORY(MYSELF) \
	BIOCATEGORY(COTTAGE) \
	BIOCATEGORY(BADGE_OF_HONOR_FOR_SEXUALITY) \
	BIOCATEGORY(BADGE_OF_SHAME_FOR_SEXUALITY) \
	BIOCATEGORY(BADGE_OF_JUDGEMENT_FOR_SEXUALITY) \
	BIOCATEGORY(BADGE_OF_HONOR_FOR_RELATIONSHIPS) \
	BIOCATEGORY(BADGE_OF_SHAME_FOR_RELATIONSHIPS) \
	BIOCATEGORY(BADGE_OF_JUDGEMENT_FOR_RELATIONSHIPS) \
	BIOCATEGORY(BADGE_OF_HONOR_FOR_SOCIAL_ISSUES) \
	BIOCATEGORY(BADGE_OF_SHAME_FOR_SOCIAL_ISSUES) \
	BIOCATEGORY(BADGE_OF_JUDGEMENT_FOR_SOCIAL_ISSUES) \

enum {
	#define BIOCATEGORY(x) BIOCATEGORY_##x,
	BIOCATEGORY_LIST
	#undef BIOCATEGORY
	
	BIOCATEGORY_COUNT
};

String GetBiographyCategoryEnum(int i);
String GetBiographyCategoryKey(int i);
const char* GetBiographyCategoryEnumCstr(int i);
int FindBiographyCategoryEnum(String s);

// TODO move to a file
#define SOCIETYROLE_LIST \
	SOCIETYROLE(WIFE) \
	SOCIETYROLE(BEST_MAN) \
	SOCIETYROLE(MOTHER) \
	SOCIETYROLE(FATHER) \
	SOCIETYROLE(LITTLE_SISTER) \
	SOCIETYROLE(LITTLE_BROTHER) \
	SOCIETYROLE(BIG_SISTER) \
	SOCIETYROLE(BIG_BROTHER) \
	SOCIETYROLE(MATERNAL_GRANDMOTHER) \
	SOCIETYROLE(MATERNAL_GRANDFATHER) \
	SOCIETYROLE(PATERNAL_GRANDMOTHER) \
	SOCIETYROLE(PATERNAL_GRANDFATHER) \
	SOCIETYROLE(MATERNAL_AUNT) \
	SOCIETYROLE(MATERNAL_UNCLE) \
	SOCIETYROLE(PATERNAL_AUNT) \
	SOCIETYROLE(PATERNAL_UNCLE) \
	SOCIETYROLE(MATERNAL_FEMALE_COUSIN) \
	SOCIETYROLE(MATERNAL_MALE_COUSIN) \
	SOCIETYROLE(PATERNAL_FEMALE_COUSIN) \
	SOCIETYROLE(PATERNAL_MALE_COUSIN) \
	\
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_IMAGE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_IMAGE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_REEL_VIDEO_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_REEL_VIDEO_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_VIDEO_STREAMING_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_VIDEO_STREAMING_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_MODERATE_FULL_PROFILE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_MODERATE_FULL_PROFILE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_MODERATE_VIDEO_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_MODERATE_VIDEO_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_PROFSSIONAL_INDUSTRY_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_PROFSSIONAL_INDUSTRY_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SOCIAL_MUSIC_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SOCIAL_MUSIC_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SOCIAL_PROGRAMMING_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SOCIAL_PROGRAMMING_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_FORUM_MUSIC) \
	SOCIETYROLE(  MALE_IN_INTERNET_FORUM_MUSIC) \
	SOCIETYROLE(FEMALE_IN_INTERNET_FORUM_PROGRAMMING) \
	SOCIETYROLE(  MALE_IN_INTERNET_FORUM_PROGRAMMING) \
	SOCIETYROLE(FEMALE_IN_INTERNET_WEBSITE_READER) /* a person who reads a website */ \
	SOCIETYROLE(  MALE_IN_INTERNET_WEBSITE_READER) \
	SOCIETYROLE(FEMALE_IN_INTERNET_MUSIC_COOPERATION_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_MUSIC_COOPERATION_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_PROGRAMMING_COOPERATION_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_PROGRAMMING_COOPERATION_SITE) \
	\
	SOCIETYROLE(FEMALE_PEER_IN_MILITARY_SERVICE) \
	SOCIETYROLE(  MALE_PEER_IN_MILITARY_SERVICE) \
	SOCIETYROLE(FEMALE_SUPERIOR_IN_MILITARY_SERVICE) \
	SOCIETYROLE(  MALE_SUPERIOR_IN_MILITARY_SERVICE) \
	SOCIETYROLE(FEMALE_INFERIOR_IN_MILITARY_SERVICE) \
	SOCIETYROLE(  MALE_INFERIOR_IN_MILITARY_SERVICE) \
	\
	SOCIETYROLE(DAUGHTER) \
	SOCIETYROLE(SON) \
	SOCIETYROLE(FEMALE_RECRUITER_FOR_WORK) \
	SOCIETYROLE(  MALE_RECRUITER_FOR_WORK) \
	SOCIETYROLE(FEMALE_IN_INTERNET_REPUBLICAN_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_REPUBLICAN_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_INFLUENCER_FOR_ART_AND_MUSIC) \
	SOCIETYROLE(  MALE_IN_INTERNET_INFLUENCER_FOR_ART_AND_MUSIC) \
	\
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_COMPOSERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_COMPOSERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_LYRICISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_LYRICISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_PUBLISHERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_PUBLISHERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_PERFORMING_ARTISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_PERFORMING_ARTISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_RECORD_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_RECORD_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_JOURNALISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_JOURNALISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSICIANS_AND_MUSIC_WORKERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSICIANS_AND_MUSIC_WORKERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_EDUCATORS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_EDUCATORS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_RECORD_ARCHIVERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_RECORD_ARCHIVERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_ACCOUNTANTS_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_ACCOUNTANTS_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_ARTIST_MANAGERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_ARTIST_MANAGERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_CONSUMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_CONSUMERS) \
	\
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_ACCOUNTANTS_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_ACCOUNTANTS_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_SOFTWARE_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_SOFTWARE_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_SOFTWARE_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_SOFTWARE_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_SOFTWARE_PROJECT_MANAGERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_SOFTWARE_PROJECT_MANAGERS) \
	\
	SOCIETYROLE(ANGRY_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(EMPATHETIC_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(CURIOUS_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(ENTHUSIASTIC_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(SKEPTICAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(CONFUSED_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(EMOTIONAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(CRITICAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(MOTIVATIONAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(SUPPORTIVE_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(ANXIOUS_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(HUMOROUS_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(DEFENSIVE_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(OVERWHELMED_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(NOSTALGIC_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(OBJECTIVE_PERSON_IN_THE_INTERNET) \



enum {
	#define SOCIETYROLE(x) SOCIETYROLE_##x,
	SOCIETYROLE_LIST
	#undef SOCIETYROLE
	
	SOCIETYROLE_COUNT
};

String GetSocietyRoleEnum(int i);
String GetSocietyRoleKey(int i);
String GetSocietyRoleDescription(int i);


// TODO move to a file
#define SOCIETYROLE_SCORE_LIST \
	SOCIETYROLE_SCORE(FAMILY_CHOSEN_BY_ME) \
	SOCIETYROLE_SCORE(FAMILY_CAUSED_BY_MY_PARENTS) \
	SOCIETYROLE_SCORE(GENERAL_PUBLIC) \
	SOCIETYROLE_SCORE(EMOTIONAL_PEOPLE) \
	SOCIETYROLE_SCORE(REPRESENTATIVE_FOR_RIGHTS_OF_SOMEONE) \
	\
	SOCIETYROLE_SCORE(REPRESENTATIVE_FOR_INTEREST_OF_SOMEONE) \
	SOCIETYROLE_SCORE(FEMALE) \
	SOCIETYROLE_SCORE(MALE) \
	SOCIETYROLE_SCORE(MUSIC_RELATED) \
	SOCIETYROLE_SCORE(COMPUTER_RELATED) \
	\
	SOCIETYROLE_SCORE(WORK_RELATED) \
	SOCIETYROLE_SCORE(MILTARY_RANK_RELATED) \
	SOCIETYROLE_SCORE(SHALLOWNESS) \
	SOCIETYROLE_SCORE(PROFESSIONALISM) \


enum {
	#define SOCIETYROLE_SCORE(x) SOCIETYROLE_SCORE_##x,
	SOCIETYROLE_SCORE_LIST
	#undef SOCIETYROLE_SCORE
	
	SOCIETYROLE_SCORE_COUNT
};

String GetSocietyRoleScoreKey(int i);
String GetSocietyRoleScoreEnum(int i);

enum {
	BIOSCORE_EMPATHY,
	BIOSCORE_ATTRACTION,
	BIOSCORE_VALUE,
	BIOSCORE_LEADERSHIP,
	
	BIOSCORE_COUNT
};

enum {
	PLATDESC_MODE_FINAL,
	PLATDESC_MODE_FINAL_DIALECT,
	PLATDESC_MODE_FINAL_TRANSLATED,
	PLATDESC_MODE_FINAL_TRANSLATED_DIALECT,
	
	PLATDESC_MODE_COUNT,
};

enum {
	PLATDESC_LEN_FULL,
	PLATDESC_LEN_1280_CHARS,
	PLATDESC_LEN_160_CHARS,
	PLATDESC_LEN_40_CHARS,
	
	PLATDESC_LEN_COUNT,
};

String GetPlatformDescriptionModeKey(int i);
String GetPlatformDescriptionLengthKey(int i);
int GetPlatformDescriptionLength(int i);

// TODO move to a file
enum {
	PLATFORM_EMAIL,
	PLATFORM_TWITTER,
	PLATFORM_THREADS,
	PLATFORM_FACEBOOK,
	PLATFORM_INSTAGRAM,
	
	PLATFORM_TIKTOK,
	PLATFORM_GETTR,
	PLATFORM_LINKEDIN,
	PLATFORM_SOUNDCLOUD,
	PLATFORM_MUSIC_DISTRIBUTOR, // e.g. distrokid
	
	
	PLATFORM_YOUTUBE,
	PLATFORM_VK,
	PLATFORM_REDDIT,
	PLATFORM_FORUM,
	PLATFORM_BLOGGER,
	
	PLATFORM_WEBSITE,
	PLATFORM_TWITCH,
	PLATFORM_STUMBLE,
	PLATFORM_GITHUB,
	PLATFORM_MYSPACE,
	
	
	PLATFORM_MIKSERINET,
	PLATFORM_IRCGALLERIA,
	PLATFORM_DISCORD,
	PLATFORM_MUKKEN,
	PLATFORM_BANDCAMP,
	
	PLATFORM_REMOTEMORE,
	PLATFORM_KUVAKENET,
	PLATFORM_REVERBNATION,
	PLATFORM_SONICBIDS,
	PLATFORM_MUSICGATEWAY,
	
	
	PLATFORM_INDIEONTHEMOVE,
	PLATFORM_VOWAVE, // vowave.com
	PLATFORM_AUDIUS, // audius.co
	PLATFORM_SONGTRADR, // songtradr.com
	PLATFORM_GROOVER, // groover.co
	
	PLATFORM_AIRPLAYDIRECT,
	PLATFORM_N1M, // n1m.com
	PLATFORM_SOUNDBETTER, // soundbetter.com
	PLATFORM_ABOUTME, // about.me
	PLATFORM_FIVERR, // fiverr.com
	
	
	PLATFORM_THEDOTS, // the-dots.com
	PLATFORM_CONSTANTCONTACT, // constantcontact.com
	PLATFORM_MUUSIKOIDEN_NET,
	PLATFORM_PODCAST,
	PLATFORM_TINDER,
	
	PLATFORM_PATREON,
	PLATFORM_LOCALS,
	
	// Add these!
	// PLATFORM_MUSOSOUP // musosoup.com
	// PLATFORM_UPCOMINGSOUNDS // upcomingsounds.com
	
	// Don't add these...
	// PLATFORM_SOUNDMASH, // soundmash.me
	// PLATFORM_INSTRUMENTAL, // https://weareinstrumental.com/
	// PLATFORM_DISCOGS, // discogs.com
	// PLATFORM_ALLMUSIC, // allmusic.com
	
	
	PLATFORM_COUNT
};


#define PLATFORM_PROFILE_LIST \
	PLATFORM_PROFILE(ANY) \
	PLATFORM_PROFILE(MUSIC_ARTIST) \
	PLATFORM_PROFILE(VISUAL_ARTIST) \
	PLATFORM_PROFILE(PHOTOGRAPHER) \
	PLATFORM_PROFILE(REAL_PERSON) \
	
enum {
	#define PLATFORM_PROFILE(x) PLATFORM_PROFILE_##x,
	PLATFORM_PROFILE_LIST
	#undef PLATFORM_PROFILE
	
	PLATFORM_PROFILE_COUNT,
};

const char* GetPlatformProfileEnum(int i);
String GetPlatformProfileKey(int i);

#define PLATFORM_ATTR_LIST \
	PLATFORM_ATTR(TITLE) \
	PLATFORM_ATTR(MESSAGE) \
	PLATFORM_ATTR(HASHTAGS) \
	PLATFORM_ATTR(AUDIO) \
	PLATFORM_ATTR(MUSIC) \
	PLATFORM_ATTR(VIDEO) \
	PLATFORM_ATTR(REEL) \
	PLATFORM_ATTR(IMAGE) \
	PLATFORM_ATTR(LINK_PROMOTION) \
	PLATFORM_ATTR(COMMENTS) \
	PLATFORM_ATTR(COMMENT_SELF_PROMOTION_HACK) \
	PLATFORM_ATTR(DESCRIPTION) \
	PLATFORM_ATTR(PROFILE_IMAGE) \
	PLATFORM_ATTR(MUSIC_COVER) \
	PLATFORM_ATTR(Q_AND_A) \
	PLATFORM_ATTR(Q_AND_A_HACK) \
	PLATFORM_ATTR(TESTIMONIAL_HACK) \


enum {
	#define PLATFORM_ATTR(x) PLATFORM_ATTR_##x,
	PLATFORM_ATTR_LIST
	#undef PLATFORM_ATTR
	
	PLATFORM_ATTR_COUNT,
};

const char* GetPlatformAttrEnum(int i);
String GetPlatformAttrKey(int i);


enum {
	TIME_ACCURACY_NONE,
	TIME_ACCURACY_DATE,
	TIME_ACCURACY_TIME,
	
	TIME_ACCURACY_COUNT,
};

enum {
	#undef LNG_ENGLISH
	LNG_NATIVE,
	LNG_ENGLISH,
	LNG_FINNISH,
	LNG_SPANISH,
	LNG_PORTUGUESE,
	LNG_KOREAN,
	LNG_JAPANESE,
	LNG_RUSSIAN,
	LNG_CHINESE,
	
	LNG_COUNT
};

int GetLanguageCount();
const char* GetLanguageKey(int i);
const char* GetLanguageCode(int i);


// TODO barely fits in Enums.h
struct RoleProfile {
	String name, profile;
	void Set(String name, String profile) {this->name = name; this->profile = profile;}
	void Jsonize(JsonIO& json) {
		json("name", name)
			;
	}
};

const Array<RoleProfile>& GetRoleProfile(int role_i);

enum {
	SNAPANAL_LYRICS_SUMMARY,
	SNAPANAL_LYRICS_PSYCHOANALYSIS,
	SNAPANAL_LYRICS_SOCIAL_PSYCHOLOGY_ANALYSIS,
	SNAPANAL_MARKET_VALUE_ANALYSIS,
	SNAPANAL_MARKETING_SUGGESTION,
	SNAPANAL_ART_SUGGESTION,
	SNAPANAL_COVER_SUGGESTION,
	
	SNAPANAL_COUNT,
};

String GetSnapshotAnalysisKey(int i);

// TODO move to file
enum {
	LISTING_SONG_BOOLEAN_IS_ALLOWED_MALE,
	LISTING_SONG_BOOLEAN_IS_ALLOWED_FEMALE,
	LISTING_SONG_BOOLEAN_ALLOWED_DEMO_QUALITY,
	LISTING_SONG_BOOLEAN_MUST_BE_BROADCAST_QUALITY,
	LISTING_SONG_BOOLEAN_MONETARY_SIGNIFICANT_INCOME,
	LISTING_SONG_BOOLEAN_MONETARY_DIFFICULT_TO_DETERMINE,
	LISTING_SONG_BOOLEAN_MONETARY_COULD_BE_ROYALTIES,
	LISTING_SONG_BOOLEAN_MONETARY_FUTURE_COLLABS,
	LISTING_SONG_BOOLEAN_IS_EXCLUSIVE,
	LISTING_SONG_BOOLEAN_PLACEMENT_TV,
	LISTING_SONG_BOOLEAN_PLACEMENT_RADIO,
	LISTING_SONG_BOOLEAN_PLACEMENT_MOVIE,
	LISTING_SONG_BOOLEAN_PLACEMENT_AD,
	LISTING_SONG_BOOLEAN_PLACEMENT_PLAYLIST,
	LISTING_SONG_BOOLEAN_LISTING_WRITER_IS_DECISION_MAKER,
	LISTING_SONG_BOOLEAN_LISTING_WRITER_IS_COMPANY,
	LISTING_SONG_BOOLEAN_LISTING_WRITER_IS_PERSON,
	LISTING_SONG_BOOLEAN_MUSIC_IS_SPECIFIC_GENRE,
	LISTING_SONG_BOOLEAN_MUSIC_IS_SPECIFIC_TEMPO,
	LISTING_SONG_BOOLEAN_REVIEWER_IS_GIVING_FEEDBACK,
	LISTING_SONG_BOOLEAN_REVIEWER_IS_GIVING_RATING,
	LISTING_SONG_BOOLEAN_REVIEWER_IS_HAVING_KNOWN_TIMELINE,
	LISTING_SONG_BOOLEAN_REVIEWER_IS_SPECIFIED,
	LISTING_SONG_BOOLEAN_ARTIST_IS_FEATURED,
	LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_HIGHEST_PROFESSIONALISM,
	LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_APPRECIATION_TOWARDS_BEGINNERS,
	LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_LACK_OF_CARE_FOR_THE_SONGWRITER,
	LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_EASY_ACCEPTANCE,
	LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_DIFFICULT_ACCEPTANCE,
	LISTING_SONG_BOOLEAN_CHANCES_IS_ACCEPTED,
	LISTING_SONG_BOOLEAN_CHANCES_IS_SUCCESSFUL_LAUNCH,
	LISTING_SONG_BOOLEAN_CHANCES_IS_HIT_SONG,
	LISTING_SONG_BOOLEAN_CHANCES_IS_RECORD_DEAL,
	LISTING_SONG_BOOLEAN_CHANCES_IS_RADIO_ROTATION,
	LISTING_SONG_BOOLEAN_CHANCES_IS_TV_ROTATION,
	LISTING_SONG_BOOLEAN_CHANCES_IS_RECEIVING_LEADS,
	LISTING_SONG_BOOLEAN_CHANCES_IS_COLLABORATION,
	LISTING_SONG_BOOLEAN_CHANCES_IS_PROMOTED,
	LISTING_SONG_BOOLEAN_CHANCES_IS_DISCOVERED_BY_PUBLISHERS,
	LISTING_SONG_BOOLEAN_CHANCES_IS_NETWORKING,
	
	LISTING_SONG_BOOLEAN_COUNT
};

inline String GetSongListingBooleanKey(int i) {
	switch (i) {
		case LISTING_SONG_BOOLEAN_IS_ALLOWED_MALE: return "the singer can be male";
		case LISTING_SONG_BOOLEAN_IS_ALLOWED_FEMALE: return "the singer can be female";
		case LISTING_SONG_BOOLEAN_ALLOWED_DEMO_QUALITY: return "demo quality is accepted";
		case LISTING_SONG_BOOLEAN_MUST_BE_BROADCAST_QUALITY: return "the song must be mastered and broadcast quality";
		case LISTING_SONG_BOOLEAN_MONETARY_SIGNIFICANT_INCOME: return "it is likely that the income could be significant";
		case LISTING_SONG_BOOLEAN_MONETARY_DIFFICULT_TO_DETERMINE: return "is the income difficult to determine";
		case LISTING_SONG_BOOLEAN_MONETARY_COULD_BE_ROYALTIES: return "could be opening up opportunities for royalties";
		case LISTING_SONG_BOOLEAN_MONETARY_FUTURE_COLLABS: return "could be opening future collaborations with music stars";
		case LISTING_SONG_BOOLEAN_IS_EXCLUSIVE: return "does the song have to be exclusive for this";
		case LISTING_SONG_BOOLEAN_PLACEMENT_TV: return "does the deal have a TV placement for the song";
		case LISTING_SONG_BOOLEAN_PLACEMENT_RADIO: return "does the deal have a radio placement for the song";
		case LISTING_SONG_BOOLEAN_PLACEMENT_MOVIE: return "does the deal have a movie placement for the song";
		case LISTING_SONG_BOOLEAN_PLACEMENT_AD: return "does the deal have an advertisement placement for the song";
		case LISTING_SONG_BOOLEAN_PLACEMENT_PLAYLIST: return "does the deal have a playlist placement for the song";
		case LISTING_SONG_BOOLEAN_LISTING_WRITER_IS_DECISION_MAKER: return "is the maker of this listing the decision maker for the song";
		case LISTING_SONG_BOOLEAN_LISTING_WRITER_IS_COMPANY: return "is the maker of this listing a company";
		case LISTING_SONG_BOOLEAN_LISTING_WRITER_IS_PERSON: return "is the maker of this listing a person with personal needs";
		case LISTING_SONG_BOOLEAN_MUSIC_IS_SPECIFIC_GENRE: return "does the song have to be in a specific genre";
		case LISTING_SONG_BOOLEAN_MUSIC_IS_SPECIFIC_TEMPO: return "does the song have to be in a specific tempo";
		case LISTING_SONG_BOOLEAN_REVIEWER_IS_GIVING_FEEDBACK: return "is the song reviewer giving feedback for the song";
		case LISTING_SONG_BOOLEAN_REVIEWER_IS_GIVING_RATING: return "is the song reviewer giving (star) rating for the song";
		case LISTING_SONG_BOOLEAN_REVIEWER_IS_HAVING_KNOWN_TIMELINE: return "is the timeline for the usage of the song known";
		case LISTING_SONG_BOOLEAN_REVIEWER_IS_SPECIFIED: return "is the reviewer specified in any way (e.g. being a team or a known person)";
		case LISTING_SONG_BOOLEAN_ARTIST_IS_FEATURED: return "is potential for artist to be featured";
		case LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_HIGHEST_PROFESSIONALISM: return "is language and tone of listing conveying a highest level of professionalism";
		case LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_APPRECIATION_TOWARDS_BEGINNERS: return "is language and tone of listing conveying appreciation towards beginners in songwriting";
		case LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_LACK_OF_CARE_FOR_THE_SONGWRITER: return "is language and tone of listing conveying lacking care for the monetary needs of a songwriter";
		case LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_EASY_ACCEPTANCE: return "is language and tone of listing conveying the message of easy acceptance for the song";
		case LISTING_SONG_BOOLEAN_OPPORTUNITY_CONVEYING_DIFFICULT_ACCEPTANCE: return "is language and tone of listing conveying the message of difficult acceptance for the song";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_ACCEPTED: return "does this listing have increased chances of being accepted";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_SUCCESSFUL_LAUNCH: return "does this listing have increased chances of launching a successful music career";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_HIT_SONG: return "does this listing have increased chances of success for a hit song";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_RECORD_DEAL: return "does this listing have increased chances of resulting in a record deal";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_RADIO_ROTATION: return "does this listing have increased chances of getting an artist's song played on the radio";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_TV_ROTATION: return "does this listing have increased chances of getting an artist's song placed in a TV show or movie";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_RECEIVING_LEADS: return "does this listing have increased chances of receiving prime opportunities and leads in the music industry";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_COLLABORATION: return "does this listing have increased chances of collaborating with successful writers and producers in the music industry";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_PROMOTED: return "does this listing have increased chances of gaining exposure and promotion in the music industry";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_DISCOVERED_BY_PUBLISHERS: return "does this listing have increased chances of being discovered by major record labels and publishers";
		case LISTING_SONG_BOOLEAN_CHANCES_IS_NETWORKING: return "does this listing have increased chances of receiving valuable networking opportunities in the music industry";
		default: return "";
	}
}

enum {
	LISTING_SONG_STRING_DEAL_STRUCTURE,
	LISTING_SONG_STRING_DEAL_TYPE,
	LISTING_SONG_STRING_ARTIST_ROYALTY_PERCENTAGE,
	LISTING_SONG_STRING_DECISION_MAKER,
	LISTING_SONG_STRING_WHAT_KIND_OF_SOUND,
	LISTING_SONG_STRING_TYPE_OF_TARGET,
	LISTING_SONG_STRING_COMPANY_BEHIND,
	LISTING_SONG_STRING_DESIRED_ARTIST,
	LISTING_SONG_STRING_LACKING_INFORMATION_CONTEXT,
	LISTING_SONG_STRING_LACKING_INFORMATION_SONG,
	LISTING_SONG_STRING_SONGWRITING_GUIDELINES,
	LISTING_SONG_STRING_EXPECTED_MONETARY_INCOME,
	LISTING_SONG_STRING_LEVEL_OF_COMPETITION,
	
	LISTING_SONG_STRING_COUNT
};


inline String GetSongListingStringKey(int i) {
	switch (i) {
		case LISTING_SONG_STRING_DEAL_STRUCTURE: return "deal structure (e.g. exclusive)";
		case LISTING_SONG_STRING_DEAL_TYPE: return "deal type (e.g. song placement, radio play)";
		case LISTING_SONG_STRING_ARTIST_ROYALTY_PERCENTAGE: return "artist's royalty percentage";
		case LISTING_SONG_STRING_DECISION_MAKER: return "who is the decision maker";
		case LISTING_SONG_STRING_WHAT_KIND_OF_SOUND: return "what kind of sound the song should have";
		case LISTING_SONG_STRING_TYPE_OF_TARGET: return "type of the target movie / advertisement (e.g. romantic, sport product)";
		case LISTING_SONG_STRING_COMPANY_BEHIND: return "based on the language and tone, what type of company/person wrote this listing";
		case LISTING_SONG_STRING_DESIRED_ARTIST: return "based on the language and tone, what type of artist does the company/person want to work with";
		case LISTING_SONG_STRING_LACKING_INFORMATION_CONTEXT: return "based on general assumptions, what information is lacking about the context";
		case LISTING_SONG_STRING_LACKING_INFORMATION_SONG: return "based on general assumptions, what information is lacking about the song";
		case LISTING_SONG_STRING_SONGWRITING_GUIDELINES: return "based on general assumptions, what guidelines could be used while deciding what kind of song to make";
		case LISTING_SONG_STRING_EXPECTED_MONETARY_INCOME: return "based on general assumptions,  what kind of monetary income can be expected by getting accepted in this listing";
		case LISTING_SONG_STRING_LEVEL_OF_COMPETITION: return "based on general assumptions, what kind of level of competition is expected for this listing";
		
		default: return "";
	}
}

enum {
	LISTING_SONG_LIST_SIMILAR_SOUNDING_ARTIST,
	LISTING_SONG_LIST_DATA_WHAT_CAN_BE_INTERPRETED,
	LISTING_SONG_LIST_TONES_AND_MOODS,
	LISTING_SONG_LIST_INCREASED_CHANCES,
	LISTING_SONG_LIST_DOES_THIS_SONG_GET_SELECTED,
	
	LISTING_SONG_LIST_COUNT
};


inline String GetSongListingListKey(int i) {
	switch (i) {
		case LISTING_SONG_LIST_SIMILAR_SOUNDING_ARTIST: return "list of similar sounding artists";
		case LISTING_SONG_LIST_DATA_WHAT_CAN_BE_INTERPRETED: return "list of Data, what can be interpreted from this";
		case LISTING_SONG_LIST_TONES_AND_MOODS: return "what kind of tones and moods could be suggested for the song for this opportunity";
		case LISTING_SONG_LIST_INCREASED_CHANCES: return "List of \"does this listing have increased chances of\" for \"Based on assumptions about pop music and music producers/industry\"";
		case LISTING_SONG_LIST_DOES_THIS_SONG_GET_SELECTED: return "List of \"does this kind of song get selected\" for \"Based on assumptions about pop music and music producers/industry\"";
		default: return "";
	}
}












// TODO: move to file
enum {
	PART_BEGIN,
	PART_MID,
	PART_END,

	PART_COUNT
};

// TODO: Remove
struct ContentType : Moveable<ContentType> {
	String key, parts[PART_COUNT];

	void Visit(Vis& v);
	void Serialize(Stream& s) {s / key; for(int i = 0; i < PART_COUNT; i++) s / parts[i];}
	void Set(String key, String begin, String mid, String end, const char* p3=0)
	{
		this->key = key;
		parts[PART_BEGIN] = begin;
		parts[PART_MID] = mid;
		parts[PART_END] = end;
	}
	String ToString() const {return key;}
};
const Vector<ContentType>& GetContents(int appmode);
const Vector<String>& GetContentParts(int appmode);
int GetContentCount(int appmode);
const Index<String>& GetTypeclasses(int appmode);
int GetTypeclassCount(int appmode);

END_UPP_NAMESPACE

#endif
